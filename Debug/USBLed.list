
USBLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08008f9c  08008f9c  00009f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800916c  0800916c  0000b28c  2**0
                  CONTENTS
  4 .ARM          00000008  0800916c  0800916c  0000a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009174  08009174  0000b28c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009174  08009174  0000a174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009178  08009178  0000a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  0800917c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b28c  2**0
                  CONTENTS
 10 .bss          000013f0  2000028c  2000028c  0000b28c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000167c  2000167c  0000b28c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b28c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127be  00000000  00000000  0000b2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003464  00000000  00000000  0001da7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  00020ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be1  00000000  00000000  00021e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002004e  00000000  00000000  00022a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016616  00000000  00000000  00042a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0d6d  00000000  00000000  000590ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109e1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004498  00000000  00000000  00109e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0010e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000028c 	.word	0x2000028c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f84 	.word	0x08008f84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000290 	.word	0x20000290
 80001cc:	08008f84 	.word	0x08008f84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fac8 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f80c 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f8ea 	bl	8000464 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000290:	f000 f86a 	bl	8000368 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000294:	f000 f8a8 	bl	80003e8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000298:	f007 fa1c 	bl	80076d4 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Update_LED_Blink();
 800029c:	f007 fc02 	bl	8007aa4 <Update_LED_Blink>
  {
 80002a0:	bf00      	nop
 80002a2:	e7fb      	b.n	800029c <main+0x1c>

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b09e      	sub	sp, #120	@ 0x78
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002ae:	2228      	movs	r2, #40	@ 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f008 f9d8 	bl	8008668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c8:	463b      	mov	r3, r7
 80002ca:	223c      	movs	r2, #60	@ 0x3c
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f008 f9ca 	bl	8008668 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002d4:	2303      	movs	r3, #3
 80002d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002dc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	2310      	movs	r3, #16
 80002e8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	2302      	movs	r3, #2
 80002ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002f8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fb76 	bl	80029f0 <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800030a:	f000 f929 	bl	8000560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	2302      	movs	r3, #2
 8000314:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800031e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000324:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000328:	2101      	movs	r1, #1
 800032a:	4618      	mov	r0, r3
 800032c:	f003 fb9e 	bl	8003a6c <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000336:	f000 f913 	bl	8000560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800033a:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <SystemClock_Config+0xc0>)
 800033c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000342:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000346:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000348:	463b      	mov	r3, r7
 800034a:	4618      	mov	r0, r3
 800034c:	f003 fd5e 	bl	8003e0c <HAL_RCCEx_PeriphCLKConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000356:	f000 f903 	bl	8000560 <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3778      	adds	r7, #120	@ 0x78
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	00020020 	.word	0x00020020

08000368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <MX_I2C1_Init+0x74>)
 800036e:	4a1c      	ldr	r2, [pc, #112]	@ (80003e0 <MX_I2C1_Init+0x78>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <MX_I2C1_Init+0x74>)
 8000374:	4a1b      	ldr	r2, [pc, #108]	@ (80003e4 <MX_I2C1_Init+0x7c>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <MX_I2C1_Init+0x74>)
 8000380:	2201      	movs	r2, #1
 8000382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <MX_I2C1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <MX_I2C1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000396:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <MX_I2C1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a2:	480e      	ldr	r0, [pc, #56]	@ (80003dc <MX_I2C1_Init+0x74>)
 80003a4:	f000 fd5c 	bl	8000e60 <HAL_I2C_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ae:	f000 f8d7 	bl	8000560 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4809      	ldr	r0, [pc, #36]	@ (80003dc <MX_I2C1_Init+0x74>)
 80003b6:	f000 fdee 	bl	8000f96 <HAL_I2CEx_ConfigAnalogFilter>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003c0:	f000 f8ce 	bl	8000560 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003c4:	2100      	movs	r1, #0
 80003c6:	4805      	ldr	r0, [pc, #20]	@ (80003dc <MX_I2C1_Init+0x74>)
 80003c8:	f000 fe30 	bl	800102c <HAL_I2CEx_ConfigDigitalFilter>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003d2:	f000 f8c5 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200002a8 	.word	0x200002a8
 80003e0:	40005400 	.word	0x40005400
 80003e4:	00201d2b 	.word	0x00201d2b

080003e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003ec:	4b1b      	ldr	r3, [pc, #108]	@ (800045c <MX_SPI1_Init+0x74>)
 80003ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000460 <MX_SPI1_Init+0x78>)
 80003f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003f2:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <MX_SPI1_Init+0x74>)
 80003f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003fa:	4b18      	ldr	r3, [pc, #96]	@ (800045c <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000400:	4b16      	ldr	r3, [pc, #88]	@ (800045c <MX_SPI1_Init+0x74>)
 8000402:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000406:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000408:	4b14      	ldr	r3, [pc, #80]	@ (800045c <MX_SPI1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800040e:	4b13      	ldr	r3, [pc, #76]	@ (800045c <MX_SPI1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000414:	4b11      	ldr	r3, [pc, #68]	@ (800045c <MX_SPI1_Init+0x74>)
 8000416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800041a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800041c:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <MX_SPI1_Init+0x74>)
 800041e:	2208      	movs	r2, #8
 8000420:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <MX_SPI1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000428:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <MX_SPI1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	@ (800045c <MX_SPI1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000434:	4b09      	ldr	r3, [pc, #36]	@ (800045c <MX_SPI1_Init+0x74>)
 8000436:	2207      	movs	r2, #7
 8000438:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800043a:	4b08      	ldr	r3, [pc, #32]	@ (800045c <MX_SPI1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <MX_SPI1_Init+0x74>)
 8000442:	2208      	movs	r2, #8
 8000444:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000446:	4805      	ldr	r0, [pc, #20]	@ (800045c <MX_SPI1_Init+0x74>)
 8000448:	f003 fe90 	bl	800416c <HAL_SPI_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000452:	f000 f885 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	200002fc 	.word	0x200002fc
 8000460:	40013000 	.word	0x40013000

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	@ 0x28
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800047a:	4b37      	ldr	r3, [pc, #220]	@ (8000558 <MX_GPIO_Init+0xf4>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a36      	ldr	r2, [pc, #216]	@ (8000558 <MX_GPIO_Init+0xf4>)
 8000480:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b34      	ldr	r3, [pc, #208]	@ (8000558 <MX_GPIO_Init+0xf4>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000492:	4b31      	ldr	r3, [pc, #196]	@ (8000558 <MX_GPIO_Init+0xf4>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a30      	ldr	r2, [pc, #192]	@ (8000558 <MX_GPIO_Init+0xf4>)
 8000498:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b2e      	ldr	r3, [pc, #184]	@ (8000558 <MX_GPIO_Init+0xf4>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000558 <MX_GPIO_Init+0xf4>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000558 <MX_GPIO_Init+0xf4>)
 80004b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b28      	ldr	r3, [pc, #160]	@ (8000558 <MX_GPIO_Init+0xf4>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b25      	ldr	r3, [pc, #148]	@ (8000558 <MX_GPIO_Init+0xf4>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a24      	ldr	r2, [pc, #144]	@ (8000558 <MX_GPIO_Init+0xf4>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <MX_GPIO_Init+0xf4>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b1f      	ldr	r3, [pc, #124]	@ (8000558 <MX_GPIO_Init+0xf4>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a1e      	ldr	r2, [pc, #120]	@ (8000558 <MX_GPIO_Init+0xf4>)
 80004e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <MX_GPIO_Init+0xf4>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004f2:	2200      	movs	r2, #0
 80004f4:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80004f8:	4818      	ldr	r0, [pc, #96]	@ (800055c <MX_GPIO_Init+0xf8>)
 80004fa:	f000 fc7f 	bl	8000dfc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004fe:	2337      	movs	r3, #55	@ 0x37
 8000500:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000502:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4619      	mov	r1, r3
 8000512:	4812      	ldr	r0, [pc, #72]	@ (800055c <MX_GPIO_Init+0xf8>)
 8000514:	f000 faf8 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000518:	f64f 7308 	movw	r3, #65288	@ 0xff08
 800051c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051e:	2301      	movs	r3, #1
 8000520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4619      	mov	r1, r3
 8000530:	480a      	ldr	r0, [pc, #40]	@ (800055c <MX_GPIO_Init+0xf8>)
 8000532:	f000 fae9 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054c:	f000 fadc 	bl	8000b08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000550:	bf00      	nop
 8000552:	3728      	adds	r7, #40	@ 0x28
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000
 800055c:	48001000 	.word	0x48001000

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <Error_Handler+0x8>

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000572:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <HAL_MspInit+0x44>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a0e      	ldr	r2, [pc, #56]	@ (80005b0 <HAL_MspInit+0x44>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <HAL_MspInit+0x44>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_MspInit+0x44>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a08      	ldr	r2, [pc, #32]	@ (80005b0 <HAL_MspInit+0x44>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <HAL_MspInit+0x44>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005a2:	2007      	movs	r0, #7
 80005a4:	f000 fa6e 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	@ 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a17      	ldr	r2, [pc, #92]	@ (8000630 <HAL_I2C_MspInit+0x7c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d127      	bne.n	8000626 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <HAL_I2C_MspInit+0x80>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a16      	ldr	r2, [pc, #88]	@ (8000634 <HAL_I2C_MspInit+0x80>)
 80005dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <HAL_I2C_MspInit+0x80>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80005ee:	23c0      	movs	r3, #192	@ 0xc0
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f2:	2312      	movs	r3, #18
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fa:	2303      	movs	r3, #3
 80005fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005fe:	2304      	movs	r3, #4
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	@ (8000638 <HAL_I2C_MspInit+0x84>)
 800060a:	f000 fa7d 	bl	8000b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <HAL_I2C_MspInit+0x80>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a08      	ldr	r2, [pc, #32]	@ (8000634 <HAL_I2C_MspInit+0x80>)
 8000614:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <HAL_I2C_MspInit+0x80>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	@ 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40005400 	.word	0x40005400
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400

0800063c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	@ 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a17      	ldr	r2, [pc, #92]	@ (80006b8 <HAL_SPI_MspInit+0x7c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d128      	bne.n	80006b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <HAL_SPI_MspInit+0x80>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a16      	ldr	r2, [pc, #88]	@ (80006bc <HAL_SPI_MspInit+0x80>)
 8000664:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <HAL_SPI_MspInit+0x80>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <HAL_SPI_MspInit+0x80>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a10      	ldr	r2, [pc, #64]	@ (80006bc <HAL_SPI_MspInit+0x80>)
 800067c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <HAL_SPI_MspInit+0x80>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800068e:	23e0      	movs	r3, #224	@ 0xe0
 8000690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800069e:	2305      	movs	r3, #5
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ac:	f000 fa2c 	bl	8000b08 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	@ 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40013000 	.word	0x40013000
 80006bc:	40021000 	.word	0x40021000

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <NMI_Handler+0x4>

080006c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <HardFault_Handler+0x4>

080006d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <MemManage_Handler+0x4>

080006d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <BusFault_Handler+0x4>

080006e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <UsageFault_Handler+0x4>

080006e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000716:	f000 f8c5 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000724:	4802      	ldr	r0, [pc, #8]	@ (8000730 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000726:	f000 fdba 	bl	800129e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20001040 	.word	0x20001040

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f007 ff96 	bl	8008694 <__errno>
 8000768:	4603      	mov	r3, r0
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000a000 	.word	0x2000a000
 8000794:	00000400 	.word	0x00000400
 8000798:	20000360 	.word	0x20000360
 800079c:	20001680 	.word	0x20001680

080007a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	@ (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007fc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c8:	f7ff ffea 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ce:	490d      	ldr	r1, [pc, #52]	@ (8000804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <LoopForever+0xe>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000810 <LoopForever+0x16>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f007 ff55 	bl	80086a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f6:	f7ff fd43 	bl	8000280 <main>

080007fa <LoopForever>:

LoopForever:
    b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007fc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8000808:	0800917c 	.word	0x0800917c
  ldr r2, =_sbss
 800080c:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 8000810:	2000167c 	.word	0x2000167c

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>
	...

08000818 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <HAL_Init+0x28>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	@ (8000840 <HAL_Init+0x28>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 f92b 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 f808 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000834:	f7ff fe9a 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40022000 	.word	0x40022000

08000844 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_InitTick+0x54>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <HAL_InitTick+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f943 	bl	8000aee <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00e      	b.n	8000890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d80a      	bhi.n	800088e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f90b 	bl	8000a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4a06      	ldr	r2, [pc, #24]	@ (80008a0 <HAL_InitTick+0x5c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000000 	.word	0x20000000
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000004 	.word	0x20000004

080008a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_IncTick+0x20>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_IncTick+0x24>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	@ (80008c8 <HAL_IncTick+0x24>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000364 	.word	0x20000364

080008cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80008d0:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <HAL_GetTick+0x14>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000364 	.word	0x20000364

080008e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000900:	4013      	ands	r3, r2
 8000902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800090c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000916:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	60d3      	str	r3, [r2, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000930:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <__NVIC_GetPriorityGrouping+0x18>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	f003 0307 	and.w	r3, r3, #7
}
 800093a:	4618      	mov	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	db0b      	blt.n	8000972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 021f 	and.w	r2, r3, #31
 8000960:	4907      	ldr	r1, [pc, #28]	@ (8000980 <__NVIC_EnableIRQ+0x38>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	095b      	lsrs	r3, r3, #5
 8000968:	2001      	movs	r0, #1
 800096a:	fa00 f202 	lsl.w	r2, r0, r2
 800096e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	@ (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	@ (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	@ 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	@ 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a50:	d301      	bcc.n	8000a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00f      	b.n	8000a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <SysTick_Config+0x40>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5e:	210f      	movs	r1, #15
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f7ff ff8e 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <SysTick_Config+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <SysTick_Config+0x40>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff29 	bl	80008e4 <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff3e 	bl	800092c <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ff8e 	bl	80009d8 <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff5d 	bl	8000984 <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff31 	bl	8000948 <__NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffa2 	bl	8000a40 <SysTick_Config>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	e154      	b.n	8000dc2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	4013      	ands	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 8146 	beq.w	8000dbc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d005      	beq.n	8000b48 <HAL_GPIO_Init+0x40>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d130      	bne.n	8000baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b7e:	2201      	movs	r2, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	f003 0201 	and.w	r2, r3, #1
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d017      	beq.n	8000be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d123      	bne.n	8000c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	08da      	lsrs	r2, r3, #3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	220f      	movs	r2, #15
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	691a      	ldr	r2, [r3, #16]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	08da      	lsrs	r2, r3, #3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	6939      	ldr	r1, [r7, #16]
 8000c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0203 	and.w	r2, r3, #3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 80a0 	beq.w	8000dbc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	4b58      	ldr	r3, [pc, #352]	@ (8000de0 <HAL_GPIO_Init+0x2d8>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a57      	ldr	r2, [pc, #348]	@ (8000de0 <HAL_GPIO_Init+0x2d8>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b55      	ldr	r3, [pc, #340]	@ (8000de0 <HAL_GPIO_Init+0x2d8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c94:	4a53      	ldr	r2, [pc, #332]	@ (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cbe:	d019      	beq.n	8000cf4 <HAL_GPIO_Init+0x1ec>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a49      	ldr	r2, [pc, #292]	@ (8000de8 <HAL_GPIO_Init+0x2e0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d013      	beq.n	8000cf0 <HAL_GPIO_Init+0x1e8>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a48      	ldr	r2, [pc, #288]	@ (8000dec <HAL_GPIO_Init+0x2e4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d00d      	beq.n	8000cec <HAL_GPIO_Init+0x1e4>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a47      	ldr	r2, [pc, #284]	@ (8000df0 <HAL_GPIO_Init+0x2e8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d007      	beq.n	8000ce8 <HAL_GPIO_Init+0x1e0>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a46      	ldr	r2, [pc, #280]	@ (8000df4 <HAL_GPIO_Init+0x2ec>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d101      	bne.n	8000ce4 <HAL_GPIO_Init+0x1dc>
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	e008      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e004      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d06:	4937      	ldr	r1, [pc, #220]	@ (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d14:	4b38      	ldr	r3, [pc, #224]	@ (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d38:	4a2f      	ldr	r2, [pc, #188]	@ (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d62:	4a25      	ldr	r2, [pc, #148]	@ (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d68:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000db6:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f47f aea3 	bne.w	8000b18 <HAL_GPIO_Init+0x10>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	371c      	adds	r7, #28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010000 	.word	0x40010000
 8000de8:	48000400 	.word	0x48000400
 8000dec:	48000800 	.word	0x48000800
 8000df0:	48000c00 	.word	0x48000c00
 8000df4:	48001000 	.word	0x48001000
 8000df8:	40010400 	.word	0x40010400

08000dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e18:	e002      	b.n	8000e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4013      	ands	r3, r2
 8000e44:	041a      	lsls	r2, r3, #16
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	43d9      	mvns	r1, r3
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	400b      	ands	r3, r1
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	619a      	str	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e08d      	b.n	8000f8e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d106      	bne.n	8000e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fb94 	bl	80005b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2224      	movs	r2, #36	@ 0x24
 8000e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0201 	bic.w	r2, r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000eb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ec0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d107      	bne.n	8000eda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	e006      	b.n	8000ee8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000ee6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d108      	bne.n	8000f02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	e007      	b.n	8000f12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69d9      	ldr	r1, [r3, #28]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1a      	ldr	r2, [r3, #32]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0201 	orr.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2220      	movs	r2, #32
 8000f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b20      	cmp	r3, #32
 8000faa:	d138      	bne.n	800101e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d101      	bne.n	8000fba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e032      	b.n	8001020 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2224      	movs	r2, #36	@ 0x24
 8000fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000fe8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6819      	ldr	r1, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 0201 	orr.w	r2, r2, #1
 8001008:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2220      	movs	r2, #32
 800100e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800101e:	2302      	movs	r3, #2
  }
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b20      	cmp	r3, #32
 8001040:	d139      	bne.n	80010b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800104c:	2302      	movs	r3, #2
 800104e:	e033      	b.n	80010b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2224      	movs	r2, #36	@ 0x24
 800105c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0201 	bic.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800107e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0201 	orr.w	r2, r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2220      	movs	r2, #32
 80010a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80010b6:	2302      	movs	r3, #2
  }
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e0b9      	b.n	800124a <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f006 ff40 	bl	8007f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 f8f7 	bl	80042f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e03e      	b.n	8001186 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	3311      	adds	r3, #17
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	440b      	add	r3, r1
 800112a:	3310      	adds	r3, #16
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	3313      	adds	r3, #19
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	440b      	add	r3, r1
 8001152:	3320      	adds	r3, #32
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	440b      	add	r3, r1
 8001166:	3324      	adds	r3, #36	@ 0x24
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	440b      	add	r3, r1
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	3301      	adds	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	791b      	ldrb	r3, [r3, #4]
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3bb      	bcc.n	8001108 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e044      	b.n	8001220 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	440b      	add	r3, r1
 80011e6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	440b      	add	r3, r1
 80011fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	440b      	add	r3, r1
 8001212:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	3301      	adds	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3b5      	bcc.n	8001196 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6818      	ldr	r0, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3304      	adds	r3, #4
 8001232:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001236:	f003 f876 	bl	8004326 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_PCD_Start+0x16>
 8001264:	2302      	movs	r3, #2
 8001266:	e016      	b.n	8001296 <HAL_PCD_Start+0x44>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f003 f824 	bl	80042c2 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800127a:	2101      	movs	r1, #1
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f007 f913 	bl	80084a8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fdfe 	bl	8005e88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 fdf7 	bl	8005e9e <USB_ReadInterrupts>
 80012b0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fab1 	bl	8001824 <PCD_EP_ISR_Handler>

    return;
 80012c2:	e0bd      	b.n	8001440 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d013      	beq.n	80012f6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012e0:	b292      	uxth	r2, r2
 80012e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f006 fee3 	bl	80080b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012ec:	2100      	movs	r1, #0
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f8a9 	bl	8001446 <HAL_PCD_SetAddress>

    return;
 80012f4:	e0a4      	b.n	8001440 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00c      	beq.n	800131a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001312:	b292      	uxth	r2, r2
 8001314:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001318:	e092      	b.n	8001440 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00c      	beq.n	800133e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001336:	b292      	uxth	r2, r2
 8001338:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800133c:	e080      	b.n	8001440 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d027      	beq.n	8001398 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001350:	b29a      	uxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0204 	bic.w	r2, r2, #4
 800135a:	b292      	uxth	r2, r2
 800135c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001368:	b29a      	uxth	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0208 	bic.w	r2, r2, #8
 8001372:	b292      	uxth	r2, r2
 8001374:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f006 fed3 	bl	8008124 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001390:	b292      	uxth	r2, r2
 8001392:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001396:	e053      	b.n	8001440 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d027      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0208 	orr.w	r2, r2, #8
 80013b4:	b292      	uxth	r2, r2
 80013b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013cc:	b292      	uxth	r2, r2
 80013ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80013da:	b29a      	uxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0204 	orr.w	r2, r2, #4
 80013e4:	b292      	uxth	r2, r2
 80013e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f006 fe80 	bl	80080f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013f0:	e026      	b.n	8001440 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00f      	beq.n	800141c <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001404:	b29a      	uxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800140e:	b292      	uxth	r2, r2
 8001410:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f006 fe3e 	bl	8008096 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800141a:	e011      	b.n	8001440 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00c      	beq.n	8001440 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001438:	b292      	uxth	r2, r2
 800143a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800143e:	bf00      	nop
  }
}
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_PCD_SetAddress+0x1a>
 800145c:	2302      	movs	r3, #2
 800145e:	e012      	b.n	8001486 <HAL_PCD_SetAddress+0x40>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	78fa      	ldrb	r2, [r7, #3]
 800146c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	78fa      	ldrb	r2, [r7, #3]
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fcf2 	bl	8005e60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	4608      	mov	r0, r1
 8001498:	4611      	mov	r1, r2
 800149a:	461a      	mov	r2, r3
 800149c:	4603      	mov	r3, r0
 800149e:	70fb      	strb	r3, [r7, #3]
 80014a0:	460b      	mov	r3, r1
 80014a2:	803b      	strh	r3, [r7, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da0e      	bge.n	80014d2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f003 0207 	and.w	r2, r3, #7
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	3310      	adds	r3, #16
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	705a      	strb	r2, [r3, #1]
 80014d0:	e00e      	b.n	80014f0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f003 0207 	and.w	r2, r3, #7
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014fc:	883a      	ldrh	r2, [r7, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	78ba      	ldrb	r2, [r7, #2]
 8001506:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001508:	78bb      	ldrb	r3, [r7, #2]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d102      	bne.n	8001514 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_PCD_EP_Open+0x94>
 800151e:	2302      	movs	r3, #2
 8001520:	e00e      	b.n	8001540 <HAL_PCD_EP_Open+0xb2>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68f9      	ldr	r1, [r7, #12]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 ff17 	bl	8004364 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800153e:	7afb      	ldrb	r3, [r7, #11]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001558:	2b00      	cmp	r3, #0
 800155a:	da0e      	bge.n	800157a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	f003 0207 	and.w	r2, r3, #7
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	3310      	adds	r3, #16
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2201      	movs	r2, #1
 8001576:	705a      	strb	r2, [r3, #1]
 8001578:	e00e      	b.n	8001598 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	f003 0207 	and.w	r2, r3, #7
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_PCD_EP_Close+0x6a>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e00e      	b.n	80015d0 <HAL_PCD_EP_Close+0x88>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68f9      	ldr	r1, [r7, #12]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fbb7 	bl	8004d34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	460b      	mov	r3, r1
 80015e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	f003 0207 	and.w	r2, r3, #7
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2200      	movs	r2, #0
 8001616:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	b2da      	uxtb	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6979      	ldr	r1, [r7, #20]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fd6f 	bl	800510e <USB_EPStartXfer>

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	460b      	mov	r3, r1
 8001644:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	f003 0207 	and.w	r2, r3, #7
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800165c:	681b      	ldr	r3, [r3, #0]
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	460b      	mov	r3, r1
 8001678:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800167a:	7afb      	ldrb	r3, [r7, #11]
 800167c:	f003 0207 	and.w	r2, r3, #7
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	3310      	adds	r3, #16
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4413      	add	r3, r2
 800168e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2201      	movs	r2, #1
 80016b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016b6:	7afb      	ldrb	r3, [r7, #11]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6979      	ldr	r1, [r7, #20]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fd20 	bl	800510e <USB_EPStartXfer>

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	7912      	ldrb	r2, [r2, #4]
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e03e      	b.n	8001774 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	da0e      	bge.n	800171c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	f003 0207 	and.w	r2, r3, #7
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	3310      	adds	r3, #16
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	705a      	strb	r2, [r3, #1]
 800171a:	e00c      	b.n	8001736 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	b2da      	uxtb	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_PCD_EP_SetStall+0x7e>
 8001752:	2302      	movs	r3, #2
 8001754:	e00e      	b.n	8001774 <HAL_PCD_EP_SetStall+0x9c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fa81 	bl	8005c6c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	7912      	ldrb	r2, [r2, #4]
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e040      	b.n	800181c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800179a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da0e      	bge.n	80017c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	f003 0207 	and.w	r2, r3, #7
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	3310      	adds	r3, #16
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	705a      	strb	r2, [r3, #1]
 80017be:	e00e      	b.n	80017de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	f003 0207 	and.w	r2, r3, #7
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_PCD_EP_ClrStall+0x82>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e00e      	b.n	800181c <HAL_PCD_EP_ClrStall+0xa0>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68f9      	ldr	r1, [r7, #12]
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fa7e 	bl	8005d0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b092      	sub	sp, #72	@ 0x48
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800182c:	e341      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x68e>
  {
    wIstr = hpcd->Instance->ISTR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001836:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001838:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8001844:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001848:	2b00      	cmp	r3, #0
 800184a:	f040 810e 	bne.w	8001a6a <PCD_EP_ISR_Handler+0x246>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800184e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b00      	cmp	r3, #0
 8001856:	d14e      	bne.n	80018f6 <PCD_EP_ISR_Handler+0xd2>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001868:	813b      	strh	r3, [r7, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	893b      	ldrh	r3, [r7, #8]
 8001870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001878:	b29b      	uxth	r3, r3
 800187a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3310      	adds	r3, #16
 8001880:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	3302      	adds	r3, #2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	441a      	add	r2, r3
 80018b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018bc:	2100      	movs	r1, #0
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f006 fbcf 	bl	8008062 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7b1b      	ldrb	r3, [r3, #12]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 82f1 	beq.w	8001eb2 <PCD_EP_ISR_Handler+0x68e>
 80018d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f040 82ec 	bne.w	8001eb2 <PCD_EP_ISR_Handler+0x68e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7b1b      	ldrb	r3, [r3, #12]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	731a      	strb	r2, [r3, #12]
 80018f4:	e2dd      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x68e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018fc:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001906:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800190c:	2b00      	cmp	r3, #0
 800190e:	d034      	beq.n	800197a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001918:	b29b      	uxth	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	3306      	adds	r3, #6
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	4413      	add	r3, r2
 800192e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800193a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001948:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800194a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800194c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800194e:	b29b      	uxth	r3, r3
 8001950:	f004 fafb 	bl	8005f4a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	b29a      	uxth	r2, r3
 800195c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001960:	4013      	ands	r3, r2
 8001962:	817b      	strh	r3, [r7, #10]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	897a      	ldrh	r2, [r7, #10]
 800196a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800196e:	b292      	uxth	r2, r2
 8001970:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f006 fb48 	bl	8008008 <HAL_PCD_SetupStageCallback>
 8001978:	e29b      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x68e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800197a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800197e:	2b00      	cmp	r3, #0
 8001980:	f280 8297 	bge.w	8001eb2 <PCD_EP_ISR_Handler+0x68e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29a      	uxth	r2, r3
 800198c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001990:	4013      	ands	r3, r2
 8001992:	81fb      	strh	r3, [r7, #14]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	89fa      	ldrh	r2, [r7, #14]
 800199a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800199e:	b292      	uxth	r2, r2
 80019a0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	3306      	adds	r3, #6
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d019      	beq.n	8001a0a <PCD_EP_ISR_Handler+0x1e6>
 80019d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d015      	beq.n	8001a0a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019e4:	6959      	ldr	r1, [r3, #20]
 80019e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f004 faab 	bl	8005f4a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	441a      	add	r2, r3
 80019fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a00:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a02:	2100      	movs	r1, #0
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f006 fb11 	bl	800802c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001a14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f040 824a 	bne.w	8001eb2 <PCD_EP_ISR_Handler+0x68e>
 8001a1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001a20:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001a24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001a28:	f000 8243 	beq.w	8001eb2 <PCD_EP_ISR_Handler+0x68e>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a3c:	81bb      	strh	r3, [r7, #12]
 8001a3e:	89bb      	ldrh	r3, [r7, #12]
 8001a40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001a44:	81bb      	strh	r3, [r7, #12]
 8001a46:	89bb      	ldrh	r3, [r7, #12]
 8001a48:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001a4c:	81bb      	strh	r3, [r7, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	89bb      	ldrh	r3, [r7, #12]
 8001a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	8013      	strh	r3, [r2, #0]
 8001a68:	e223      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x68e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a7c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f280 80f7 	bge.w	8001c74 <PCD_EP_ISR_Handler+0x450>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ab0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ab4:	b292      	uxth	r2, r2
 8001ab6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ab8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ad0:	7b1b      	ldrb	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d125      	bne.n	8001b22 <PCD_EP_ISR_Handler+0x2fe>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	3306      	adds	r3, #6
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001afe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8001b02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 808f 	beq.w	8001c2a <PCD_EP_ISR_Handler+0x406>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b12:	6959      	ldr	r1, [r3, #20]
 8001b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b16:	88da      	ldrh	r2, [r3, #6]
 8001b18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001b1c:	f004 fa15 	bl	8005f4a <USB_ReadPMA>
 8001b20:	e083      	b.n	8001c2a <PCD_EP_ISR_Handler+0x406>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b24:	78db      	ldrb	r3, [r3, #3]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d109      	bne.n	8001b3e <PCD_EP_ISR_Handler+0x31a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f9cc 	bl	8001ece <HAL_PCD_EP_DB_Receive>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001b3c:	e075      	b.n	8001c2a <PCD_EP_ISR_Handler+0x406>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b58:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	441a      	add	r2, r3
 8001b68:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d024      	beq.n	8001be2 <PCD_EP_ISR_Handler+0x3be>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	3302      	adds	r3, #2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001bc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d02e      	beq.n	8001c2a <PCD_EP_ISR_Handler+0x406>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bd2:	6959      	ldr	r1, [r3, #20]
 8001bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bd6:	891a      	ldrh	r2, [r3, #8]
 8001bd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001bdc:	f004 f9b5 	bl	8005f4a <USB_ReadPMA>
 8001be0:	e023      	b.n	8001c2a <PCD_EP_ISR_Handler+0x406>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3306      	adds	r3, #6
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001c0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <PCD_EP_ISR_Handler+0x406>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c1c:	6959      	ldr	r1, [r3, #20]
 8001c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c20:	895a      	ldrh	r2, [r3, #10]
 8001c22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001c26:	f004 f990 	bl	8005f4a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001c32:	441a      	add	r2, r3
 8001c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001c40:	441a      	add	r2, r3
 8001c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c44:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <PCD_EP_ISR_Handler+0x436>
 8001c4e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d206      	bcs.n	8001c68 <PCD_EP_ISR_Handler+0x444>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f006 f9e3 	bl	800802c <HAL_PCD_DataOutStageCallback>
 8001c66:	e005      	b.n	8001c74 <PCD_EP_ISR_Handler+0x450>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fa4d 	bl	800510e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8119 	beq.w	8001eb2 <PCD_EP_ISR_Handler+0x68e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c80:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	3310      	adds	r3, #16
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	441a      	add	r2, r3
 8001cbe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cce:	78db      	ldrb	r3, [r3, #3]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	f040 80a1 	bne.w	8001e18 <PCD_EP_ISR_Handler+0x5f4>
        {
          ep->xfer_len = 0U;
 8001cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cde:	7b1b      	ldrb	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8092 	beq.w	8001e0a <PCD_EP_ISR_Handler+0x5e6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ce6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d046      	beq.n	8001d7e <PCD_EP_ISR_Handler+0x55a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d126      	bne.n	8001d46 <PCD_EP_ISR_Handler+0x522>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	011a      	lsls	r2, r3, #4
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	801a      	strh	r2, [r3, #0]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	801a      	strh	r2, [r3, #0]
 8001d44:	e061      	b.n	8001e0a <PCD_EP_ISR_Handler+0x5e6>
 8001d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d48:	785b      	ldrb	r3, [r3, #1]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d15d      	bne.n	8001e0a <PCD_EP_ISR_Handler+0x5e6>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	4413      	add	r3, r2
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	011a      	lsls	r2, r3, #4
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	e045      	b.n	8001e0a <PCD_EP_ISR_Handler+0x5e6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d126      	bne.n	8001dda <PCD_EP_ISR_Handler+0x5b6>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	4413      	add	r3, r2
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	011a      	lsls	r2, r3, #4
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	4413      	add	r3, r2
 8001dae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	801a      	strh	r2, [r3, #0]
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	801a      	strh	r2, [r3, #0]
 8001dd8:	e017      	b.n	8001e0a <PCD_EP_ISR_Handler+0x5e6>
 8001dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d113      	bne.n	8001e0a <PCD_EP_ISR_Handler+0x5e6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df0:	4413      	add	r3, r2
 8001df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	011a      	lsls	r2, r3, #4
 8001dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e06:	2200      	movs	r2, #0
 8001e08:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f006 f926 	bl	8008062 <HAL_PCD_DataInStageCallback>
 8001e16:	e04c      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x68e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d141      	bne.n	8001ea6 <PCD_EP_ISR_Handler+0x682>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	3302      	adds	r3, #2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8001e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e4e:	699a      	ldr	r2, [r3, #24]
 8001e50:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d906      	bls.n	8001e64 <PCD_EP_ISR_Handler+0x640>
            {
              ep->xfer_len -= TxPctSize;
 8001e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e5c:	1ad2      	subs	r2, r2, r3
 8001e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e60:	619a      	str	r2, [r3, #24]
 8001e62:	e002      	b.n	8001e6a <PCD_EP_ISR_Handler+0x646>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <PCD_EP_ISR_Handler+0x65c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	4619      	mov	r1, r3
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f006 f8f2 	bl	8008062 <HAL_PCD_DataInStageCallback>
 8001e7e:	e018      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x68e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e86:	441a      	add	r2, r3
 8001e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e8a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e92:	441a      	add	r2, r3
 8001e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e96:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 f935 	bl	800510e <USB_EPStartXfer>
 8001ea4:	e005      	b.n	8001eb2 <PCD_EP_ISR_Handler+0x68e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ea6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f91b 	bl	80020e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f6ff acb5 	blt.w	800182e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3748      	adds	r7, #72	@ 0x48
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b088      	sub	sp, #32
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d07e      	beq.n	8001fe4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3302      	adds	r3, #2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	8b7b      	ldrh	r3, [r7, #26]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d306      	bcc.n	8001f28 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	8b7b      	ldrh	r3, [r7, #26]
 8001f20:	1ad2      	subs	r2, r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	619a      	str	r2, [r3, #24]
 8001f26:	e002      	b.n	8001f2e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d123      	bne.n	8001f7e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f50:	833b      	strh	r3, [r7, #24]
 8001f52:	8b3b      	ldrh	r3, [r7, #24]
 8001f54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f58:	833b      	strh	r3, [r7, #24]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	441a      	add	r2, r3
 8001f68:	8b3b      	ldrh	r3, [r7, #24]
 8001f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01f      	beq.n	8001fc8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fa2:	82fb      	strh	r3, [r7, #22]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	8afb      	ldrh	r3, [r7, #22]
 8001fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fc8:	8b7b      	ldrh	r3, [r7, #26]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	6959      	ldr	r1, [r3, #20]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	891a      	ldrh	r2, [r3, #8]
 8001fdc:	8b7b      	ldrh	r3, [r7, #26]
 8001fde:	f003 ffb4 	bl	8005f4a <USB_ReadPMA>
 8001fe2:	e07c      	b.n	80020de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	8b7b      	ldrh	r3, [r7, #26]
 8002014:	429a      	cmp	r2, r3
 8002016:	d306      	bcc.n	8002026 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	8b7b      	ldrh	r3, [r7, #26]
 800201e:	1ad2      	subs	r2, r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	619a      	str	r2, [r3, #24]
 8002024:	e002      	b.n	800202c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d123      	bne.n	800207c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	b29b      	uxth	r3, r3
 8002046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800204a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800204e:	83fb      	strh	r3, [r7, #30]
 8002050:	8bfb      	ldrh	r3, [r7, #30]
 8002052:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002056:	83fb      	strh	r3, [r7, #30]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	441a      	add	r2, r3
 8002066:	8bfb      	ldrh	r3, [r7, #30]
 8002068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800206c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002078:	b29b      	uxth	r3, r3
 800207a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d11f      	bne.n	80020c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800209c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020a0:	83bb      	strh	r3, [r7, #28]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	441a      	add	r2, r3
 80020b0:	8bbb      	ldrh	r3, [r7, #28]
 80020b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020c6:	8b7b      	ldrh	r3, [r7, #26]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6959      	ldr	r1, [r3, #20]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	895a      	ldrh	r2, [r3, #10]
 80020d8:	8b7b      	ldrh	r3, [r7, #26]
 80020da:	f003 ff36 	bl	8005f4a <USB_ReadPMA>
    }
  }

  return count;
 80020de:	8b7b      	ldrh	r3, [r7, #26]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b0a6      	sub	sp, #152	@ 0x98
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 81f9 	beq.w	80024f4 <HAL_PCD_EP_DB_Transmit+0x40c>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	3302      	adds	r3, #2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002136:	429a      	cmp	r2, r3
 8002138:	d907      	bls.n	800214a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002142:	1ad2      	subs	r2, r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	619a      	str	r2, [r3, #24]
 8002148:	e002      	b.n	8002150 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 80e1 	bne.w	800231c <HAL_PCD_EP_DB_Transmit+0x234>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	785b      	ldrb	r3, [r3, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d126      	bne.n	80021b0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	633b      	str	r3, [r7, #48]	@ 0x30
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002176:	4413      	add	r3, r2
 8002178:	633b      	str	r3, [r7, #48]	@ 0x30
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	011a      	lsls	r2, r3, #4
 8002180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002182:	4413      	add	r3, r2
 8002184:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800218a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002194:	b29a      	uxth	r2, r3
 8002196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ac:	801a      	strh	r2, [r3, #0]
 80021ae:	e01a      	b.n	80021e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d116      	bne.n	80021e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021cc:	4413      	add	r3, r2
 80021ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	011a      	lsls	r2, r3, #4
 80021d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d8:	4413      	add	r3, r2
 80021da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021de:	637b      	str	r3, [r7, #52]	@ 0x34
 80021e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e2:	2200      	movs	r2, #0
 80021e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	785b      	ldrb	r3, [r3, #1]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d126      	bne.n	8002242 <HAL_PCD_EP_DB_Transmit+0x15a>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	4413      	add	r3, r2
 800220a:	623b      	str	r3, [r7, #32]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	011a      	lsls	r2, r3, #4
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	4413      	add	r3, r2
 8002216:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002226:	b29a      	uxth	r2, r3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	801a      	strh	r2, [r3, #0]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800223a:	b29a      	uxth	r2, r3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	801a      	strh	r2, [r3, #0]
 8002240:	e017      	b.n	8002272 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	785b      	ldrb	r3, [r3, #1]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d113      	bne.n	8002272 <HAL_PCD_EP_DB_Transmit+0x18a>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002252:	b29b      	uxth	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002258:	4413      	add	r3, r2
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	011a      	lsls	r2, r3, #4
 8002262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002264:	4413      	add	r3, r2
 8002266:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	2200      	movs	r2, #0
 8002270:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	78db      	ldrb	r3, [r3, #3]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d123      	bne.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x1da>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002294:	837b      	strh	r3, [r7, #26]
 8002296:	8b7b      	ldrh	r3, [r7, #26]
 8002298:	f083 0320 	eor.w	r3, r3, #32
 800229c:	837b      	strh	r3, [r7, #26]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	441a      	add	r2, r3
 80022ac:	8b7b      	ldrh	r3, [r7, #26]
 80022ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022be:	b29b      	uxth	r3, r3
 80022c0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f005 feca 	bl	8008062 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01f      	beq.n	8002318 <HAL_PCD_EP_DB_Transmit+0x230>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022f2:	833b      	strh	r3, [r7, #24]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	441a      	add	r2, r3
 8002302:	8b3b      	ldrh	r3, [r7, #24]
 8002304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800230c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002314:	b29b      	uxth	r3, r3
 8002316:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e321      	b.n	8002960 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d021      	beq.n	800236a <HAL_PCD_EP_DB_Transmit+0x282>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800233c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002340:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800235a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800235e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002366:	b29b      	uxth	r3, r3
 8002368:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002370:	2b01      	cmp	r3, #1
 8002372:	f040 82cc 	bne.w	800290e <HAL_PCD_EP_DB_Transmit+0x826>
      {
        ep->xfer_buff += TxPctSize;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800237e:	441a      	add	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800238c:	441a      	add	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	429a      	cmp	r2, r3
 800239c:	d309      	bcc.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x2ca>
        {
          len = ep->maxpacket;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023aa:	1ad2      	subs	r2, r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	621a      	str	r2, [r3, #32]
 80023b0:	e015      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x2f6>
        }
        else if (ep->xfer_len_db == 0U)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_PCD_EP_DB_Transmit+0x2e2>
        {
          len = TxPctSize;
 80023ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80023be:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023c8:	e009      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x2f6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2200      	movs	r2, #0
 80023dc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	785b      	ldrb	r3, [r3, #1]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d15f      	bne.n	80024a6 <HAL_PCD_EP_DB_Transmit+0x3be>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fa:	4413      	add	r3, r2
 80023fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	011a      	lsls	r2, r3, #4
 8002404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002406:	4413      	add	r3, r2
 8002408:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800240c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800240e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002418:	b29a      	uxth	r2, r3
 800241a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800241c:	801a      	strh	r2, [r3, #0]
 800241e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <HAL_PCD_EP_DB_Transmit+0x352>
 8002424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002432:	b29a      	uxth	r2, r3
 8002434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	e051      	b.n	80024de <HAL_PCD_EP_DB_Transmit+0x3f6>
 800243a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800243c:	2b3e      	cmp	r3, #62	@ 0x3e
 800243e:	d816      	bhi.n	800246e <HAL_PCD_EP_DB_Transmit+0x386>
 8002440:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	653b      	str	r3, [r7, #80]	@ 0x50
 8002446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_PCD_EP_DB_Transmit+0x36e>
 8002450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002452:	3301      	adds	r3, #1
 8002454:	653b      	str	r3, [r7, #80]	@ 0x50
 8002456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29a      	uxth	r2, r3
 800245c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800245e:	b29b      	uxth	r3, r3
 8002460:	029b      	lsls	r3, r3, #10
 8002462:	b29b      	uxth	r3, r3
 8002464:	4313      	orrs	r3, r2
 8002466:	b29a      	uxth	r2, r3
 8002468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246a:	801a      	strh	r2, [r3, #0]
 800246c:	e037      	b.n	80024de <HAL_PCD_EP_DB_Transmit+0x3f6>
 800246e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	653b      	str	r3, [r7, #80]	@ 0x50
 8002474:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <HAL_PCD_EP_DB_Transmit+0x39c>
 800247e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002480:	3b01      	subs	r3, #1
 8002482:	653b      	str	r3, [r7, #80]	@ 0x50
 8002484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29a      	uxth	r2, r3
 800248a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	029b      	lsls	r3, r3, #10
 8002490:	b29b      	uxth	r3, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	b29b      	uxth	r3, r3
 8002496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800249a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249e:	b29a      	uxth	r2, r3
 80024a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	e01b      	b.n	80024de <HAL_PCD_EP_DB_Transmit+0x3f6>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d117      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0x3f6>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024bc:	b29b      	uxth	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024c2:	4413      	add	r3, r2
 80024c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	011a      	lsls	r2, r3, #4
 80024cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ce:	4413      	add	r3, r2
 80024d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80024d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024d8:	b29a      	uxth	r2, r3
 80024da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6959      	ldr	r1, [r3, #20]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	891a      	ldrh	r2, [r3, #8]
 80024ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f003 fce6 	bl	8005ebe <USB_WritePMA>
 80024f2:	e20c      	b.n	800290e <HAL_PCD_EP_DB_Transmit+0x826>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	3306      	adds	r3, #6
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800251c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002528:	429a      	cmp	r2, r3
 800252a:	d307      	bcc.n	800253c <HAL_PCD_EP_DB_Transmit+0x454>
    {
      ep->xfer_len -= TxPctSize;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002534:	1ad2      	subs	r2, r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	619a      	str	r2, [r3, #24]
 800253a:	e002      	b.n	8002542 <HAL_PCD_EP_DB_Transmit+0x45a>
    }
    else
    {
      ep->xfer_len = 0U;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 80f6 	bne.w	8002738 <HAL_PCD_EP_DB_Transmit+0x650>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d126      	bne.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x4ba>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	677b      	str	r3, [r7, #116]	@ 0x74
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002568:	4413      	add	r3, r2
 800256a:	677b      	str	r3, [r7, #116]	@ 0x74
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	011a      	lsls	r2, r3, #4
 8002572:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002574:	4413      	add	r3, r2
 8002576:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800257a:	673b      	str	r3, [r7, #112]	@ 0x70
 800257c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002586:	b29a      	uxth	r2, r3
 8002588:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259a:	b29a      	uxth	r2, r3
 800259c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	e01a      	b.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x4f0>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d116      	bne.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x4f0>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025be:	4413      	add	r3, r2
 80025c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	011a      	lsls	r2, r3, #4
 80025c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025ca:	4413      	add	r3, r2
 80025cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025d4:	2200      	movs	r2, #0
 80025d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d12f      	bne.n	8002648 <HAL_PCD_EP_DB_Transmit+0x560>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002600:	4413      	add	r3, r2
 8002602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	011a      	lsls	r2, r3, #4
 800260c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002610:	4413      	add	r3, r2
 8002612:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002616:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800261a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002626:	b29a      	uxth	r2, r3
 8002628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800262c:	801a      	strh	r2, [r3, #0]
 800262e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263e:	b29a      	uxth	r2, r3
 8002640:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	e01c      	b.n	8002682 <HAL_PCD_EP_DB_Transmit+0x59a>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	785b      	ldrb	r3, [r3, #1]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d118      	bne.n	8002682 <HAL_PCD_EP_DB_Transmit+0x59a>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002658:	b29b      	uxth	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002660:	4413      	add	r3, r2
 8002662:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	011a      	lsls	r2, r3, #4
 800266c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002670:	4413      	add	r3, r2
 8002672:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002676:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800267a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800267e:	2200      	movs	r2, #0
 8002680:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	78db      	ldrb	r3, [r3, #3]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d127      	bne.n	80026da <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80026a8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80026ac:	f083 0320 	eor.w	r3, r3, #32
 80026b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	441a      	add	r2, r3
 80026c2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80026c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f005 fcbe 	bl	8008062 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d121      	bne.n	8002734 <HAL_PCD_EP_DB_Transmit+0x64c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800270a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	441a      	add	r2, r3
 800271c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8002720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002728:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800272c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002730:	b29b      	uxth	r3, r3
 8002732:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	e113      	b.n	8002960 <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d121      	bne.n	8002786 <HAL_PCD_EP_DB_Transmit+0x69e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800275c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800277a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800277e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002782:	b29b      	uxth	r3, r3
 8002784:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800278c:	2b01      	cmp	r3, #1
 800278e:	f040 80be 	bne.w	800290e <HAL_PCD_EP_DB_Transmit+0x826>
      {
        ep->xfer_buff += TxPctSize;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800279a:	441a      	add	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80027a8:	441a      	add	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d309      	bcc.n	80027ce <HAL_PCD_EP_DB_Transmit+0x6e6>
        {
          len = ep->maxpacket;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6a1a      	ldr	r2, [r3, #32]
 80027c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c6:	1ad2      	subs	r2, r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	621a      	str	r2, [r3, #32]
 80027cc:	e015      	b.n	80027fa <HAL_PCD_EP_DB_Transmit+0x712>
        }
        else if (ep->xfer_len_db == 0U)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d107      	bne.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x6fe>
        {
          len = TxPctSize;
 80027d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80027da:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80027e4:	e009      	b.n	80027fa <HAL_PCD_EP_DB_Transmit+0x712>
        }
        else
        {
          len = ep->xfer_len_db;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	785b      	ldrb	r3, [r3, #1]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d15f      	bne.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x7e0>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800281c:	4413      	add	r3, r2
 800281e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	011a      	lsls	r2, r3, #4
 8002826:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002828:	4413      	add	r3, r2
 800282a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800282e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002830:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b29b      	uxth	r3, r3
 8002836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283a:	b29a      	uxth	r2, r3
 800283c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <HAL_PCD_EP_DB_Transmit+0x774>
 8002846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002854:	b29a      	uxth	r2, r3
 8002856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002858:	801a      	strh	r2, [r3, #0]
 800285a:	e04e      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x812>
 800285c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800285e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002860:	d816      	bhi.n	8002890 <HAL_PCD_EP_DB_Transmit+0x7a8>
 8002862:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	663b      	str	r3, [r7, #96]	@ 0x60
 8002868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_PCD_EP_DB_Transmit+0x790>
 8002872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002874:	3301      	adds	r3, #1
 8002876:	663b      	str	r3, [r7, #96]	@ 0x60
 8002878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29a      	uxth	r2, r3
 800287e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002880:	b29b      	uxth	r3, r3
 8002882:	029b      	lsls	r3, r3, #10
 8002884:	b29b      	uxth	r3, r3
 8002886:	4313      	orrs	r3, r2
 8002888:	b29a      	uxth	r2, r3
 800288a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800288c:	801a      	strh	r2, [r3, #0]
 800288e:	e034      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x812>
 8002890:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	663b      	str	r3, [r7, #96]	@ 0x60
 8002896:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <HAL_PCD_EP_DB_Transmit+0x7be>
 80028a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028a2:	3b01      	subs	r3, #1
 80028a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80028a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	029b      	lsls	r3, r3, #10
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028c4:	801a      	strh	r2, [r3, #0]
 80028c6:	e018      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x812>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	785b      	ldrb	r3, [r3, #1]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d114      	bne.n	80028fa <HAL_PCD_EP_DB_Transmit+0x812>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028de:	4413      	add	r3, r2
 80028e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	011a      	lsls	r2, r3, #4
 80028e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ea:	4413      	add	r3, r2
 80028ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028f8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	6959      	ldr	r1, [r3, #20]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	895a      	ldrh	r2, [r3, #10]
 8002906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002908:	b29b      	uxth	r3, r3
 800290a:	f003 fad8 	bl	8005ebe <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002928:	82fb      	strh	r3, [r7, #22]
 800292a:	8afb      	ldrh	r3, [r7, #22]
 800292c:	f083 0310 	eor.w	r3, r3, #16
 8002930:	82fb      	strh	r3, [r7, #22]
 8002932:	8afb      	ldrh	r3, [r7, #22]
 8002934:	f083 0320 	eor.w	r3, r3, #32
 8002938:	82fb      	strh	r3, [r7, #22]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	441a      	add	r2, r3
 8002948:	8afb      	ldrh	r3, [r7, #22]
 800294a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800294e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800295a:	b29b      	uxth	r3, r3
 800295c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3798      	adds	r7, #152	@ 0x98
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	4613      	mov	r3, r2
 8002978:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	f003 0207 	and.w	r2, r3, #7
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	3310      	adds	r3, #16
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4413      	add	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e009      	b.n	80029b2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800299e:	897a      	ldrh	r2, [r7, #10]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029b2:	893b      	ldrh	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2200      	movs	r2, #0
 80029bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	80da      	strh	r2, [r3, #6]
 80029c6:	e00b      	b.n	80029e0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2201      	movs	r2, #1
 80029cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	b29a      	uxth	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f001 b823 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 817d 	beq.w	8002d26 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a2c:	4bbc      	ldr	r3, [pc, #752]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d00c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a38:	4bb9      	ldr	r3, [pc, #740]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d15c      	bne.n	8002afe <HAL_RCC_OscConfig+0x10e>
 8002a44:	4bb6      	ldr	r3, [pc, #728]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a50:	d155      	bne.n	8002afe <HAL_RCC_OscConfig+0x10e>
 8002a52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a56:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCC_OscConfig+0x94>
 8002a7e:	4ba8      	ldr	r3, [pc, #672]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	e015      	b.n	8002ab0 <HAL_RCC_OscConfig+0xc0>
 8002a84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a88:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002a98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a9c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002aa0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002aac:	4b9c      	ldr	r3, [pc, #624]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ab4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002ab8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002abc:	fa92 f2a2 	rbit	r2, r2
 8002ac0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002ac4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002ac8:	fab2 f282 	clz	r2, r2
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f042 0220 	orr.w	r2, r2, #32
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f002 021f 	and.w	r2, r2, #31
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 811f 	beq.w	8002d24 <HAL_RCC_OscConfig+0x334>
 8002ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 8116 	bne.w	8002d24 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f000 bfaf 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12e>
 8002b10:	4b83      	ldr	r3, [pc, #524]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a82      	ldr	r2, [pc, #520]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	e036      	b.n	8002b8c <HAL_RCC_OscConfig+0x19c>
 8002b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x158>
 8002b2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7b      	ldr	r2, [pc, #492]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b79      	ldr	r3, [pc, #484]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a78      	ldr	r2, [pc, #480]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e021      	b.n	8002b8c <HAL_RCC_OscConfig+0x19c>
 8002b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x184>
 8002b5a:	4b71      	ldr	r3, [pc, #452]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a70      	ldr	r2, [pc, #448]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b6e      	ldr	r3, [pc, #440]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6d      	ldr	r2, [pc, #436]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x19c>
 8002b74:	4b6a      	ldr	r3, [pc, #424]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a69      	ldr	r2, [pc, #420]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b67      	ldr	r3, [pc, #412]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a66      	ldr	r2, [pc, #408]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b8c:	4b64      	ldr	r3, [pc, #400]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	f023 020f 	bic.w	r2, r3, #15
 8002b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	495f      	ldr	r1, [pc, #380]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002baa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d059      	beq.n	8002c6a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7fd fe89 	bl	80008cc <HAL_GetTick>
 8002bba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fd fe84 	bl	80008cc <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	@ 0x64
 8002bce:	d902      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	f000 bf43 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 8002bd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bda:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002bea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <HAL_RCC_OscConfig+0x218>
 8002c02:	4b47      	ldr	r3, [pc, #284]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	e015      	b.n	8002c34 <HAL_RCC_OscConfig+0x244>
 8002c08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c0c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002c1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c20:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002c24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002c30:	4b3b      	ldr	r3, [pc, #236]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c38:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002c3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002c40:	fa92 f2a2 	rbit	r2, r2
 8002c44:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002c48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002c4c:	fab2 f282 	clz	r2, r2
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f042 0220 	orr.w	r2, r2, #32
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	f002 021f 	and.w	r2, r2, #31
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ab      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x1d0>
 8002c68:	e05d      	b.n	8002d26 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fd fe2f 	bl	80008cc <HAL_GetTick>
 8002c6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fd fe2a 	bl	80008cc <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	@ 0x64
 8002c82:	d902      	bls.n	8002c8a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	f000 bee9 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 8002c8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c8e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002c9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d102      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2cc>
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	e015      	b.n	8002ce8 <HAL_RCC_OscConfig+0x2f8>
 8002cbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cc0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002cd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cd4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002cd8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cec:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002cf0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002cf4:	fa92 f2a2 	rbit	r2, r2
 8002cf8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002cfc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002d00:	fab2 f282 	clz	r2, r2
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f042 0220 	orr.w	r2, r2, #32
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	f002 021f 	and.w	r2, r2, #31
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f202 	lsl.w	r2, r1, r2
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ab      	bne.n	8002c74 <HAL_RCC_OscConfig+0x284>
 8002d1c:	e003      	b.n	8002d26 <HAL_RCC_OscConfig+0x336>
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 817d 	beq.w	8003036 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d3c:	4ba6      	ldr	r3, [pc, #664]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d48:	4ba3      	ldr	r3, [pc, #652]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d172      	bne.n	8002e3a <HAL_RCC_OscConfig+0x44a>
 8002d54:	4ba0      	ldr	r3, [pc, #640]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d16c      	bne.n	8002e3a <HAL_RCC_OscConfig+0x44a>
 8002d60:	2302      	movs	r3, #2
 8002d62:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002d72:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_OscConfig+0x3a0>
 8002d8a:	4b93      	ldr	r3, [pc, #588]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e013      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c8>
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002da2:	2302      	movs	r3, #2
 8002da4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002da8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002db4:	4b88      	ldr	r3, [pc, #544]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	2202      	movs	r2, #2
 8002dba:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002dbe:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002dc2:	fa92 f2a2 	rbit	r2, r2
 8002dc6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002dca:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002dce:	fab2 f282 	clz	r2, r2
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f042 0220 	orr.w	r2, r2, #32
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f002 021f 	and.w	r2, r2, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCC_OscConfig+0x410>
 8002dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d002      	beq.n	8002e00 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f000 be2e 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b75      	ldr	r3, [pc, #468]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	21f8      	movs	r1, #248	@ 0xf8
 8002e16:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002e1e:	fa91 f1a1 	rbit	r1, r1
 8002e22:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002e26:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002e2a:	fab1 f181 	clz	r1, r1
 8002e2e:	b2c9      	uxtb	r1, r1
 8002e30:	408b      	lsls	r3, r1
 8002e32:	4969      	ldr	r1, [pc, #420]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e38:	e0fd      	b.n	8003036 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8088 	beq.w	8002f5c <HAL_RCC_OscConfig+0x56c>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002e5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	461a      	mov	r2, r3
 8002e74:	2301      	movs	r3, #1
 8002e76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fd fd28 	bl	80008cc <HAL_GetTick>
 8002e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	e00a      	b.n	8002e98 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e82:	f7fd fd23 	bl	80008cc <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d902      	bls.n	8002e98 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	f000 bde2 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002eaa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d102      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4d8>
 8002ec2:	4b45      	ldr	r3, [pc, #276]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	e013      	b.n	8002ef0 <HAL_RCC_OscConfig+0x500>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002eda:	2302      	movs	r3, #2
 8002edc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002ee0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002eec:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002ef6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002efa:	fa92 f2a2 	rbit	r2, r2
 8002efe:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002f02:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f042 0220 	orr.w	r2, r2, #32
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	f002 021f 	and.w	r2, r2, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0af      	beq.n	8002e82 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	21f8      	movs	r1, #248	@ 0xf8
 8002f38:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002f40:	fa91 f1a1 	rbit	r1, r1
 8002f44:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002f48:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002f4c:	fab1 f181 	clz	r1, r1
 8002f50:	b2c9      	uxtb	r1, r1
 8002f52:	408b      	lsls	r3, r1
 8002f54:	4920      	ldr	r1, [pc, #128]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
 8002f5a:	e06c      	b.n	8003036 <HAL_RCC_OscConfig+0x646>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f7c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	461a      	mov	r2, r3
 8002f84:	2300      	movs	r3, #0
 8002f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fd fca0 	bl	80008cc <HAL_GetTick>
 8002f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f92:	f7fd fc9b 	bl	80008cc <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	f000 bd5a 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d104      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5ec>
 8002fd2:	4b01      	ldr	r3, [pc, #4]	@ (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e015      	b.n	8003004 <HAL_RCC_OscConfig+0x614>
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003000:	4bc8      	ldr	r3, [pc, #800]	@ (8003324 <HAL_RCC_OscConfig+0x934>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	2202      	movs	r2, #2
 8003006:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800300a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800300e:	fa92 f2a2 	rbit	r2, r2
 8003012:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003016:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800301a:	fab2 f282 	clz	r2, r2
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	f042 0220 	orr.w	r2, r2, #32
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f002 021f 	and.w	r2, r2, #31
 800302a:	2101      	movs	r1, #1
 800302c:	fa01 f202 	lsl.w	r2, r1, r2
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ad      	bne.n	8002f92 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8110 	beq.w	800326c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800304c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003050:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d079      	beq.n	8003150 <HAL_RCC_OscConfig+0x760>
 800305c:	2301      	movs	r3, #1
 800305e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800306e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	4bab      	ldr	r3, [pc, #684]	@ (8003328 <HAL_RCC_OscConfig+0x938>)
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	2301      	movs	r3, #1
 8003084:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003086:	f7fd fc21 	bl	80008cc <HAL_GetTick>
 800308a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003090:	f7fd fc1c 	bl	80008cc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d902      	bls.n	80030a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	f000 bcdb 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 80030a6:	2302      	movs	r3, #2
 80030a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80030b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80030c0:	2202      	movs	r2, #2
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	fa93 f2a3 	rbit	r2, r3
 80030d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030e4:	2202      	movs	r2, #2
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003100:	4b88      	ldr	r3, [pc, #544]	@ (8003324 <HAL_RCC_OscConfig+0x934>)
 8003102:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800310c:	2102      	movs	r1, #2
 800310e:	6019      	str	r1, [r3, #0]
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f1a3 	rbit	r1, r3
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003126:	6019      	str	r1, [r3, #0]
  return result;
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	2101      	movs	r1, #1
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0a0      	beq.n	8003090 <HAL_RCC_OscConfig+0x6a0>
 800314e:	e08d      	b.n	800326c <HAL_RCC_OscConfig+0x87c>
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003160:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	fa93 f2a3 	rbit	r2, r3
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003172:	601a      	str	r2, [r3, #0]
  return result;
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800317c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	4b68      	ldr	r3, [pc, #416]	@ (8003328 <HAL_RCC_OscConfig+0x938>)
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	461a      	mov	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7fd fb9b 	bl	80008cc <HAL_GetTick>
 8003196:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319c:	f7fd fb96 	bl	80008cc <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d902      	bls.n	80031b2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	f000 bc55 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 80031b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80031ba:	2202      	movs	r2, #2
 80031bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	fa93 f2a3 	rbit	r2, r3
 80031cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031de:	2202      	movs	r2, #2
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003202:	2202      	movs	r2, #2
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fa93 f2a3 	rbit	r2, r3
 8003214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003218:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800321c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321e:	4b41      	ldr	r3, [pc, #260]	@ (8003324 <HAL_RCC_OscConfig+0x934>)
 8003220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800322a:	2102      	movs	r1, #2
 800322c:	6019      	str	r1, [r3, #0]
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	fa93 f1a3 	rbit	r1, r3
 800323c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003240:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003244:	6019      	str	r1, [r3, #0]
  return result;
 8003246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2101      	movs	r1, #1
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d197      	bne.n	800319c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003270:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 81a1 	beq.w	80035c4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003288:	4b26      	ldr	r3, [pc, #152]	@ (8003324 <HAL_RCC_OscConfig+0x934>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d116      	bne.n	80032c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b23      	ldr	r3, [pc, #140]	@ (8003324 <HAL_RCC_OscConfig+0x934>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4a22      	ldr	r2, [pc, #136]	@ (8003324 <HAL_RCC_OscConfig+0x934>)
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329e:	61d3      	str	r3, [r2, #28]
 80032a0:	4b20      	ldr	r3, [pc, #128]	@ (8003324 <HAL_RCC_OscConfig+0x934>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80032a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ac:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80032ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b1a      	ldr	r3, [pc, #104]	@ (800332c <HAL_RCC_OscConfig+0x93c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11a      	bne.n	8003304 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b17      	ldr	r3, [pc, #92]	@ (800332c <HAL_RCC_OscConfig+0x93c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a16      	ldr	r2, [pc, #88]	@ (800332c <HAL_RCC_OscConfig+0x93c>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fd faf7 	bl	80008cc <HAL_GetTick>
 80032de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	e009      	b.n	80032f8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e4:	f7fd faf2 	bl	80008cc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b64      	cmp	r3, #100	@ 0x64
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e3b1      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <HAL_RCC_OscConfig+0x93c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ef      	beq.n	80032e4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d10d      	bne.n	8003330 <HAL_RCC_OscConfig+0x940>
 8003314:	4b03      	ldr	r3, [pc, #12]	@ (8003324 <HAL_RCC_OscConfig+0x934>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4a02      	ldr	r2, [pc, #8]	@ (8003324 <HAL_RCC_OscConfig+0x934>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6213      	str	r3, [r2, #32]
 8003320:	e03c      	b.n	800339c <HAL_RCC_OscConfig+0x9ac>
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	10908120 	.word	0x10908120
 800332c:	40007000 	.word	0x40007000
 8003330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003334:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x96a>
 8003340:	4bc1      	ldr	r3, [pc, #772]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4ac0      	ldr	r2, [pc, #768]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	6213      	str	r3, [r2, #32]
 800334c:	4bbe      	ldr	r3, [pc, #760]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4abd      	ldr	r2, [pc, #756]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003352:	f023 0304 	bic.w	r3, r3, #4
 8003356:	6213      	str	r3, [r2, #32]
 8003358:	e020      	b.n	800339c <HAL_RCC_OscConfig+0x9ac>
 800335a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b05      	cmp	r3, #5
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0x994>
 800336a:	4bb7      	ldr	r3, [pc, #732]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4ab6      	ldr	r2, [pc, #728]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	6213      	str	r3, [r2, #32]
 8003376:	4bb4      	ldr	r3, [pc, #720]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4ab3      	ldr	r2, [pc, #716]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6213      	str	r3, [r2, #32]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0x9ac>
 8003384:	4bb0      	ldr	r3, [pc, #704]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4aaf      	ldr	r2, [pc, #700]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	6213      	str	r3, [r2, #32]
 8003390:	4bad      	ldr	r3, [pc, #692]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4aac      	ldr	r2, [pc, #688]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003396:	f023 0304 	bic.w	r3, r3, #4
 800339a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800339c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8081 	beq.w	80034b0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fd fa8d 	bl	80008cc <HAL_GetTick>
 80033b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fd fa88 	bl	80008cc <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e345      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
 80033d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033d8:	2202      	movs	r2, #2
 80033da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	fa93 f2a3 	rbit	r2, r3
 80033ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033fc:	2202      	movs	r2, #2
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003404:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	fa93 f2a3 	rbit	r2, r3
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003416:	601a      	str	r2, [r3, #0]
  return result;
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003420:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d102      	bne.n	800343c <HAL_RCC_OscConfig+0xa4c>
 8003436:	4b84      	ldr	r3, [pc, #528]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	e013      	b.n	8003464 <HAL_RCC_OscConfig+0xa74>
 800343c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003440:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003444:	2202      	movs	r2, #2
 8003446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	4b79      	ldr	r3, [pc, #484]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003468:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800346c:	2102      	movs	r1, #2
 800346e:	6011      	str	r1, [r2, #0]
 8003470:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003474:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	fa92 f1a2 	rbit	r1, r2
 800347e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003482:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003486:	6011      	str	r1, [r2, #0]
  return result;
 8003488:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800348c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	fab2 f282 	clz	r2, r2
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f002 021f 	and.w	r2, r2, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d084      	beq.n	80033b8 <HAL_RCC_OscConfig+0x9c8>
 80034ae:	e07f      	b.n	80035b0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b0:	f7fd fa0c 	bl	80008cc <HAL_GetTick>
 80034b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	e00b      	b.n	80034d2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fd fa07 	bl	80008cc <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e2c4      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
 80034d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80034da:	2202      	movs	r2, #2
 80034dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	fa93 f2a3 	rbit	r2, r3
 80034ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80034fe:	2202      	movs	r2, #2
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	fa93 f2a3 	rbit	r2, r3
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003518:	601a      	str	r2, [r3, #0]
  return result;
 800351a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003522:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f043 0302 	orr.w	r3, r3, #2
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d102      	bne.n	800353e <HAL_RCC_OscConfig+0xb4e>
 8003538:	4b43      	ldr	r3, [pc, #268]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	e013      	b.n	8003566 <HAL_RCC_OscConfig+0xb76>
 800353e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003542:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003546:	2202      	movs	r2, #2
 8003548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	fa93 f2a3 	rbit	r2, r3
 8003558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	4b39      	ldr	r3, [pc, #228]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800356a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800356e:	2102      	movs	r1, #2
 8003570:	6011      	str	r1, [r2, #0]
 8003572:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003576:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	fa92 f1a2 	rbit	r1, r2
 8003580:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003584:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003588:	6011      	str	r1, [r2, #0]
  return result;
 800358a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800358e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	fab2 f282 	clz	r2, r2
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	f002 021f 	and.w	r2, r2, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d184      	bne.n	80034ba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b23      	ldr	r3, [pc, #140]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	4a22      	ldr	r2, [pc, #136]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8242 	beq.w	8003a5a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003648 <HAL_RCC_OscConfig+0xc58>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b08      	cmp	r3, #8
 80035e0:	f000 8213 	beq.w	8003a0a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	f040 8162 	bne.w	80038ba <HAL_RCC_OscConfig+0xeca>
 80035f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80035fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003608:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	fa93 f2a3 	rbit	r2, r3
 8003612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003616:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800361a:	601a      	str	r2, [r3, #0]
  return result;
 800361c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003620:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003624:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003630:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	461a      	mov	r2, r3
 8003638:	2300      	movs	r3, #0
 800363a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fd f946 	bl	80008cc <HAL_GetTick>
 8003640:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003644:	e00c      	b.n	8003660 <HAL_RCC_OscConfig+0xc70>
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7fd f93e 	bl	80008cc <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e1fd      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
 8003660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003664:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003668:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800366c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003672:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003680:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003684:	601a      	str	r2, [r3, #0]
  return result;
 8003686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800368e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <HAL_RCC_OscConfig+0xcba>
 80036a4:	4bb0      	ldr	r3, [pc, #704]	@ (8003968 <HAL_RCC_OscConfig+0xf78>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	e027      	b.n	80036fa <HAL_RCC_OscConfig+0xd0a>
 80036aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80036b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036bc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fa93 f2a3 	rbit	r2, r3
 80036c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80036d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fa93 f2a3 	rbit	r2, r3
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	4b9c      	ldr	r3, [pc, #624]	@ (8003968 <HAL_RCC_OscConfig+0xf78>)
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036fe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003702:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003706:	6011      	str	r1, [r2, #0]
 8003708:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800370c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	fa92 f1a2 	rbit	r1, r2
 8003716:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800371a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800371e:	6011      	str	r1, [r2, #0]
  return result;
 8003720:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003724:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	fab2 f282 	clz	r2, r2
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	f042 0220 	orr.w	r2, r2, #32
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f002 021f 	and.w	r2, r2, #31
 800373a:	2101      	movs	r1, #1
 800373c:	fa01 f202 	lsl.w	r2, r1, r2
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d182      	bne.n	800364c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003746:	4b88      	ldr	r3, [pc, #544]	@ (8003968 <HAL_RCC_OscConfig+0xf78>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800374e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003752:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800375a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	430b      	orrs	r3, r1
 8003768:	497f      	ldr	r1, [pc, #508]	@ (8003968 <HAL_RCC_OscConfig+0xf78>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
 800376e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003772:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003776:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800377a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003780:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	fa93 f2a3 	rbit	r2, r3
 800378a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003792:	601a      	str	r2, [r3, #0]
  return result;
 8003794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003798:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800379c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	461a      	mov	r2, r3
 80037b0:	2301      	movs	r3, #1
 80037b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fd f88a 	bl	80008cc <HAL_GetTick>
 80037b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	e009      	b.n	80037d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd f885 	bl	80008cc <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e144      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
 80037d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80037da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	fa93 f2a3 	rbit	r2, r3
 80037ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80037f6:	601a      	str	r2, [r3, #0]
  return result;
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003800:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_RCC_OscConfig+0xe2c>
 8003816:	4b54      	ldr	r3, [pc, #336]	@ (8003968 <HAL_RCC_OscConfig+0xf78>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	e027      	b.n	800386c <HAL_RCC_OscConfig+0xe7c>
 800381c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003820:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003824:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	fa93 f2a3 	rbit	r2, r3
 8003838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003846:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800384a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003854:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	fa93 f2a3 	rbit	r2, r3
 800385e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003862:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	4b3f      	ldr	r3, [pc, #252]	@ (8003968 <HAL_RCC_OscConfig+0xf78>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003870:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003874:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003878:	6011      	str	r1, [r2, #0]
 800387a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800387e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	fa92 f1a2 	rbit	r1, r2
 8003888:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800388c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003890:	6011      	str	r1, [r2, #0]
  return result;
 8003892:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003896:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	fab2 f282 	clz	r2, r2
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f042 0220 	orr.w	r2, r2, #32
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	f002 021f 	and.w	r2, r2, #31
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f202 	lsl.w	r2, r1, r2
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d082      	beq.n	80037be <HAL_RCC_OscConfig+0xdce>
 80038b8:	e0cf      	b.n	8003a5a <HAL_RCC_OscConfig+0x106a>
 80038ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038be:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80038c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038cc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	fa93 f2a3 	rbit	r2, r3
 80038d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038da:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80038de:	601a      	str	r2, [r3, #0]
  return result;
 80038e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80038e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	461a      	mov	r2, r3
 80038fc:	2300      	movs	r3, #0
 80038fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fc ffe4 	bl	80008cc <HAL_GetTick>
 8003904:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003908:	e009      	b.n	800391e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390a:	f7fc ffdf 	bl	80008cc <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e09e      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
 800391e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003922:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003926:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800392a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003930:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	fa93 f2a3 	rbit	r2, r3
 800393a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003942:	601a      	str	r2, [r3, #0]
  return result;
 8003944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003948:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800394c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d104      	bne.n	800396c <HAL_RCC_OscConfig+0xf7c>
 8003962:	4b01      	ldr	r3, [pc, #4]	@ (8003968 <HAL_RCC_OscConfig+0xf78>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	e029      	b.n	80039bc <HAL_RCC_OscConfig+0xfcc>
 8003968:	40021000 	.word	0x40021000
 800396c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003970:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003974:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	fa93 f2a3 	rbit	r2, r3
 8003988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003996:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800399a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	fa93 f2a3 	rbit	r2, r3
 80039ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_RCC_OscConfig+0x1078>)
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039c0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80039c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039c8:	6011      	str	r1, [r2, #0]
 80039ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039ce:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	fa92 f1a2 	rbit	r1, r2
 80039d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039dc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80039e0:	6011      	str	r1, [r2, #0]
  return result;
 80039e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039e6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	fab2 f282 	clz	r2, r2
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	f042 0220 	orr.w	r2, r2, #32
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f002 021f 	and.w	r2, r2, #31
 80039fc:	2101      	movs	r1, #1
 80039fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d180      	bne.n	800390a <HAL_RCC_OscConfig+0xf1a>
 8003a08:	e027      	b.n	8003a5a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e01e      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a1e:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <HAL_RCC_OscConfig+0x1078>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a2a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10b      	bne.n	8003a56 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b09e      	sub	sp, #120	@ 0x78
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e162      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b90      	ldr	r3, [pc, #576]	@ (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d910      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b8d      	ldr	r3, [pc, #564]	@ (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 0207 	bic.w	r2, r3, #7
 8003a9a:	498b      	ldr	r1, [pc, #556]	@ (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b89      	ldr	r3, [pc, #548]	@ (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e14a      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac0:	4b82      	ldr	r3, [pc, #520]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	497f      	ldr	r1, [pc, #508]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80dc 	beq.w	8003c98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d13c      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xf6>
 8003ae8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003aec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af8:	fab3 f383 	clz	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d102      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xa6>
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	e00f      	b.n	8003b32 <HAL_RCC_ClockConfig+0xc6>
 8003b12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b16:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b24:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b28:	fa93 f3a3 	rbit	r3, r3
 8003b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b2e:	4b67      	ldr	r3, [pc, #412]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b36:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b3a:	fa92 f2a2 	rbit	r2, r2
 8003b3e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003b40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b42:	fab2 f282 	clz	r2, r2
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	f042 0220 	orr.w	r2, r2, #32
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	f002 021f 	and.w	r2, r2, #31
 8003b52:	2101      	movs	r1, #1
 8003b54:	fa01 f202 	lsl.w	r2, r1, r2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d17b      	bne.n	8003c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0f3      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d13c      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x178>
 8003b6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b6e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d102      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x128>
 8003b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	e00f      	b.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
 8003b94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b98:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ba2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ba6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bb0:	4b46      	ldr	r3, [pc, #280]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bb8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003bba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bbc:	fa92 f2a2 	rbit	r2, r2
 8003bc0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003bc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bc4:	fab2 f282 	clz	r2, r2
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	f042 0220 	orr.w	r2, r2, #32
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	f002 021f 	and.w	r2, r2, #31
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d13a      	bne.n	8003c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0b2      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
 8003be4:	2302      	movs	r3, #2
 8003be6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x1a0>
 8003c06:	4b31      	ldr	r3, [pc, #196]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	e00d      	b.n	8003c28 <HAL_RCC_ClockConfig+0x1bc>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c18:	2302      	movs	r3, #2
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	4b29      	ldr	r3, [pc, #164]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	2202      	movs	r2, #2
 8003c2a:	61ba      	str	r2, [r7, #24]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	fa92 f2a2 	rbit	r2, r2
 8003c32:	617a      	str	r2, [r7, #20]
  return result;
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	fab2 f282 	clz	r2, r2
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f042 0220 	orr.w	r2, r2, #32
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	f002 021f 	and.w	r2, r2, #31
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e079      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c56:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f023 0203 	bic.w	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	491a      	ldr	r1, [pc, #104]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c68:	f7fc fe30 	bl	80008cc <HAL_GetTick>
 8003c6c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fc fe2c 	bl	80008cc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e061      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	4b11      	ldr	r3, [pc, #68]	@ (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 020c 	and.w	r2, r3, #12
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1eb      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d214      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 0207 	bic.w	r2, r3, #7
 8003cae:	4906      	ldr	r1, [pc, #24]	@ (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e040      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
 8003cc8:	40022000 	.word	0x40022000
 8003ccc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d54 <HAL_RCC_ClockConfig+0x2e8>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	491a      	ldr	r1, [pc, #104]	@ (8003d54 <HAL_RCC_ClockConfig+0x2e8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfa:	4b16      	ldr	r3, [pc, #88]	@ (8003d54 <HAL_RCC_ClockConfig+0x2e8>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4912      	ldr	r1, [pc, #72]	@ (8003d54 <HAL_RCC_ClockConfig+0x2e8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d0e:	f000 f829 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003d12:	4601      	mov	r1, r0
 8003d14:	4b0f      	ldr	r3, [pc, #60]	@ (8003d54 <HAL_RCC_ClockConfig+0x2e8>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d1c:	22f0      	movs	r2, #240	@ 0xf0
 8003d1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	fa92 f2a2 	rbit	r2, r2
 8003d26:	60fa      	str	r2, [r7, #12]
  return result;
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	fab2 f282 	clz	r2, r2
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	40d3      	lsrs	r3, r2
 8003d32:	4a09      	ldr	r2, [pc, #36]	@ (8003d58 <HAL_RCC_ClockConfig+0x2ec>)
 8003d34:	5cd3      	ldrb	r3, [r2, r3]
 8003d36:	fa21 f303 	lsr.w	r3, r1, r3
 8003d3a:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <HAL_RCC_ClockConfig+0x2f0>)
 8003d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_RCC_ClockConfig+0x2f4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fd7e 	bl	8000844 <HAL_InitTick>
  
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3778      	adds	r7, #120	@ 0x78
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08009008 	.word	0x08009008
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	20000004 	.word	0x20000004

08003d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	2300      	movs	r3, #0
 8003d78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x30>
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x36>
 8003d92:	e026      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d94:	4b19      	ldr	r3, [pc, #100]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8003d96:	613b      	str	r3, [r7, #16]
      break;
 8003d98:	e026      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	0c9b      	lsrs	r3, r3, #18
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	4a17      	ldr	r2, [pc, #92]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003da8:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	4a14      	ldr	r2, [pc, #80]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e004      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	613b      	str	r3, [r7, #16]
      break;
 8003de0:	e002      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8003de4:	613b      	str	r3, [r7, #16]
      break;
 8003de6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003de8:	693b      	ldr	r3, [r7, #16]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	007a1200 	.word	0x007a1200
 8003e00:	08009018 	.word	0x08009018
 8003e04:	08009028 	.word	0x08009028
 8003e08:	003d0900 	.word	0x003d0900

08003e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b092      	sub	sp, #72	@ 0x48
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80d4 	beq.w	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e30:	4b4e      	ldr	r3, [pc, #312]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10e      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	4a4a      	ldr	r2, [pc, #296]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	61d3      	str	r3, [r2, #28]
 8003e48:	4b48      	ldr	r3, [pc, #288]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b45      	ldr	r3, [pc, #276]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e66:	4b42      	ldr	r3, [pc, #264]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a41      	ldr	r2, [pc, #260]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7fc fd2b 	bl	80008cc <HAL_GetTick>
 8003e76:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	e008      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f7fc fd27 	bl	80008cc <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	@ 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e169      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b38      	ldr	r3, [pc, #224]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e98:	4b34      	ldr	r3, [pc, #208]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8084 	beq.w	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d07c      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ec2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ec6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b26      	ldr	r3, [pc, #152]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003eea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	461a      	mov	r2, r3
 8003f06:	2300      	movs	r3, #0
 8003f08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f0a:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d04b      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fc fcd7 	bl	80008cc <HAL_GetTick>
 8003f1e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fc fcd3 	bl	80008cc <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e113      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3e:	fa93 f3a3 	rbit	r3, r3
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f44:	2302      	movs	r3, #2
 8003f46:	623b      	str	r3, [r7, #32]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	61fb      	str	r3, [r7, #28]
  return result;
 8003f50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d108      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f66:	4b01      	ldr	r3, [pc, #4]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	e00d      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40007000 	.word	0x40007000
 8003f74:	10908100 	.word	0x10908100
 8003f78:	2302      	movs	r3, #2
 8003f7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	4b78      	ldr	r3, [pc, #480]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	2202      	movs	r2, #2
 8003f8a:	613a      	str	r2, [r7, #16]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	fa92 f2a2 	rbit	r2, r2
 8003f92:	60fa      	str	r2, [r7, #12]
  return result;
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	fab2 f282 	clz	r2, r2
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f002 021f 	and.w	r2, r2, #31
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0b7      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	496a      	ldr	r1, [pc, #424]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fc4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fcc:	4b66      	ldr	r3, [pc, #408]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	4a65      	ldr	r2, [pc, #404]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fe4:	4b60      	ldr	r3, [pc, #384]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	f023 0203 	bic.w	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	495d      	ldr	r1, [pc, #372]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004002:	4b59      	ldr	r3, [pc, #356]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4956      	ldr	r1, [pc, #344]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004010:	4313      	orrs	r3, r2
 8004012:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004020:	4b51      	ldr	r3, [pc, #324]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	494e      	ldr	r1, [pc, #312]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800402e:	4313      	orrs	r3, r2
 8004030:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800403e:	4b4a      	ldr	r3, [pc, #296]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	f023 0210 	bic.w	r2, r3, #16
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4947      	ldr	r1, [pc, #284]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800405c:	4b42      	ldr	r3, [pc, #264]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004068:	493f      	ldr	r1, [pc, #252]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800406a:	4313      	orrs	r3, r2
 800406c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800407a:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407e:	f023 0220 	bic.w	r2, r3, #32
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4938      	ldr	r1, [pc, #224]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004098:	4b33      	ldr	r3, [pc, #204]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800409a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	4930      	ldr	r1, [pc, #192]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	4929      	ldr	r1, [pc, #164]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040d4:	4b24      	ldr	r3, [pc, #144]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	4921      	ldr	r1, [pc, #132]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	491a      	ldr	r1, [pc, #104]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004100:	4313      	orrs	r3, r2
 8004102:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004110:	4b15      	ldr	r3, [pc, #84]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411c:	4912      	ldr	r1, [pc, #72]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800412e:	4b0e      	ldr	r3, [pc, #56]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	490b      	ldr	r1, [pc, #44]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800413c:	4313      	orrs	r3, r2
 800413e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800414c:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004150:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004158:	4903      	ldr	r1, [pc, #12]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3748      	adds	r7, #72	@ 0x48
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000

0800416c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e09d      	b.n	80042ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800418e:	d009      	beq.n	80041a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	61da      	str	r2, [r3, #28]
 8004196:	e005      	b.n	80041a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc fa3c 	bl	800063c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041e4:	d902      	bls.n	80041ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	e002      	b.n	80041f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80041fa:	d007      	beq.n	800420c <HAL_SPI_Init+0xa0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004204:	d002      	beq.n	800420c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424e:	ea42 0103 	orr.w	r1, r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004256:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	f003 0204 	and.w	r2, r3, #4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004288:	ea42 0103 	orr.w	r1, r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042d2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042f8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	b29b      	uxth	r3, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	b29b      	uxth	r3, r3
 800430e:	4013      	ands	r3, r2
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004364:	b480      	push	{r7}
 8004366:	b0a7      	sub	sp, #156	@ 0x9c
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	78db      	ldrb	r3, [r3, #3]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d81f      	bhi.n	80043d6 <USB_ActivateEndpoint+0x72>
 8004396:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <USB_ActivateEndpoint+0x38>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	080043df 	.word	0x080043df
 80043a8:	080043bb 	.word	0x080043bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043ac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80043b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043b4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80043b8:	e012      	b.n	80043e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80043be:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80043c2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80043c6:	e00b      	b.n	80043e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80043cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043d0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80043d4:	e004      	b.n	80043e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80043dc:	e000      	b.n	80043e0 <USB_ActivateEndpoint+0x7c>
      break;
 80043de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80043ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	b21b      	sxth	r3, r3
 8004412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441a:	b21a      	sxth	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b21b      	sxth	r3, r3
 8004422:	4313      	orrs	r3, r2
 8004424:	b21b      	sxth	r3, r3
 8004426:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	441a      	add	r2, r3
 8004434:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800443c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004448:	b29b      	uxth	r3, r3
 800444a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	7b1b      	ldrb	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 8180 	bne.w	8004756 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	785b      	ldrb	r3, [r3, #1]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8084 	beq.w	8004568 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800446a:	b29b      	uxth	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	4413      	add	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	011a      	lsls	r2, r3, #4
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	88db      	ldrh	r3, [r3, #6]
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	b29b      	uxth	r3, r3
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	827b      	strh	r3, [r7, #18]
 80044a2:	8a7b      	ldrh	r3, [r7, #18]
 80044a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01b      	beq.n	80044e4 <USB_ActivateEndpoint+0x180>
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	823b      	strh	r3, [r7, #16]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	441a      	add	r2, r3
 80044ce:	8a3b      	ldrh	r3, [r7, #16]
 80044d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	78db      	ldrb	r3, [r3, #3]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d020      	beq.n	800452e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004502:	81bb      	strh	r3, [r7, #12]
 8004504:	89bb      	ldrh	r3, [r7, #12]
 8004506:	f083 0320 	eor.w	r3, r3, #32
 800450a:	81bb      	strh	r3, [r7, #12]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	89bb      	ldrh	r3, [r7, #12]
 8004518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800451c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004528:	b29b      	uxth	r3, r3
 800452a:	8013      	strh	r3, [r2, #0]
 800452c:	e3f9      	b.n	8004d22 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004544:	81fb      	strh	r3, [r7, #14]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	89fb      	ldrh	r3, [r7, #14]
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800455e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]
 8004566:	e3dc      	b.n	8004d22 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	633b      	str	r3, [r7, #48]	@ 0x30
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004572:	b29b      	uxth	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	4413      	add	r3, r2
 800457a:	633b      	str	r3, [r7, #48]	@ 0x30
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	011a      	lsls	r2, r3, #4
 8004582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004584:	4413      	add	r3, r2
 8004586:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800458a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	88db      	ldrh	r3, [r3, #6]
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	b29b      	uxth	r3, r3
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ac:	4413      	add	r3, r2
 80045ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	011a      	lsls	r2, r3, #4
 80045b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b8:	4413      	add	r3, r2
 80045ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <USB_ActivateEndpoint+0x28a>
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	e041      	b.n	8004672 <USB_ActivateEndpoint+0x30e>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80045f4:	d81c      	bhi.n	8004630 <USB_ActivateEndpoint+0x2cc>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d004      	beq.n	8004616 <USB_ActivateEndpoint+0x2b2>
 800460c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004610:	3301      	adds	r3, #1
 8004612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29a      	uxth	r2, r3
 800461c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004620:	b29b      	uxth	r3, r3
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	b29b      	uxth	r3, r3
 8004626:	4313      	orrs	r3, r2
 8004628:	b29a      	uxth	r2, r3
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	801a      	strh	r2, [r3, #0]
 800462e:	e020      	b.n	8004672 <USB_ActivateEndpoint+0x30e>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <USB_ActivateEndpoint+0x2ec>
 8004646:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800464a:	3b01      	subs	r3, #1
 800464c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29a      	uxth	r2, r3
 8004656:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800465a:	b29b      	uxth	r3, r3
 800465c:	029b      	lsls	r3, r3, #10
 800465e:	b29b      	uxth	r3, r3
 8004660:	4313      	orrs	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800466c:	b29a      	uxth	r2, r3
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004680:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01b      	beq.n	80046c2 <USB_ActivateEndpoint+0x35e>
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800469c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a0:	843b      	strh	r3, [r7, #32]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	441a      	add	r2, r3
 80046ac:	8c3b      	ldrh	r3, [r7, #32]
 80046ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046be:	b29b      	uxth	r3, r3
 80046c0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d124      	bne.n	8004714 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e0:	83bb      	strh	r3, [r7, #28]
 80046e2:	8bbb      	ldrh	r3, [r7, #28]
 80046e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80046e8:	83bb      	strh	r3, [r7, #28]
 80046ea:	8bbb      	ldrh	r3, [r7, #28]
 80046ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046f0:	83bb      	strh	r3, [r7, #28]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	8bbb      	ldrh	r3, [r7, #28]
 80046fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800470a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]
 8004712:	e306      	b.n	8004d22 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800472a:	83fb      	strh	r3, [r7, #30]
 800472c:	8bfb      	ldrh	r3, [r7, #30]
 800472e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004732:	83fb      	strh	r3, [r7, #30]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	441a      	add	r2, r3
 800473e:	8bfb      	ldrh	r3, [r7, #30]
 8004740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004748:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800474c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004750:	b29b      	uxth	r3, r3
 8004752:	8013      	strh	r3, [r2, #0]
 8004754:	e2e5      	b.n	8004d22 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	78db      	ldrb	r3, [r3, #3]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d11e      	bne.n	800479c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004774:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	441a      	add	r2, r3
 8004782:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800478a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800478e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004796:	b29b      	uxth	r3, r3
 8004798:	8013      	strh	r3, [r2, #0]
 800479a:	e01d      	b.n	80047d8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80047ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80047c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047e8:	4413      	add	r3, r2
 80047ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	011a      	lsls	r2, r3, #4
 80047f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	891b      	ldrh	r3, [r3, #8]
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	b29b      	uxth	r3, r3
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800480a:	801a      	strh	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800481c:	4413      	add	r3, r2
 800481e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	011a      	lsls	r2, r3, #4
 8004826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004828:	4413      	add	r3, r2
 800482a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800482e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	895b      	ldrh	r3, [r3, #10]
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800483e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 81af 	bne.w	8004ba8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800485a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800485e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01d      	beq.n	80048a2 <USB_ActivateEndpoint+0x53e>
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	441a      	add	r2, r3
 800488a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800488e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800489a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489e:	b29b      	uxth	r3, r3
 80048a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80048b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80048b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01d      	beq.n	80048fa <USB_ActivateEndpoint+0x596>
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	441a      	add	r2, r3
 80048e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80048e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d16b      	bne.n	80049da <USB_ActivateEndpoint+0x676>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800490c:	b29b      	uxth	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004912:	4413      	add	r3, r2
 8004914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	011a      	lsls	r2, r3, #4
 800491c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800491e:	4413      	add	r3, r2
 8004920:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004930:	b29a      	uxth	r2, r3
 8004932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004934:	801a      	strh	r2, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <USB_ActivateEndpoint+0x5f0>
 800493e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494c:	b29a      	uxth	r2, r3
 800494e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	e05d      	b.n	8004a10 <USB_ActivateEndpoint+0x6ac>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b3e      	cmp	r3, #62	@ 0x3e
 800495a:	d81c      	bhi.n	8004996 <USB_ActivateEndpoint+0x632>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <USB_ActivateEndpoint+0x618>
 8004972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004976:	3301      	adds	r3, #1
 8004978:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800497c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29a      	uxth	r2, r3
 8004982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004986:	b29b      	uxth	r3, r3
 8004988:	029b      	lsls	r3, r3, #10
 800498a:	b29b      	uxth	r3, r3
 800498c:	4313      	orrs	r3, r2
 800498e:	b29a      	uxth	r2, r3
 8004990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004992:	801a      	strh	r2, [r3, #0]
 8004994:	e03c      	b.n	8004a10 <USB_ActivateEndpoint+0x6ac>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <USB_ActivateEndpoint+0x652>
 80049ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049b0:	3b01      	subs	r3, #1
 80049b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80049b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	029b      	lsls	r3, r3, #10
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4313      	orrs	r3, r2
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049d6:	801a      	strh	r2, [r3, #0]
 80049d8:	e01a      	b.n	8004a10 <USB_ActivateEndpoint+0x6ac>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d116      	bne.n	8004a10 <USB_ActivateEndpoint+0x6ac>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f2:	4413      	add	r3, r2
 80049f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	011a      	lsls	r2, r3, #4
 80049fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fe:	4413      	add	r3, r2
 8004a00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a04:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a0e:	801a      	strh	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d16b      	bne.n	8004af4 <USB_ActivateEndpoint+0x790>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2c:	4413      	add	r3, r2
 8004a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	011a      	lsls	r2, r3, #4
 8004a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a38:	4413      	add	r3, r2
 8004a3a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <USB_ActivateEndpoint+0x70a>
 8004a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6a:	801a      	strh	r2, [r3, #0]
 8004a6c:	e05b      	b.n	8004b26 <USB_ActivateEndpoint+0x7c2>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a74:	d81c      	bhi.n	8004ab0 <USB_ActivateEndpoint+0x74c>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <USB_ActivateEndpoint+0x732>
 8004a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a90:	3301      	adds	r3, #1
 8004a92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	029b      	lsls	r3, r3, #10
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	e03a      	b.n	8004b26 <USB_ActivateEndpoint+0x7c2>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <USB_ActivateEndpoint+0x76c>
 8004ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aca:	3b01      	subs	r3, #1
 8004acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	029b      	lsls	r3, r3, #10
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	e018      	b.n	8004b26 <USB_ActivateEndpoint+0x7c2>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d114      	bne.n	8004b26 <USB_ActivateEndpoint+0x7c2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b08:	4413      	add	r3, r2
 8004b0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	011a      	lsls	r2, r3, #4
 8004b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b14:	4413      	add	r3, r2
 8004b16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b24:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004b44:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b48:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b84:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]
 8004ba6:	e0bc      	b.n	8004d22 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8004bb8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01d      	beq.n	8004c00 <USB_ActivateEndpoint+0x89c>
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bda:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	441a      	add	r2, r3
 8004be8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8004c10:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8004c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01d      	beq.n	8004c58 <USB_ActivateEndpoint+0x8f4>
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c32:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	441a      	add	r2, r3
 8004c40:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8004c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	78db      	ldrb	r3, [r3, #3]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d024      	beq.n	8004caa <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c76:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004c7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004c7e:	f083 0320 	eor.w	r3, r3, #32
 8004c82:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	441a      	add	r2, r3
 8004c90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004c94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]
 8004ca8:	e01d      	b.n	8004ce6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	441a      	add	r2, r3
 8004cce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d22:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	379c      	adds	r7, #156	@ 0x9c
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop

08004d34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b08d      	sub	sp, #52	@ 0x34
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	7b1b      	ldrb	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 808e 	bne.w	8004e64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d044      	beq.n	8004dda <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	81bb      	strh	r3, [r7, #12]
 8004d5e:	89bb      	ldrh	r3, [r7, #12]
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01b      	beq.n	8004da0 <USB_DeactivateEndpoint+0x6c>
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d7e:	817b      	strh	r3, [r7, #10]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	441a      	add	r2, r3
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004db6:	813b      	strh	r3, [r7, #8]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	441a      	add	r2, r3
 8004dc2:	893b      	ldrh	r3, [r7, #8]
 8004dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	8013      	strh	r3, [r2, #0]
 8004dd8:	e192      	b.n	8005100 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	827b      	strh	r3, [r7, #18]
 8004de8:	8a7b      	ldrh	r3, [r7, #18]
 8004dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01b      	beq.n	8004e2a <USB_DeactivateEndpoint+0xf6>
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e08:	823b      	strh	r3, [r7, #16]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	441a      	add	r2, r3
 8004e14:	8a3b      	ldrh	r3, [r7, #16]
 8004e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e40:	81fb      	strh	r3, [r7, #14]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	89fb      	ldrh	r3, [r7, #14]
 8004e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	8013      	strh	r3, [r2, #0]
 8004e62:	e14d      	b.n	8005100 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f040 80a5 	bne.w	8004fb8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	843b      	strh	r3, [r7, #32]
 8004e7c:	8c3b      	ldrh	r3, [r7, #32]
 8004e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01b      	beq.n	8004ebe <USB_DeactivateEndpoint+0x18a>
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9c:	83fb      	strh	r3, [r7, #30]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	441a      	add	r2, r3
 8004ea8:	8bfb      	ldrh	r3, [r7, #30]
 8004eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	83bb      	strh	r3, [r7, #28]
 8004ecc:	8bbb      	ldrh	r3, [r7, #28]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01b      	beq.n	8004f0e <USB_DeactivateEndpoint+0x1da>
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eec:	837b      	strh	r3, [r7, #26]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	8b7b      	ldrh	r3, [r7, #26]
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f24:	833b      	strh	r3, [r7, #24]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	8b3b      	ldrh	r3, [r7, #24]
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5c:	82fb      	strh	r3, [r7, #22]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	8afb      	ldrh	r3, [r7, #22]
 8004f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f94:	82bb      	strh	r3, [r7, #20]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	8abb      	ldrh	r3, [r7, #20]
 8004fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	8013      	strh	r3, [r2, #0]
 8004fb6:	e0a3      	b.n	8005100 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004fc6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01b      	beq.n	8005008 <USB_DeactivateEndpoint+0x2d4>
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	441a      	add	r2, r3
 8004ff2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ffc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005004:	b29b      	uxth	r3, r3
 8005006:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005016:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01b      	beq.n	8005058 <USB_DeactivateEndpoint+0x324>
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	b29b      	uxth	r3, r3
 800502e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005036:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800504c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005050:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005054:	b29b      	uxth	r3, r3
 8005056:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800506a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	441a      	add	r2, r3
 800507a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800507c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005084:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	441a      	add	r2, r3
 80050b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3734      	adds	r7, #52	@ 0x34
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b0ac      	sub	sp, #176	@ 0xb0
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2b01      	cmp	r3, #1
 800511e:	f040 84ca 	bne.w	8005ab6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d904      	bls.n	8005138 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005136:	e003      	b.n	8005140 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	7b1b      	ldrb	r3, [r3, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d122      	bne.n	800518e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	6959      	ldr	r1, [r3, #20]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	88da      	ldrh	r2, [r3, #6]
 8005150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005154:	b29b      	uxth	r3, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 feb1 	bl	8005ebe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	011a      	lsls	r2, r3, #4
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4413      	add	r3, r2
 800517a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	f000 bc6f 	b.w	8005a6c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	78db      	ldrb	r3, [r3, #3]
 8005192:	2b02      	cmp	r3, #2
 8005194:	f040 831e 	bne.w	80057d4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	f240 82cf 	bls.w	8005744 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051bc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	441a      	add	r2, r3
 80051ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80051ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051d6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80051da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051de:	b29b      	uxth	r3, r3
 80051e0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 814f 	beq.w	80054a6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	633b      	str	r3, [r7, #48]	@ 0x30
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d16b      	bne.n	80052ec <USB_EPStartXfer+0x1de>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800521e:	b29b      	uxth	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005224:	4413      	add	r3, r2
 8005226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	011a      	lsls	r2, r3, #4
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	4413      	add	r3, r2
 8005232:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005242:	b29a      	uxth	r2, r3
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <USB_EPStartXfer+0x158>
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525e:	b29a      	uxth	r2, r3
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	e05b      	b.n	800531e <USB_EPStartXfer+0x210>
 8005266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800526a:	2b3e      	cmp	r3, #62	@ 0x3e
 800526c:	d81c      	bhi.n	80052a8 <USB_EPStartXfer+0x19a>
 800526e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <USB_EPStartXfer+0x180>
 8005284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005288:	3301      	adds	r3, #1
 800528a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29a      	uxth	r2, r3
 8005294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005298:	b29b      	uxth	r3, r3
 800529a:	029b      	lsls	r3, r3, #10
 800529c:	b29b      	uxth	r3, r3
 800529e:	4313      	orrs	r3, r2
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	e03a      	b.n	800531e <USB_EPStartXfer+0x210>
 80052a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <USB_EPStartXfer+0x1ba>
 80052be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052c2:	3b01      	subs	r3, #1
 80052c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	029b      	lsls	r3, r3, #10
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	4313      	orrs	r3, r2
 80052da:	b29b      	uxth	r3, r3
 80052dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	801a      	strh	r2, [r3, #0]
 80052ea:	e018      	b.n	800531e <USB_EPStartXfer+0x210>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d114      	bne.n	800531e <USB_EPStartXfer+0x210>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	4413      	add	r3, r2
 8005302:	633b      	str	r3, [r7, #48]	@ 0x30
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	011a      	lsls	r2, r3, #4
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	4413      	add	r3, r2
 800530e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005318:	b29a      	uxth	r2, r3
 800531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	895b      	ldrh	r3, [r3, #10]
 8005322:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6959      	ldr	r1, [r3, #20]
 800532a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800532e:	b29b      	uxth	r3, r3
 8005330:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fdc2 	bl	8005ebe <USB_WritePMA>
            ep->xfer_buff += len;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005342:	441a      	add	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	429a      	cmp	r2, r3
 8005352:	d907      	bls.n	8005364 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800535c:	1ad2      	subs	r2, r2, r3
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	621a      	str	r2, [r3, #32]
 8005362:	e006      	b.n	8005372 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d16b      	bne.n	8005452 <USB_EPStartXfer+0x344>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005384:	b29b      	uxth	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	4413      	add	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	011a      	lsls	r2, r3, #4
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	4413      	add	r3, r2
 8005398:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	801a      	strh	r2, [r3, #0]
 80053ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <USB_EPStartXfer+0x2be>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	e05d      	b.n	8005488 <USB_EPStartXfer+0x37a>
 80053cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80053d2:	d81c      	bhi.n	800540e <USB_EPStartXfer+0x300>
 80053d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <USB_EPStartXfer+0x2e6>
 80053ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053ee:	3301      	adds	r3, #1
 80053f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053fe:	b29b      	uxth	r3, r3
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	b29b      	uxth	r3, r3
 8005404:	4313      	orrs	r3, r2
 8005406:	b29a      	uxth	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	e03c      	b.n	8005488 <USB_EPStartXfer+0x37a>
 800540e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	2b00      	cmp	r3, #0
 8005422:	d104      	bne.n	800542e <USB_EPStartXfer+0x320>
 8005424:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005428:	3b01      	subs	r3, #1
 800542a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29a      	uxth	r2, r3
 8005434:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005438:	b29b      	uxth	r3, r3
 800543a:	029b      	lsls	r3, r3, #10
 800543c:	b29b      	uxth	r3, r3
 800543e:	4313      	orrs	r3, r2
 8005440:	b29b      	uxth	r3, r3
 8005442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544a:	b29a      	uxth	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	e01a      	b.n	8005488 <USB_EPStartXfer+0x37a>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d116      	bne.n	8005488 <USB_EPStartXfer+0x37a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	623b      	str	r3, [r7, #32]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	4413      	add	r3, r2
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	011a      	lsls	r2, r3, #4
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	4413      	add	r3, r2
 8005478:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005482:	b29a      	uxth	r2, r3
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	891b      	ldrh	r3, [r3, #8]
 800548c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6959      	ldr	r1, [r3, #20]
 8005494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005498:	b29b      	uxth	r3, r3
 800549a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fd0d 	bl	8005ebe <USB_WritePMA>
 80054a4:	e2e2      	b.n	8005a6c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d16b      	bne.n	8005586 <USB_EPStartXfer+0x478>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054be:	4413      	add	r3, r2
 80054c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	011a      	lsls	r2, r3, #4
 80054c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ca:	4413      	add	r3, r2
 80054cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054dc:	b29a      	uxth	r2, r3
 80054de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <USB_EPStartXfer+0x3f2>
 80054ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	e05d      	b.n	80055bc <USB_EPStartXfer+0x4ae>
 8005500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005504:	2b3e      	cmp	r3, #62	@ 0x3e
 8005506:	d81c      	bhi.n	8005542 <USB_EPStartXfer+0x434>
 8005508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <USB_EPStartXfer+0x41a>
 800551e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005522:	3301      	adds	r3, #1
 8005524:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29a      	uxth	r2, r3
 800552e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005532:	b29b      	uxth	r3, r3
 8005534:	029b      	lsls	r3, r3, #10
 8005536:	b29b      	uxth	r3, r3
 8005538:	4313      	orrs	r3, r2
 800553a:	b29a      	uxth	r2, r3
 800553c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	e03c      	b.n	80055bc <USB_EPStartXfer+0x4ae>
 8005542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800554c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <USB_EPStartXfer+0x454>
 8005558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800555c:	3b01      	subs	r3, #1
 800555e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29a      	uxth	r2, r3
 8005568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800556c:	b29b      	uxth	r3, r3
 800556e:	029b      	lsls	r3, r3, #10
 8005570:	b29b      	uxth	r3, r3
 8005572:	4313      	orrs	r3, r2
 8005574:	b29b      	uxth	r3, r3
 8005576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800557e:	b29a      	uxth	r2, r3
 8005580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	e01a      	b.n	80055bc <USB_EPStartXfer+0x4ae>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d116      	bne.n	80055bc <USB_EPStartXfer+0x4ae>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	653b      	str	r3, [r7, #80]	@ 0x50
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800559e:	4413      	add	r3, r2
 80055a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	011a      	lsls	r2, r3, #4
 80055a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055aa:	4413      	add	r3, r2
 80055ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	891b      	ldrh	r3, [r3, #8]
 80055c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	6959      	ldr	r1, [r3, #20]
 80055c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fc73 	bl	8005ebe <USB_WritePMA>
            ep->xfer_buff += len;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055e0:	441a      	add	r2, r3
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6a1a      	ldr	r2, [r3, #32]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d907      	bls.n	8005602 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6a1a      	ldr	r2, [r3, #32]
 80055f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055fa:	1ad2      	subs	r2, r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	621a      	str	r2, [r3, #32]
 8005600:	e006      	b.n	8005610 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2200      	movs	r2, #0
 800560e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	643b      	str	r3, [r7, #64]	@ 0x40
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	785b      	ldrb	r3, [r3, #1]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d16b      	bne.n	80056f4 <USB_EPStartXfer+0x5e6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005626:	b29b      	uxth	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562c:	4413      	add	r3, r2
 800562e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	011a      	lsls	r2, r3, #4
 8005636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005638:	4413      	add	r3, r2
 800563a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800563e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800564a:	b29a      	uxth	r2, r3
 800564c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <USB_EPStartXfer+0x560>
 8005658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005666:	b29a      	uxth	r2, r3
 8005668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566a:	801a      	strh	r2, [r3, #0]
 800566c:	e05b      	b.n	8005726 <USB_EPStartXfer+0x618>
 800566e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005672:	2b3e      	cmp	r3, #62	@ 0x3e
 8005674:	d81c      	bhi.n	80056b0 <USB_EPStartXfer+0x5a2>
 8005676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800567a:	085b      	lsrs	r3, r3, #1
 800567c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <USB_EPStartXfer+0x588>
 800568c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005690:	3301      	adds	r3, #1
 8005692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29a      	uxth	r2, r3
 800569c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	029b      	lsls	r3, r3, #10
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	e03a      	b.n	8005726 <USB_EPStartXfer+0x618>
 80056b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d104      	bne.n	80056d0 <USB_EPStartXfer+0x5c2>
 80056c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056ca:	3b01      	subs	r3, #1
 80056cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056da:	b29b      	uxth	r3, r3
 80056dc:	029b      	lsls	r3, r3, #10
 80056de:	b29b      	uxth	r3, r3
 80056e0:	4313      	orrs	r3, r2
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e018      	b.n	8005726 <USB_EPStartXfer+0x618>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d114      	bne.n	8005726 <USB_EPStartXfer+0x618>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005708:	4413      	add	r3, r2
 800570a:	643b      	str	r3, [r7, #64]	@ 0x40
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	011a      	lsls	r2, r3, #4
 8005712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005714:	4413      	add	r3, r2
 8005716:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800571a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800571c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005720:	b29a      	uxth	r2, r3
 8005722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005724:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	895b      	ldrh	r3, [r3, #10]
 800572a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6959      	ldr	r1, [r3, #20]
 8005732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005736:	b29b      	uxth	r3, r3
 8005738:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fbbe 	bl	8005ebe <USB_WritePMA>
 8005742:	e193      	b.n	8005a6c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800575e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005762:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800577c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005784:	b29b      	uxth	r3, r3
 8005786:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005792:	b29b      	uxth	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005798:	4413      	add	r3, r2
 800579a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	011a      	lsls	r2, r3, #4
 80057a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057a4:	4413      	add	r3, r2
 80057a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	891b      	ldrh	r3, [r3, #8]
 80057ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6959      	ldr	r1, [r3, #20]
 80057c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fb76 	bl	8005ebe <USB_WritePMA>
 80057d2:	e14b      	b.n	8005a6c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6a1a      	ldr	r2, [r3, #32]
 80057d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057dc:	1ad2      	subs	r2, r2, r3
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 809a 	beq.w	800592e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d16b      	bne.n	80058de <USB_EPStartXfer+0x7d0>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005816:	4413      	add	r3, r2
 8005818:	66bb      	str	r3, [r7, #104]	@ 0x68
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	011a      	lsls	r2, r3, #4
 8005820:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005822:	4413      	add	r3, r2
 8005824:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005828:	667b      	str	r3, [r7, #100]	@ 0x64
 800582a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005834:	b29a      	uxth	r2, r3
 8005836:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10a      	bne.n	8005858 <USB_EPStartXfer+0x74a>
 8005842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005850:	b29a      	uxth	r2, r3
 8005852:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	e05b      	b.n	8005910 <USB_EPStartXfer+0x802>
 8005858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800585c:	2b3e      	cmp	r3, #62	@ 0x3e
 800585e:	d81c      	bhi.n	800589a <USB_EPStartXfer+0x78c>
 8005860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005864:	085b      	lsrs	r3, r3, #1
 8005866:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800586a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <USB_EPStartXfer+0x772>
 8005876:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800587a:	3301      	adds	r3, #1
 800587c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29a      	uxth	r2, r3
 8005886:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800588a:	b29b      	uxth	r3, r3
 800588c:	029b      	lsls	r3, r3, #10
 800588e:	b29b      	uxth	r3, r3
 8005890:	4313      	orrs	r3, r2
 8005892:	b29a      	uxth	r2, r3
 8005894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005896:	801a      	strh	r2, [r3, #0]
 8005898:	e03a      	b.n	8005910 <USB_EPStartXfer+0x802>
 800589a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058a8:	f003 031f 	and.w	r3, r3, #31
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <USB_EPStartXfer+0x7ac>
 80058b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058b4:	3b01      	subs	r3, #1
 80058b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29a      	uxth	r2, r3
 80058c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	029b      	lsls	r3, r3, #10
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e018      	b.n	8005910 <USB_EPStartXfer+0x802>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d114      	bne.n	8005910 <USB_EPStartXfer+0x802>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058f2:	4413      	add	r3, r2
 80058f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	011a      	lsls	r2, r3, #4
 80058fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058fe:	4413      	add	r3, r2
 8005900:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005904:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800590a:	b29a      	uxth	r2, r3
 800590c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800590e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	895b      	ldrh	r3, [r3, #10]
 8005914:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	6959      	ldr	r1, [r3, #20]
 800591c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005920:	b29b      	uxth	r3, r3
 8005922:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fac9 	bl	8005ebe <USB_WritePMA>
 800592c:	e09e      	b.n	8005a6c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d16b      	bne.n	8005a0e <USB_EPStartXfer+0x900>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005940:	b29b      	uxth	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005946:	4413      	add	r3, r2
 8005948:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	011a      	lsls	r2, r3, #4
 8005950:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005952:	4413      	add	r3, r2
 8005954:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005958:	67bb      	str	r3, [r7, #120]	@ 0x78
 800595a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005964:	b29a      	uxth	r2, r3
 8005966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005968:	801a      	strh	r2, [r3, #0]
 800596a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10a      	bne.n	8005988 <USB_EPStartXfer+0x87a>
 8005972:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005980:	b29a      	uxth	r2, r3
 8005982:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e063      	b.n	8005a50 <USB_EPStartXfer+0x942>
 8005988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800598c:	2b3e      	cmp	r3, #62	@ 0x3e
 800598e:	d81c      	bhi.n	80059ca <USB_EPStartXfer+0x8bc>
 8005990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800599a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d004      	beq.n	80059b0 <USB_EPStartXfer+0x8a2>
 80059a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059aa:	3301      	adds	r3, #1
 80059ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	b29b      	uxth	r3, r3
 80059c0:	4313      	orrs	r3, r2
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059c6:	801a      	strh	r2, [r3, #0]
 80059c8:	e042      	b.n	8005a50 <USB_EPStartXfer+0x942>
 80059ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <USB_EPStartXfer+0x8dc>
 80059e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059e4:	3b01      	subs	r3, #1
 80059e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	029b      	lsls	r3, r3, #10
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	4313      	orrs	r3, r2
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	e020      	b.n	8005a50 <USB_EPStartXfer+0x942>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d11c      	bne.n	8005a50 <USB_EPStartXfer+0x942>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	011a      	lsls	r2, r3, #4
 8005a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	891b      	ldrh	r3, [r3, #8]
 8005a54:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	6959      	ldr	r1, [r3, #20]
 8005a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa29 	bl	8005ebe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a82:	817b      	strh	r3, [r7, #10]
 8005a84:	897b      	ldrh	r3, [r7, #10]
 8005a86:	f083 0310 	eor.w	r3, r3, #16
 8005a8a:	817b      	strh	r3, [r7, #10]
 8005a8c:	897b      	ldrh	r3, [r7, #10]
 8005a8e:	f083 0320 	eor.w	r3, r3, #32
 8005a92:	817b      	strh	r3, [r7, #10]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	897b      	ldrh	r3, [r7, #10]
 8005aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	8013      	strh	r3, [r2, #0]
 8005ab4:	e0d5      	b.n	8005c62 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	7b1b      	ldrb	r3, [r3, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d156      	bne.n	8005b6c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d122      	bne.n	8005b0c <USB_EPStartXfer+0x9fe>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	78db      	ldrb	r3, [r3, #3]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d11e      	bne.n	8005b0c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	441a      	add	r2, r3
 8005af2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005afe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	8013      	strh	r3, [r2, #0]
 8005b0a:	e01d      	b.n	8005b48 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b22:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	441a      	add	r2, r3
 8005b30:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8005b34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	699a      	ldr	r2, [r3, #24]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d907      	bls.n	8005b64 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699a      	ldr	r2, [r3, #24]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	1ad2      	subs	r2, r2, r3
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	619a      	str	r2, [r3, #24]
 8005b62:	e054      	b.n	8005c0e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2200      	movs	r2, #0
 8005b68:	619a      	str	r2, [r3, #24]
 8005b6a:	e050      	b.n	8005c0e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	78db      	ldrb	r3, [r3, #3]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d142      	bne.n	8005bfa <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d048      	beq.n	8005c0e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b8c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <USB_EPStartXfer+0xa96>
 8005b98:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10b      	bne.n	8005bbc <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ba4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d12e      	bne.n	8005c0e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bb0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d128      	bne.n	8005c0e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8005be4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005be8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	8013      	strh	r3, [r2, #0]
 8005bf8:	e009      	b.n	8005c0e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	78db      	ldrb	r3, [r3, #3]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d103      	bne.n	8005c0a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2200      	movs	r2, #0
 8005c06:	619a      	str	r2, [r3, #24]
 8005c08:	e001      	b.n	8005c0e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e02a      	b.n	8005c64 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c24:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005c28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005c2c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c30:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005c34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005c38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	441a      	add	r2, r3
 8005c4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	37b0      	adds	r7, #176	@ 0xb0
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d020      	beq.n	8005cc0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c94:	81bb      	strh	r3, [r7, #12]
 8005c96:	89bb      	ldrh	r3, [r7, #12]
 8005c98:	f083 0310 	eor.w	r3, r3, #16
 8005c9c:	81bb      	strh	r3, [r7, #12]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	441a      	add	r2, r3
 8005ca8:	89bb      	ldrh	r3, [r7, #12]
 8005caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	8013      	strh	r3, [r2, #0]
 8005cbe:	e01f      	b.n	8005d00 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd6:	81fb      	strh	r3, [r7, #14]
 8005cd8:	89fb      	ldrh	r3, [r7, #14]
 8005cda:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005cde:	81fb      	strh	r3, [r7, #14]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	441a      	add	r2, r3
 8005cea:	89fb      	ldrh	r3, [r7, #14]
 8005cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b087      	sub	sp, #28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d04c      	beq.n	8005dba <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	823b      	strh	r3, [r7, #16]
 8005d2e:	8a3b      	ldrh	r3, [r7, #16]
 8005d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01b      	beq.n	8005d70 <USB_EPClearStall+0x62>
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4e:	81fb      	strh	r3, [r7, #14]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	89fb      	ldrh	r3, [r7, #14]
 8005d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	78db      	ldrb	r3, [r3, #3]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d06c      	beq.n	8005e52 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d8e:	81bb      	strh	r3, [r7, #12]
 8005d90:	89bb      	ldrh	r3, [r7, #12]
 8005d92:	f083 0320 	eor.w	r3, r3, #32
 8005d96:	81bb      	strh	r3, [r7, #12]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	441a      	add	r2, r3
 8005da2:	89bb      	ldrh	r3, [r7, #12]
 8005da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	8013      	strh	r3, [r2, #0]
 8005db8:	e04b      	b.n	8005e52 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	82fb      	strh	r3, [r7, #22]
 8005dc8:	8afb      	ldrh	r3, [r7, #22]
 8005dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01b      	beq.n	8005e0a <USB_EPClearStall+0xfc>
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de8:	82bb      	strh	r3, [r7, #20]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	441a      	add	r2, r3
 8005df4:	8abb      	ldrh	r3, [r7, #20]
 8005df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e20:	827b      	strh	r3, [r7, #18]
 8005e22:	8a7b      	ldrh	r3, [r7, #18]
 8005e24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e28:	827b      	strh	r3, [r7, #18]
 8005e2a:	8a7b      	ldrh	r3, [r7, #18]
 8005e2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e30:	827b      	strh	r3, [r7, #18]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	441a      	add	r2, r3
 8005e3c:	8a7b      	ldrh	r3, [r7, #18]
 8005e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2280      	movs	r2, #128	@ 0x80
 8005e76:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b08b      	sub	sp, #44	@ 0x2c
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	461a      	mov	r2, r3
 8005ecc:	460b      	mov	r3, r1
 8005ece:	80fb      	strh	r3, [r7, #6]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ed4:	88bb      	ldrh	r3, [r7, #4]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	085b      	lsrs	r3, r3, #1
 8005eda:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	005a      	lsls	r2, r3, #1
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ef0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ef6:	e01e      	b.n	8005f36 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3301      	adds	r3, #1
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	b21a      	sxth	r2, r3
 8005f08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	b21b      	sxth	r3, r3
 8005f10:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	8a7a      	ldrh	r2, [r7, #18]
 8005f16:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	3302      	adds	r3, #2
 8005f22:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	3301      	adds	r3, #1
 8005f28:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	3b01      	subs	r3, #1
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1dd      	bne.n	8005ef8 <USB_WritePMA+0x3a>
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	372c      	adds	r7, #44	@ 0x2c
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b08b      	sub	sp, #44	@ 0x2c
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	4611      	mov	r1, r2
 8005f56:	461a      	mov	r2, r3
 8005f58:	460b      	mov	r3, r1
 8005f5a:	80fb      	strh	r3, [r7, #6]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005f60:	88bb      	ldrh	r3, [r7, #4]
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	005a      	lsls	r2, r3, #1
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f82:	e01b      	b.n	8005fbc <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	3302      	adds	r3, #2
 8005f90:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	0a1b      	lsrs	r3, r3, #8
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	3301      	adds	r3, #1
 8005fae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e0      	bne.n	8005f84 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005fc2:	88bb      	ldrh	r3, [r7, #4]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	701a      	strb	r2, [r3, #0]
  }
}
 8005fde:	bf00      	nop
 8005fe0:	372c      	adds	r7, #44	@ 0x2c
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	7c1b      	ldrb	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d115      	bne.n	800602e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006002:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006006:	2202      	movs	r2, #2
 8006008:	2181      	movs	r1, #129	@ 0x81
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f002 f90d 	bl	800822a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800601a:	2202      	movs	r2, #2
 800601c:	2101      	movs	r1, #1
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f002 f903 	bl	800822a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800602c:	e012      	b.n	8006054 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800602e:	2340      	movs	r3, #64	@ 0x40
 8006030:	2202      	movs	r2, #2
 8006032:	2181      	movs	r1, #129	@ 0x81
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f002 f8f8 	bl	800822a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006040:	2340      	movs	r3, #64	@ 0x40
 8006042:	2202      	movs	r2, #2
 8006044:	2101      	movs	r1, #1
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f002 f8ef 	bl	800822a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006054:	2308      	movs	r3, #8
 8006056:	2203      	movs	r2, #3
 8006058:	2182      	movs	r1, #130	@ 0x82
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f002 f8e5 	bl	800822a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006066:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800606a:	f002 fa05 	bl	8008478 <USBD_static_malloc>
 800606e:	4602      	mov	r2, r0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
 8006084:	e026      	b.n	80060d4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800608c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	7c1b      	ldrb	r3, [r3, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d109      	bne.n	80060c4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80060b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060ba:	2101      	movs	r1, #1
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f002 f9a5 	bl	800840c <USBD_LL_PrepareReceive>
 80060c2:	e007      	b.n	80060d4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80060ca:	2340      	movs	r3, #64	@ 0x40
 80060cc:	2101      	movs	r1, #1
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f002 f99c 	bl	800840c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	460b      	mov	r3, r1
 80060e8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060ee:	2181      	movs	r1, #129	@ 0x81
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f002 f8c0 	bl	8008276 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060fc:	2101      	movs	r1, #1
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f002 f8b9 	bl	8008276 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800610c:	2182      	movs	r1, #130	@ 0x82
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f002 f8b1 	bl	8008276 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00e      	beq.n	8006142 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006134:	4618      	mov	r0, r3
 8006136:	f002 f9ad 	bl	8008494 <USBD_static_free>
    pdev->pClassData = NULL;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800615c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006172:	2b00      	cmp	r3, #0
 8006174:	d039      	beq.n	80061ea <USBD_CDC_Setup+0x9e>
 8006176:	2b20      	cmp	r3, #32
 8006178:	d17f      	bne.n	800627a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	88db      	ldrh	r3, [r3, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d029      	beq.n	80061d6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b25b      	sxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	da11      	bge.n	80061b0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006198:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	88d2      	ldrh	r2, [r2, #6]
 800619e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80061a0:	6939      	ldr	r1, [r7, #16]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	88db      	ldrh	r3, [r3, #6]
 80061a6:	461a      	mov	r2, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 fa0f 	bl	80075cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80061ae:	e06b      	b.n	8006288 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	785a      	ldrb	r2, [r3, #1]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	88db      	ldrh	r3, [r3, #6]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80061c6:	6939      	ldr	r1, [r7, #16]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	88db      	ldrh	r3, [r3, #6]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 fa2a 	bl	8007628 <USBD_CtlPrepareRx>
      break;
 80061d4:	e058      	b.n	8006288 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	7850      	ldrb	r0, [r2, #1]
 80061e2:	2200      	movs	r2, #0
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	4798      	blx	r3
      break;
 80061e8:	e04e      	b.n	8006288 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	785b      	ldrb	r3, [r3, #1]
 80061ee:	2b0b      	cmp	r3, #11
 80061f0:	d02e      	beq.n	8006250 <USBD_CDC_Setup+0x104>
 80061f2:	2b0b      	cmp	r3, #11
 80061f4:	dc38      	bgt.n	8006268 <USBD_CDC_Setup+0x11c>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <USBD_CDC_Setup+0xb4>
 80061fa:	2b0a      	cmp	r3, #10
 80061fc:	d014      	beq.n	8006228 <USBD_CDC_Setup+0xdc>
 80061fe:	e033      	b.n	8006268 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006206:	2b03      	cmp	r3, #3
 8006208:	d107      	bne.n	800621a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800620a:	f107 030c 	add.w	r3, r7, #12
 800620e:	2202      	movs	r2, #2
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 f9da 	bl	80075cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006218:	e02e      	b.n	8006278 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 f96a 	bl	80074f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006222:	2302      	movs	r3, #2
 8006224:	75fb      	strb	r3, [r7, #23]
          break;
 8006226:	e027      	b.n	8006278 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800622e:	2b03      	cmp	r3, #3
 8006230:	d107      	bne.n	8006242 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006232:	f107 030f 	add.w	r3, r7, #15
 8006236:	2201      	movs	r2, #1
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 f9c6 	bl	80075cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006240:	e01a      	b.n	8006278 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 f956 	bl	80074f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800624a:	2302      	movs	r3, #2
 800624c:	75fb      	strb	r3, [r7, #23]
          break;
 800624e:	e013      	b.n	8006278 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006256:	2b03      	cmp	r3, #3
 8006258:	d00d      	beq.n	8006276 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 f94a 	bl	80074f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006262:	2302      	movs	r3, #2
 8006264:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006266:	e006      	b.n	8006276 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 f943 	bl	80074f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006270:	2302      	movs	r3, #2
 8006272:	75fb      	strb	r3, [r7, #23]
          break;
 8006274:	e000      	b.n	8006278 <USBD_CDC_Setup+0x12c>
          break;
 8006276:	bf00      	nop
      }
      break;
 8006278:	e006      	b.n	8006288 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 f93a 	bl	80074f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006282:	2302      	movs	r3, #2
 8006284:	75fb      	strb	r3, [r7, #23]
      break;
 8006286:	bf00      	nop
  }

  return ret;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062a4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80062ac:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d03a      	beq.n	800632e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80062b8:	78fa      	ldrb	r2, [r7, #3]
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	331c      	adds	r3, #28
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d029      	beq.n	8006322 <USBD_CDC_DataIn+0x90>
 80062ce:	78fa      	ldrb	r2, [r7, #3]
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	331c      	adds	r3, #28
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	78f9      	ldrb	r1, [r7, #3]
 80062e2:	68b8      	ldr	r0, [r7, #8]
 80062e4:	460b      	mov	r3, r1
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4403      	add	r3, r0
 80062ee:	3320      	adds	r3, #32
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80062f6:	fb01 f303 	mul.w	r3, r1, r3
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d110      	bne.n	8006322 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	331c      	adds	r3, #28
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006314:	78f9      	ldrb	r1, [r7, #3]
 8006316:	2300      	movs	r3, #0
 8006318:	2200      	movs	r2, #0
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f002 f853 	bl	80083c6 <USBD_LL_Transmit>
 8006320:	e003      	b.n	800632a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	e000      	b.n	8006330 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800632e:	2302      	movs	r3, #2
  }
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800634a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 f87e 	bl	8008452 <USBD_LL_GetRxDataSize>
 8006356:	4602      	mov	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00d      	beq.n	8006384 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800637c:	4611      	mov	r1, r2
 800637e:	4798      	blx	r3

    return USBD_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e000      	b.n	8006386 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006384:	2302      	movs	r3, #2
  }
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800639c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d014      	beq.n	80063d2 <USBD_CDC_EP0_RxReady+0x44>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80063ae:	2bff      	cmp	r3, #255	@ 0xff
 80063b0:	d00f      	beq.n	80063d2 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80063c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	22ff      	movs	r2, #255	@ 0xff
 80063ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2243      	movs	r2, #67	@ 0x43
 80063e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80063ea:	4b03      	ldr	r3, [pc, #12]	@ (80063f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20000094 	.word	0x20000094

080063fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2243      	movs	r2, #67	@ 0x43
 8006408:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800640a:	4b03      	ldr	r3, [pc, #12]	@ (8006418 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	20000050 	.word	0x20000050

0800641c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2243      	movs	r2, #67	@ 0x43
 8006428:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800642a:	4b03      	ldr	r3, [pc, #12]	@ (8006438 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	200000d8 	.word	0x200000d8

0800643c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	220a      	movs	r2, #10
 8006448:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800644a:	4b03      	ldr	r3, [pc, #12]	@ (8006458 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	2000000c 	.word	0x2000000c

0800645c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006466:	2302      	movs	r3, #2
 8006468:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800648a:	b480      	push	{r7}
 800648c:	b087      	sub	sp, #28
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	4613      	mov	r3, r2
 8006496:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800649e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ce:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01c      	beq.n	800653a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006506:	2b00      	cmp	r3, #0
 8006508:	d115      	bne.n	8006536 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006528:	b29b      	uxth	r3, r3
 800652a:	2181      	movs	r1, #129	@ 0x81
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 ff4a 	bl	80083c6 <USBD_LL_Transmit>

      return USBD_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	e002      	b.n	800653c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800653a:	2302      	movs	r3, #2
  }
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006552:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d017      	beq.n	800658e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	7c1b      	ldrb	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800656c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006570:	2101      	movs	r1, #1
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 ff4a 	bl	800840c <USBD_LL_PrepareReceive>
 8006578:	e007      	b.n	800658a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006580:	2340      	movs	r3, #64	@ 0x40
 8006582:	2101      	movs	r1, #1
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 ff41 	bl	800840c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e000      	b.n	8006590 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800658e:	2302      	movs	r3, #2
  }
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065ac:	2302      	movs	r3, #2
 80065ae:	e01a      	b.n	80065e6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	79fa      	ldrb	r2, [r7, #7]
 80065dc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f001 fdae 	bl	8008140 <USBD_LL_Init>

  return USBD_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b085      	sub	sp, #20
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d006      	beq.n	8006610 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
 800660e:	e001      	b.n	8006614 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006610:	2302      	movs	r3, #2
 8006612:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 fde2 	bl	80081f4 <USBD_LL_Start>

  return USBD_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800665c:	2302      	movs	r3, #2
 800665e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00c      	beq.n	8006684 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	78fa      	ldrb	r2, [r7, #3]
 8006674:	4611      	mov	r1, r2
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	460b      	mov	r3, r1
 8006698:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	78fa      	ldrb	r2, [r7, #3]
 80066a4:	4611      	mov	r1, r2
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	4798      	blx	r3

  return USBD_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fedb 	bl	8007482 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80066da:	461a      	mov	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d016      	beq.n	800671e <USBD_LL_SetupStage+0x6a>
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d81c      	bhi.n	800672e <USBD_LL_SetupStage+0x7a>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <USBD_LL_SetupStage+0x4a>
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d008      	beq.n	800670e <USBD_LL_SetupStage+0x5a>
 80066fc:	e017      	b.n	800672e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f9ce 	bl	8006aa8 <USBD_StdDevReq>
      break;
 800670c:	e01a      	b.n	8006744 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa30 	bl	8006b7c <USBD_StdItfReq>
      break;
 800671c:	e012      	b.n	8006744 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa70 	bl	8006c0c <USBD_StdEPReq>
      break;
 800672c:	e00a      	b.n	8006744 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006734:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006738:	b2db      	uxtb	r3, r3
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fdb9 	bl	80082b4 <USBD_LL_StallEP>
      break;
 8006742:	bf00      	nop
  }

  return USBD_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b086      	sub	sp, #24
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	460b      	mov	r3, r1
 8006758:	607a      	str	r2, [r7, #4]
 800675a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d14b      	bne.n	80067fa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006768:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006770:	2b03      	cmp	r3, #3
 8006772:	d134      	bne.n	80067de <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	429a      	cmp	r2, r3
 800677e:	d919      	bls.n	80067b4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	1ad2      	subs	r2, r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006796:	429a      	cmp	r2, r3
 8006798:	d203      	bcs.n	80067a2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800679e:	b29b      	uxth	r3, r3
 80067a0:	e002      	b.n	80067a8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 ff59 	bl	8007664 <USBD_CtlContinueRx>
 80067b2:	e038      	b.n	8006826 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d105      	bne.n	80067d6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 ff56 	bl	8007688 <USBD_CtlSendStatus>
 80067dc:	e023      	b.n	8006826 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80067e4:	2b05      	cmp	r3, #5
 80067e6:	d11e      	bne.n	8006826 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80067f0:	2100      	movs	r1, #0
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f001 fd5e 	bl	80082b4 <USBD_LL_StallEP>
 80067f8:	e015      	b.n	8006826 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800680c:	2b03      	cmp	r3, #3
 800680e:	d108      	bne.n	8006822 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	7afa      	ldrb	r2, [r7, #11]
 800681a:	4611      	mov	r1, r2
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	4798      	blx	r3
 8006820:	e001      	b.n	8006826 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006822:	2302      	movs	r3, #2
 8006824:	e000      	b.n	8006828 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	460b      	mov	r3, r1
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800683e:	7afb      	ldrb	r3, [r7, #11]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d17f      	bne.n	8006944 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3314      	adds	r3, #20
 8006848:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006850:	2b02      	cmp	r3, #2
 8006852:	d15c      	bne.n	800690e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	429a      	cmp	r2, r3
 800685e:	d915      	bls.n	800688c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	1ad2      	subs	r2, r2, r3
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	b29b      	uxth	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fec3 	bl	8007604 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800687e:	2300      	movs	r3, #0
 8006880:	2200      	movs	r2, #0
 8006882:	2100      	movs	r1, #0
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f001 fdc1 	bl	800840c <USBD_LL_PrepareReceive>
 800688a:	e04e      	b.n	800692a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	6912      	ldr	r2, [r2, #16]
 8006894:	fbb3 f1f2 	udiv	r1, r3, r2
 8006898:	fb01 f202 	mul.w	r2, r1, r2
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d11c      	bne.n	80068dc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d316      	bcc.n	80068dc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d20f      	bcs.n	80068dc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068bc:	2200      	movs	r2, #0
 80068be:	2100      	movs	r1, #0
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fe9f 	bl	8007604 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ce:	2300      	movs	r3, #0
 80068d0:	2200      	movs	r2, #0
 80068d2:	2100      	movs	r1, #0
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f001 fd99 	bl	800840c <USBD_LL_PrepareReceive>
 80068da:	e026      	b.n	800692a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d105      	bne.n	80068fe <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80068fe:	2180      	movs	r1, #128	@ 0x80
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f001 fcd7 	bl	80082b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 fed1 	bl	80076ae <USBD_CtlReceiveStatus>
 800690c:	e00d      	b.n	800692a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006914:	2b04      	cmp	r3, #4
 8006916:	d004      	beq.n	8006922 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006922:	2180      	movs	r1, #128	@ 0x80
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f001 fcc5 	bl	80082b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006930:	2b01      	cmp	r3, #1
 8006932:	d11d      	bne.n	8006970 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff fe80 	bl	800663a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006942:	e015      	b.n	8006970 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00d      	beq.n	800696c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006956:	2b03      	cmp	r3, #3
 8006958:	d108      	bne.n	800696c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	7afa      	ldrb	r2, [r7, #11]
 8006964:	4611      	mov	r1, r2
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	4798      	blx	r3
 800696a:	e001      	b.n	8006970 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800696c:	2302      	movs	r3, #2
 800696e:	e000      	b.n	8006972 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b082      	sub	sp, #8
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006982:	2340      	movs	r3, #64	@ 0x40
 8006984:	2200      	movs	r2, #0
 8006986:	2100      	movs	r1, #0
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 fc4e 	bl	800822a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2240      	movs	r2, #64	@ 0x40
 800699a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800699e:	2340      	movs	r3, #64	@ 0x40
 80069a0:	2200      	movs	r2, #0
 80069a2:	2180      	movs	r1, #128	@ 0x80
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fc40 	bl	800822a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2240      	movs	r2, #64	@ 0x40
 80069b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6852      	ldr	r2, [r2, #4]
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	4611      	mov	r1, r2
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
  }

  return USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2204      	movs	r2, #4
 8006a34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d105      	bne.n	8006a64 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b082      	sub	sp, #8
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d10b      	bne.n	8006a9c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006abe:	2b40      	cmp	r3, #64	@ 0x40
 8006ac0:	d005      	beq.n	8006ace <USBD_StdDevReq+0x26>
 8006ac2:	2b40      	cmp	r3, #64	@ 0x40
 8006ac4:	d84f      	bhi.n	8006b66 <USBD_StdDevReq+0xbe>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d009      	beq.n	8006ade <USBD_StdDevReq+0x36>
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d14b      	bne.n	8006b66 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4798      	blx	r3
      break;
 8006adc:	e048      	b.n	8006b70 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	785b      	ldrb	r3, [r3, #1]
 8006ae2:	2b09      	cmp	r3, #9
 8006ae4:	d839      	bhi.n	8006b5a <USBD_StdDevReq+0xb2>
 8006ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <USBD_StdDevReq+0x44>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b3d 	.word	0x08006b3d
 8006af0:	08006b51 	.word	0x08006b51
 8006af4:	08006b5b 	.word	0x08006b5b
 8006af8:	08006b47 	.word	0x08006b47
 8006afc:	08006b5b 	.word	0x08006b5b
 8006b00:	08006b1f 	.word	0x08006b1f
 8006b04:	08006b15 	.word	0x08006b15
 8006b08:	08006b5b 	.word	0x08006b5b
 8006b0c:	08006b33 	.word	0x08006b33
 8006b10:	08006b29 	.word	0x08006b29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f9dc 	bl	8006ed4 <USBD_GetDescriptor>
          break;
 8006b1c:	e022      	b.n	8006b64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fb3f 	bl	80071a4 <USBD_SetAddress>
          break;
 8006b26:	e01d      	b.n	8006b64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fb7e 	bl	800722c <USBD_SetConfig>
          break;
 8006b30:	e018      	b.n	8006b64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fc07 	bl	8007348 <USBD_GetConfig>
          break;
 8006b3a:	e013      	b.n	8006b64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fc37 	bl	80073b2 <USBD_GetStatus>
          break;
 8006b44:	e00e      	b.n	8006b64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fc65 	bl	8007418 <USBD_SetFeature>
          break;
 8006b4e:	e009      	b.n	8006b64 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fc74 	bl	8007440 <USBD_ClrFeature>
          break;
 8006b58:	e004      	b.n	8006b64 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fcca 	bl	80074f6 <USBD_CtlError>
          break;
 8006b62:	bf00      	nop
      }
      break;
 8006b64:	e004      	b.n	8006b70 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fcc4 	bl	80074f6 <USBD_CtlError>
      break;
 8006b6e:	bf00      	nop
  }

  return ret;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop

08006b7c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b92:	2b40      	cmp	r3, #64	@ 0x40
 8006b94:	d005      	beq.n	8006ba2 <USBD_StdItfReq+0x26>
 8006b96:	2b40      	cmp	r3, #64	@ 0x40
 8006b98:	d82e      	bhi.n	8006bf8 <USBD_StdItfReq+0x7c>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <USBD_StdItfReq+0x26>
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d12a      	bne.n	8006bf8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d81d      	bhi.n	8006bea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	889b      	ldrh	r3, [r3, #4]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d813      	bhi.n	8006be0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	88db      	ldrh	r3, [r3, #6]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d110      	bne.n	8006bf4 <USBD_StdItfReq+0x78>
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10d      	bne.n	8006bf4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fd55 	bl	8007688 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006bde:	e009      	b.n	8006bf4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fc87 	bl	80074f6 <USBD_CtlError>
          break;
 8006be8:	e004      	b.n	8006bf4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fc82 	bl	80074f6 <USBD_CtlError>
          break;
 8006bf2:	e000      	b.n	8006bf6 <USBD_StdItfReq+0x7a>
          break;
 8006bf4:	bf00      	nop
      }
      break;
 8006bf6:	e004      	b.n	8006c02 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fc7b 	bl	80074f6 <USBD_CtlError>
      break;
 8006c00:	bf00      	nop
  }

  return USBD_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	889b      	ldrh	r3, [r3, #4]
 8006c1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c28:	2b40      	cmp	r3, #64	@ 0x40
 8006c2a:	d007      	beq.n	8006c3c <USBD_StdEPReq+0x30>
 8006c2c:	2b40      	cmp	r3, #64	@ 0x40
 8006c2e:	f200 8146 	bhi.w	8006ebe <USBD_StdEPReq+0x2b2>
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <USBD_StdEPReq+0x40>
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	f040 8141 	bne.w	8006ebe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
      break;
 8006c4a:	e13d      	b.n	8006ec8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d10a      	bne.n	8006c6e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	e12d      	b.n	8006eca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d007      	beq.n	8006c86 <USBD_StdEPReq+0x7a>
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	f300 811b 	bgt.w	8006eb2 <USBD_StdEPReq+0x2a6>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d072      	beq.n	8006d66 <USBD_StdEPReq+0x15a>
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d03a      	beq.n	8006cfa <USBD_StdEPReq+0xee>
 8006c84:	e115      	b.n	8006eb2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d002      	beq.n	8006c96 <USBD_StdEPReq+0x8a>
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d015      	beq.n	8006cc0 <USBD_StdEPReq+0xb4>
 8006c94:	e02b      	b.n	8006cee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00c      	beq.n	8006cb6 <USBD_StdEPReq+0xaa>
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	2b80      	cmp	r3, #128	@ 0x80
 8006ca0:	d009      	beq.n	8006cb6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fb04 	bl	80082b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006cac:	2180      	movs	r1, #128	@ 0x80
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 fb00 	bl	80082b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cb4:	e020      	b.n	8006cf8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fc1c 	bl	80074f6 <USBD_CtlError>
              break;
 8006cbe:	e01b      	b.n	8006cf8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	885b      	ldrh	r3, [r3, #2]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10e      	bne.n	8006ce6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00b      	beq.n	8006ce6 <USBD_StdEPReq+0xda>
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	2b80      	cmp	r3, #128	@ 0x80
 8006cd2:	d008      	beq.n	8006ce6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	88db      	ldrh	r3, [r3, #6]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fae7 	bl	80082b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fcce 	bl	8007688 <USBD_CtlSendStatus>

              break;
 8006cec:	e004      	b.n	8006cf8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fc00 	bl	80074f6 <USBD_CtlError>
              break;
 8006cf6:	bf00      	nop
          }
          break;
 8006cf8:	e0e0      	b.n	8006ebc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d002      	beq.n	8006d0a <USBD_StdEPReq+0xfe>
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d015      	beq.n	8006d34 <USBD_StdEPReq+0x128>
 8006d08:	e026      	b.n	8006d58 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00c      	beq.n	8006d2a <USBD_StdEPReq+0x11e>
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	2b80      	cmp	r3, #128	@ 0x80
 8006d14:	d009      	beq.n	8006d2a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 faca 	bl	80082b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d20:	2180      	movs	r1, #128	@ 0x80
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 fac6 	bl	80082b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d28:	e01c      	b.n	8006d64 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fbe2 	bl	80074f6 <USBD_CtlError>
              break;
 8006d32:	e017      	b.n	8006d64 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	885b      	ldrh	r3, [r3, #2]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d112      	bne.n	8006d62 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fad1 	bl	80082f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fc99 	bl	8007688 <USBD_CtlSendStatus>
              }
              break;
 8006d56:	e004      	b.n	8006d62 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fbcb 	bl	80074f6 <USBD_CtlError>
              break;
 8006d60:	e000      	b.n	8006d64 <USBD_StdEPReq+0x158>
              break;
 8006d62:	bf00      	nop
          }
          break;
 8006d64:	e0aa      	b.n	8006ebc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d002      	beq.n	8006d76 <USBD_StdEPReq+0x16a>
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d032      	beq.n	8006dda <USBD_StdEPReq+0x1ce>
 8006d74:	e097      	b.n	8006ea6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d007      	beq.n	8006d8c <USBD_StdEPReq+0x180>
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b80      	cmp	r3, #128	@ 0x80
 8006d80:	d004      	beq.n	8006d8c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fbb6 	bl	80074f6 <USBD_CtlError>
                break;
 8006d8a:	e091      	b.n	8006eb0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	da0b      	bge.n	8006dac <USBD_StdEPReq+0x1a0>
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	3310      	adds	r3, #16
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4413      	add	r3, r2
 8006da8:	3304      	adds	r3, #4
 8006daa:	e00b      	b.n	8006dc4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fbfa 	bl	80075cc <USBD_CtlSendData>
              break;
 8006dd8:	e06a      	b.n	8006eb0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006dda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	da11      	bge.n	8006e06 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	f003 020f 	and.w	r2, r3, #15
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	440b      	add	r3, r1
 8006df4:	3318      	adds	r3, #24
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d117      	bne.n	8006e2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fb79 	bl	80074f6 <USBD_CtlError>
                  break;
 8006e04:	e054      	b.n	8006eb0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	f003 020f 	and.w	r2, r3, #15
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	440b      	add	r3, r1
 8006e18:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d104      	bne.n	8006e2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fb66 	bl	80074f6 <USBD_CtlError>
                  break;
 8006e2a:	e041      	b.n	8006eb0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	da0b      	bge.n	8006e4c <USBD_StdEPReq+0x240>
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	3310      	adds	r3, #16
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	4413      	add	r3, r2
 8006e48:	3304      	adds	r3, #4
 8006e4a:	e00b      	b.n	8006e64 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	3304      	adds	r3, #4
 8006e64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <USBD_StdEPReq+0x266>
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	2b80      	cmp	r3, #128	@ 0x80
 8006e70:	d103      	bne.n	8006e7a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	e00e      	b.n	8006e98 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fa56 	bl	8008330 <USBD_LL_IsStallEP>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	e002      	b.n	8006e98 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fb94 	bl	80075cc <USBD_CtlSendData>
              break;
 8006ea4:	e004      	b.n	8006eb0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fb24 	bl	80074f6 <USBD_CtlError>
              break;
 8006eae:	bf00      	nop
          }
          break;
 8006eb0:	e004      	b.n	8006ebc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fb1e 	bl	80074f6 <USBD_CtlError>
          break;
 8006eba:	bf00      	nop
      }
      break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fb18 	bl	80074f6 <USBD_CtlError>
      break;
 8006ec6:	bf00      	nop
  }

  return ret;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	885b      	ldrh	r3, [r3, #2]
 8006eee:	0a1b      	lsrs	r3, r3, #8
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	2b06      	cmp	r3, #6
 8006ef6:	f200 8128 	bhi.w	800714a <USBD_GetDescriptor+0x276>
 8006efa:	a201      	add	r2, pc, #4	@ (adr r2, 8006f00 <USBD_GetDescriptor+0x2c>)
 8006efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f00:	08006f1d 	.word	0x08006f1d
 8006f04:	08006f35 	.word	0x08006f35
 8006f08:	08006f75 	.word	0x08006f75
 8006f0c:	0800714b 	.word	0x0800714b
 8006f10:	0800714b 	.word	0x0800714b
 8006f14:	080070eb 	.word	0x080070eb
 8006f18:	08007117 	.word	0x08007117
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	7c12      	ldrb	r2, [r2, #16]
 8006f28:	f107 0108 	add.w	r1, r7, #8
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4798      	blx	r3
 8006f30:	60f8      	str	r0, [r7, #12]
      break;
 8006f32:	e112      	b.n	800715a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	7c1b      	ldrb	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10d      	bne.n	8006f58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	f107 0208 	add.w	r2, r7, #8
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4798      	blx	r3
 8006f4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3301      	adds	r3, #1
 8006f52:	2202      	movs	r2, #2
 8006f54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f56:	e100      	b.n	800715a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f60:	f107 0208 	add.w	r2, r7, #8
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	2202      	movs	r2, #2
 8006f70:	701a      	strb	r2, [r3, #0]
      break;
 8006f72:	e0f2      	b.n	800715a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	885b      	ldrh	r3, [r3, #2]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b05      	cmp	r3, #5
 8006f7c:	f200 80ac 	bhi.w	80070d8 <USBD_GetDescriptor+0x204>
 8006f80:	a201      	add	r2, pc, #4	@ (adr r2, 8006f88 <USBD_GetDescriptor+0xb4>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	08006fa1 	.word	0x08006fa1
 8006f8c:	08006fd5 	.word	0x08006fd5
 8006f90:	08007009 	.word	0x08007009
 8006f94:	0800703d 	.word	0x0800703d
 8006f98:	08007071 	.word	0x08007071
 8006f9c:	080070a5 	.word	0x080070a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	7c12      	ldrb	r2, [r2, #16]
 8006fb8:	f107 0108 	add.w	r1, r7, #8
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fc2:	e091      	b.n	80070e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa95 	bl	80074f6 <USBD_CtlError>
            err++;
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fd2:	e089      	b.n	80070e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	7c12      	ldrb	r2, [r2, #16]
 8006fec:	f107 0108 	add.w	r1, r7, #8
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ff6:	e077      	b.n	80070e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa7b 	bl	80074f6 <USBD_CtlError>
            err++;
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	3301      	adds	r3, #1
 8007004:	72fb      	strb	r3, [r7, #11]
          break;
 8007006:	e06f      	b.n	80070e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	7c12      	ldrb	r2, [r2, #16]
 8007020:	f107 0108 	add.w	r1, r7, #8
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800702a:	e05d      	b.n	80070e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa61 	bl	80074f6 <USBD_CtlError>
            err++;
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	3301      	adds	r3, #1
 8007038:	72fb      	strb	r3, [r7, #11]
          break;
 800703a:	e055      	b.n	80070e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	7c12      	ldrb	r2, [r2, #16]
 8007054:	f107 0108 	add.w	r1, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800705e:	e043      	b.n	80070e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa47 	bl	80074f6 <USBD_CtlError>
            err++;
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	3301      	adds	r3, #1
 800706c:	72fb      	strb	r3, [r7, #11]
          break;
 800706e:	e03b      	b.n	80070e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7c12      	ldrb	r2, [r2, #16]
 8007088:	f107 0108 	add.w	r1, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007092:	e029      	b.n	80070e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fa2d 	bl	80074f6 <USBD_CtlError>
            err++;
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	3301      	adds	r3, #1
 80070a0:	72fb      	strb	r3, [r7, #11]
          break;
 80070a2:	e021      	b.n	80070e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	7c12      	ldrb	r2, [r2, #16]
 80070bc:	f107 0108 	add.w	r1, r7, #8
 80070c0:	4610      	mov	r0, r2
 80070c2:	4798      	blx	r3
 80070c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070c6:	e00f      	b.n	80070e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa13 	bl	80074f6 <USBD_CtlError>
            err++;
 80070d0:	7afb      	ldrb	r3, [r7, #11]
 80070d2:	3301      	adds	r3, #1
 80070d4:	72fb      	strb	r3, [r7, #11]
          break;
 80070d6:	e007      	b.n	80070e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa0b 	bl	80074f6 <USBD_CtlError>
          err++;
 80070e0:	7afb      	ldrb	r3, [r7, #11]
 80070e2:	3301      	adds	r3, #1
 80070e4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80070e6:	e038      	b.n	800715a <USBD_GetDescriptor+0x286>
 80070e8:	e037      	b.n	800715a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	7c1b      	ldrb	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070fa:	f107 0208 	add.w	r2, r7, #8
 80070fe:	4610      	mov	r0, r2
 8007100:	4798      	blx	r3
 8007102:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007104:	e029      	b.n	800715a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f9f4 	bl	80074f6 <USBD_CtlError>
        err++;
 800710e:	7afb      	ldrb	r3, [r7, #11]
 8007110:	3301      	adds	r3, #1
 8007112:	72fb      	strb	r3, [r7, #11]
      break;
 8007114:	e021      	b.n	800715a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	7c1b      	ldrb	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10d      	bne.n	800713a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007126:	f107 0208 	add.w	r2, r7, #8
 800712a:	4610      	mov	r0, r2
 800712c:	4798      	blx	r3
 800712e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	2207      	movs	r2, #7
 8007136:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007138:	e00f      	b.n	800715a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f9da 	bl	80074f6 <USBD_CtlError>
        err++;
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	3301      	adds	r3, #1
 8007146:	72fb      	strb	r3, [r7, #11]
      break;
 8007148:	e007      	b.n	800715a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f9d2 	bl	80074f6 <USBD_CtlError>
      err++;
 8007152:	7afb      	ldrb	r3, [r7, #11]
 8007154:	3301      	adds	r3, #1
 8007156:	72fb      	strb	r3, [r7, #11]
      break;
 8007158:	bf00      	nop
  }

  if (err != 0U)
 800715a:	7afb      	ldrb	r3, [r7, #11]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d11c      	bne.n	800719a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007160:	893b      	ldrh	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d011      	beq.n	800718a <USBD_GetDescriptor+0x2b6>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	88db      	ldrh	r3, [r3, #6]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00d      	beq.n	800718a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	88da      	ldrh	r2, [r3, #6]
 8007172:	893b      	ldrh	r3, [r7, #8]
 8007174:	4293      	cmp	r3, r2
 8007176:	bf28      	it	cs
 8007178:	4613      	movcs	r3, r2
 800717a:	b29b      	uxth	r3, r3
 800717c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800717e:	893b      	ldrh	r3, [r7, #8]
 8007180:	461a      	mov	r2, r3
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fa21 	bl	80075cc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	88db      	ldrh	r3, [r3, #6]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d104      	bne.n	800719c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa78 	bl	8007688 <USBD_CtlSendStatus>
 8007198:	e000      	b.n	800719c <USBD_GetDescriptor+0x2c8>
    return;
 800719a:	bf00      	nop
    }
  }
}
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop

080071a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	889b      	ldrh	r3, [r3, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d130      	bne.n	8007218 <USBD_SetAddress+0x74>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	88db      	ldrh	r3, [r3, #6]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d12c      	bne.n	8007218 <USBD_SetAddress+0x74>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	885b      	ldrh	r3, [r3, #2]
 80071c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80071c4:	d828      	bhi.n	8007218 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	885b      	ldrh	r3, [r3, #2]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d104      	bne.n	80071e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f989 	bl	80074f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e4:	e01d      	b.n	8007222 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7bfa      	ldrb	r2, [r7, #15]
 80071ea:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 f8c8 	bl	8008388 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fa45 	bl	8007688 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720c:	e009      	b.n	8007222 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007216:	e004      	b.n	8007222 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f96b 	bl	80074f6 <USBD_CtlError>
  }
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	885b      	ldrh	r3, [r3, #2]
 800723a:	b2da      	uxtb	r2, r3
 800723c:	4b41      	ldr	r3, [pc, #260]	@ (8007344 <USBD_SetConfig+0x118>)
 800723e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007240:	4b40      	ldr	r3, [pc, #256]	@ (8007344 <USBD_SetConfig+0x118>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d904      	bls.n	8007252 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f953 	bl	80074f6 <USBD_CtlError>
 8007250:	e075      	b.n	800733e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007258:	2b02      	cmp	r3, #2
 800725a:	d002      	beq.n	8007262 <USBD_SetConfig+0x36>
 800725c:	2b03      	cmp	r3, #3
 800725e:	d023      	beq.n	80072a8 <USBD_SetConfig+0x7c>
 8007260:	e062      	b.n	8007328 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007262:	4b38      	ldr	r3, [pc, #224]	@ (8007344 <USBD_SetConfig+0x118>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d01a      	beq.n	80072a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800726a:	4b36      	ldr	r3, [pc, #216]	@ (8007344 <USBD_SetConfig+0x118>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2203      	movs	r2, #3
 8007278:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800727c:	4b31      	ldr	r3, [pc, #196]	@ (8007344 <USBD_SetConfig+0x118>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff f9e4 	bl	8006650 <USBD_SetClassConfig>
 8007288:	4603      	mov	r3, r0
 800728a:	2b02      	cmp	r3, #2
 800728c:	d104      	bne.n	8007298 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f930 	bl	80074f6 <USBD_CtlError>
            return;
 8007296:	e052      	b.n	800733e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f9f5 	bl	8007688 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800729e:	e04e      	b.n	800733e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f9f1 	bl	8007688 <USBD_CtlSendStatus>
        break;
 80072a6:	e04a      	b.n	800733e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80072a8:	4b26      	ldr	r3, [pc, #152]	@ (8007344 <USBD_SetConfig+0x118>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d112      	bne.n	80072d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80072b8:	4b22      	ldr	r3, [pc, #136]	@ (8007344 <USBD_SetConfig+0x118>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80072c2:	4b20      	ldr	r3, [pc, #128]	@ (8007344 <USBD_SetConfig+0x118>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff f9e0 	bl	800668e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f9da 	bl	8007688 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80072d4:	e033      	b.n	800733e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80072d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007344 <USBD_SetConfig+0x118>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d01d      	beq.n	8007320 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff f9ce 	bl	800668e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80072f2:	4b14      	ldr	r3, [pc, #80]	@ (8007344 <USBD_SetConfig+0x118>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072fc:	4b11      	ldr	r3, [pc, #68]	@ (8007344 <USBD_SetConfig+0x118>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff f9a4 	bl	8006650 <USBD_SetClassConfig>
 8007308:	4603      	mov	r3, r0
 800730a:	2b02      	cmp	r3, #2
 800730c:	d104      	bne.n	8007318 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f8f0 	bl	80074f6 <USBD_CtlError>
            return;
 8007316:	e012      	b.n	800733e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f9b5 	bl	8007688 <USBD_CtlSendStatus>
        break;
 800731e:	e00e      	b.n	800733e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f9b1 	bl	8007688 <USBD_CtlSendStatus>
        break;
 8007326:	e00a      	b.n	800733e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f8e3 	bl	80074f6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007330:	4b04      	ldr	r3, [pc, #16]	@ (8007344 <USBD_SetConfig+0x118>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff f9a9 	bl	800668e <USBD_ClrClassConfig>
        break;
 800733c:	bf00      	nop
    }
  }
}
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20000368 	.word	0x20000368

08007348 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	88db      	ldrh	r3, [r3, #6]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d004      	beq.n	8007364 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f8ca 	bl	80074f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007362:	e022      	b.n	80073aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800736a:	2b02      	cmp	r3, #2
 800736c:	dc02      	bgt.n	8007374 <USBD_GetConfig+0x2c>
 800736e:	2b00      	cmp	r3, #0
 8007370:	dc03      	bgt.n	800737a <USBD_GetConfig+0x32>
 8007372:	e015      	b.n	80073a0 <USBD_GetConfig+0x58>
 8007374:	2b03      	cmp	r3, #3
 8007376:	d00b      	beq.n	8007390 <USBD_GetConfig+0x48>
 8007378:	e012      	b.n	80073a0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3308      	adds	r3, #8
 8007384:	2201      	movs	r2, #1
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f91f 	bl	80075cc <USBD_CtlSendData>
        break;
 800738e:	e00c      	b.n	80073aa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3304      	adds	r3, #4
 8007394:	2201      	movs	r2, #1
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f917 	bl	80075cc <USBD_CtlSendData>
        break;
 800739e:	e004      	b.n	80073aa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f8a7 	bl	80074f6 <USBD_CtlError>
        break;
 80073a8:	bf00      	nop
}
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c2:	3b01      	subs	r3, #1
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d81e      	bhi.n	8007406 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	88db      	ldrh	r3, [r3, #6]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d004      	beq.n	80073da <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f88f 	bl	80074f6 <USBD_CtlError>
        break;
 80073d8:	e01a      	b.n	8007410 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d005      	beq.n	80073f6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f043 0202 	orr.w	r2, r3, #2
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	330c      	adds	r3, #12
 80073fa:	2202      	movs	r2, #2
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f8e4 	bl	80075cc <USBD_CtlSendData>
      break;
 8007404:	e004      	b.n	8007410 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f874 	bl	80074f6 <USBD_CtlError>
      break;
 800740e:	bf00      	nop
  }
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	885b      	ldrh	r3, [r3, #2]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d106      	bne.n	8007438 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f928 	bl	8007688 <USBD_CtlSendStatus>
  }
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007450:	3b01      	subs	r3, #1
 8007452:	2b02      	cmp	r3, #2
 8007454:	d80b      	bhi.n	800746e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	885b      	ldrh	r3, [r3, #2]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d10c      	bne.n	8007478 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f90e 	bl	8007688 <USBD_CtlSendStatus>
      }
      break;
 800746c:	e004      	b.n	8007478 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f840 	bl	80074f6 <USBD_CtlError>
      break;
 8007476:	e000      	b.n	800747a <USBD_ClrFeature+0x3a>
      break;
 8007478:	bf00      	nop
  }
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781a      	ldrb	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	785a      	ldrb	r2, [r3, #1]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	3302      	adds	r3, #2
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	3303      	adds	r3, #3
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	4413      	add	r3, r2
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	3304      	adds	r3, #4
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	3305      	adds	r3, #5
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4413      	add	r3, r2
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	3306      	adds	r3, #6
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	3307      	adds	r3, #7
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	4413      	add	r3, r2
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	80da      	strh	r2, [r3, #6]

}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b082      	sub	sp, #8
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007500:	2180      	movs	r1, #128	@ 0x80
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fed6 	bl	80082b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fed2 	bl	80082b4 <USBD_LL_StallEP>
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d032      	beq.n	8007594 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 f834 	bl	800759c <USBD_GetLen>
 8007534:	4603      	mov	r3, r0
 8007536:	3301      	adds	r3, #1
 8007538:	b29b      	uxth	r3, r3
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	75fa      	strb	r2, [r7, #23]
 8007548:	461a      	mov	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	4413      	add	r3, r2
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	7812      	ldrb	r2, [r2, #0]
 8007552:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	75fa      	strb	r2, [r7, #23]
 800755a:	461a      	mov	r2, r3
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4413      	add	r3, r2
 8007560:	2203      	movs	r2, #3
 8007562:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007564:	e012      	b.n	800758c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	60fa      	str	r2, [r7, #12]
 800756c:	7dfa      	ldrb	r2, [r7, #23]
 800756e:	1c51      	adds	r1, r2, #1
 8007570:	75f9      	strb	r1, [r7, #23]
 8007572:	4611      	mov	r1, r2
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	440a      	add	r2, r1
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	75fa      	strb	r2, [r7, #23]
 8007582:	461a      	mov	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4413      	add	r3, r2
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e8      	bne.n	8007566 <USBD_GetString+0x4e>
    }
  }
}
 8007594:	bf00      	nop
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80075a8:	e005      	b.n	80075b6 <USBD_GetLen+0x1a>
  {
    len++;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	3301      	adds	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
    buf++;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3301      	adds	r3, #1
 80075b4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1f5      	bne.n	80075aa <USBD_GetLen+0xe>
  }

  return len;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2202      	movs	r2, #2
 80075de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80075e8:	88fa      	ldrh	r2, [r7, #6]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	2100      	movs	r1, #0
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fee6 	bl	80083c6 <USBD_LL_Transmit>

  return USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007612:	88fb      	ldrh	r3, [r7, #6]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	2100      	movs	r1, #0
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fed4 	bl	80083c6 <USBD_LL_Transmit>

  return USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2203      	movs	r2, #3
 800763a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800763e:	88fa      	ldrh	r2, [r7, #6]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007646:	88fa      	ldrh	r2, [r7, #6]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	2100      	movs	r1, #0
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fed9 	bl	800840c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	2100      	movs	r1, #0
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fec7 	bl	800840c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2204      	movs	r2, #4
 8007694:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007698:	2300      	movs	r3, #0
 800769a:	2200      	movs	r2, #0
 800769c:	2100      	movs	r1, #0
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fe91 	bl	80083c6 <USBD_LL_Transmit>

  return USBD_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2205      	movs	r2, #5
 80076ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076be:	2300      	movs	r3, #0
 80076c0:	2200      	movs	r2, #0
 80076c2:	2100      	movs	r1, #0
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fea1 	bl	800840c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076d8:	2200      	movs	r2, #0
 80076da:	4912      	ldr	r1, [pc, #72]	@ (8007724 <MX_USB_DEVICE_Init+0x50>)
 80076dc:	4812      	ldr	r0, [pc, #72]	@ (8007728 <MX_USB_DEVICE_Init+0x54>)
 80076de:	f7fe ff5b 	bl	8006598 <USBD_Init>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80076e8:	f7f8 ff3a 	bl	8000560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80076ec:	490f      	ldr	r1, [pc, #60]	@ (800772c <MX_USB_DEVICE_Init+0x58>)
 80076ee:	480e      	ldr	r0, [pc, #56]	@ (8007728 <MX_USB_DEVICE_Init+0x54>)
 80076f0:	f7fe ff7d 	bl	80065ee <USBD_RegisterClass>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076fa:	f7f8 ff31 	bl	8000560 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076fe:	490c      	ldr	r1, [pc, #48]	@ (8007730 <MX_USB_DEVICE_Init+0x5c>)
 8007700:	4809      	ldr	r0, [pc, #36]	@ (8007728 <MX_USB_DEVICE_Init+0x54>)
 8007702:	f7fe feab 	bl	800645c <USBD_CDC_RegisterInterface>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800770c:	f7f8 ff28 	bl	8000560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007710:	4805      	ldr	r0, [pc, #20]	@ (8007728 <MX_USB_DEVICE_Init+0x54>)
 8007712:	f7fe ff86 	bl	8006622 <USBD_Start>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800771c:	f7f8 ff20 	bl	8000560 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007720:	bf00      	nop
 8007722:	bd80      	pop	{r7, pc}
 8007724:	200001ec 	.word	0x200001ec
 8007728:	2000036c 	.word	0x2000036c
 800772c:	20000018 	.word	0x20000018
 8007730:	200001dc 	.word	0x200001dc

08007734 <Process_Command>:
  {8, GPIOE, LD8_Pin, 0, 0, 0},
  {9, GPIOE, LD9_Pin, 0, 0, 0},
  {10, GPIOE, LD10_Pin, 0, 0, 0}
};

void Process_Command(uint8_t *command, uint32_t length) {
 8007734:	b590      	push	{r4, r7, lr}
 8007736:	b097      	sub	sp, #92	@ 0x5c
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  if (length < 3) return;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b02      	cmp	r3, #2
 8007742:	f240 81a7 	bls.w	8007a94 <Process_Command+0x360>

  if (command[0] == 'B') {
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b42      	cmp	r3, #66	@ 0x42
 800774c:	d176      	bne.n	800783c <Process_Command+0x108>
    int led_number = command[1] - '0';
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3301      	adds	r3, #1
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	3b30      	subs	r3, #48	@ 0x30
 8007756:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (led_number < 3 || led_number > 10) {
 8007758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800775a:	2b02      	cmp	r3, #2
 800775c:	f340 819c 	ble.w	8007a98 <Process_Command+0x364>
 8007760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007762:	2b0a      	cmp	r3, #10
 8007764:	f300 8198 	bgt.w	8007a98 <Process_Command+0x364>
      return;
    }

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8007768:	2300      	movs	r3, #0
 800776a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800776e:	e060      	b.n	8007832 <Process_Command+0xfe>
      if (ledBlink[i].number == led_number) {
 8007770:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007774:	49c4      	ldr	r1, [pc, #784]	@ (8007a88 <Process_Command+0x354>)
 8007776:	4613      	mov	r3, r2
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	4413      	add	r3, r2
 800777c:	00db      	lsls	r3, r3, #3
 800777e:	440b      	add	r3, r1
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007786:	4293      	cmp	r3, r2
 8007788:	d14e      	bne.n	8007828 <Process_Command+0xf4>
        char *comma = (char *)strchr((char *)command, ',');
 800778a:	212c      	movs	r1, #44	@ 0x2c
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 ff73 	bl	8008678 <strchr>
 8007792:	6478      	str	r0, [r7, #68]	@ 0x44
        if (comma != NULL) {
 8007794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 8180 	beq.w	8007a9c <Process_Command+0x368>
          uint32_t period = (uint32_t)atoi(comma + 1);
 800779c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800779e:	3301      	adds	r3, #1
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 feb9 	bl	8008518 <atoi>
 80077a6:	4603      	mov	r3, r0
 80077a8:	643b      	str	r3, [r7, #64]	@ 0x40
          ledBlink[i].blinkPeriod = period;
 80077aa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80077ae:	49b6      	ldr	r1, [pc, #728]	@ (8007a88 <Process_Command+0x354>)
 80077b0:	4613      	mov	r3, r2
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	4413      	add	r3, r2
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	440b      	add	r3, r1
 80077ba:	330c      	adds	r3, #12
 80077bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077be:	601a      	str	r2, [r3, #0]
          ledBlink[i].blinkEnabled = (period > 0) ? 1 : 0;
 80077c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bf14      	ite	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	2300      	moveq	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80077d0:	4618      	mov	r0, r3
 80077d2:	49ad      	ldr	r1, [pc, #692]	@ (8007a88 <Process_Command+0x354>)
 80077d4:	4613      	mov	r3, r2
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	4413      	add	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	440b      	add	r3, r1
 80077de:	3314      	adds	r3, #20
 80077e0:	4602      	mov	r2, r0
 80077e2:	701a      	strb	r2, [r3, #0]
          ledBlink[i].lastToggleTime = HAL_GetTick();
 80077e4:	f897 4057 	ldrb.w	r4, [r7, #87]	@ 0x57
 80077e8:	f7f9 f870 	bl	80008cc <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	49a6      	ldr	r1, [pc, #664]	@ (8007a88 <Process_Command+0x354>)
 80077f0:	4623      	mov	r3, r4
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	4423      	add	r3, r4
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	440b      	add	r3, r1
 80077fa:	3310      	adds	r3, #16
 80077fc:	601a      	str	r2, [r3, #0]

          char response[50];
          sprintf(response, "LED%d blink period set to %lu ms\r\n", led_number, period);
 80077fe:	f107 000c 	add.w	r0, r7, #12
 8007802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007804:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007806:	49a1      	ldr	r1, [pc, #644]	@ (8007a8c <Process_Command+0x358>)
 8007808:	f000 ff0e 	bl	8008628 <siprintf>
          CDC_Transmit_FS((uint8_t *)response, strlen(response));
 800780c:	f107 030c 	add.w	r3, r7, #12
 8007810:	4618      	mov	r0, r3
 8007812:	f7f8 fcdd 	bl	80001d0 <strlen>
 8007816:	4603      	mov	r3, r0
 8007818:	b29a      	uxth	r2, r3
 800781a:	f107 030c 	add.w	r3, r7, #12
 800781e:	4611      	mov	r1, r2
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fa6f 	bl	8007d04 <CDC_Transmit_FS>
        }
        break;
 8007826:	e139      	b.n	8007a9c <Process_Command+0x368>
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8007828:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800782c:	3301      	adds	r3, #1
 800782e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8007832:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007836:	2b07      	cmp	r3, #7
 8007838:	d99a      	bls.n	8007770 <Process_Command+0x3c>
 800783a:	e130      	b.n	8007a9e <Process_Command+0x36a>
      }
    }
  }
  else if (command[0] == 'E') {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b45      	cmp	r3, #69	@ 0x45
 8007842:	f040 808f 	bne.w	8007964 <Process_Command+0x230>
    int led_number = command[1] - '0';
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3301      	adds	r3, #1
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	3b30      	subs	r3, #48	@ 0x30
 800784e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (led_number >= 3 && led_number <= 10) {
 8007850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007852:	2b02      	cmp	r3, #2
 8007854:	f340 8123 	ble.w	8007a9e <Process_Command+0x36a>
 8007858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800785a:	2b0a      	cmp	r3, #10
 800785c:	f300 811f 	bgt.w	8007a9e <Process_Command+0x36a>
      for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8007860:	2300      	movs	r3, #0
 8007862:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8007866:	e028      	b.n	80078ba <Process_Command+0x186>
        if (ledBlink[i].number == led_number) {
 8007868:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 800786c:	4986      	ldr	r1, [pc, #536]	@ (8007a88 <Process_Command+0x354>)
 800786e:	4613      	mov	r3, r2
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	4413      	add	r3, r2
 8007874:	00db      	lsls	r3, r3, #3
 8007876:	440b      	add	r3, r1
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800787e:	4293      	cmp	r3, r2
 8007880:	d116      	bne.n	80078b0 <Process_Command+0x17c>
          ledBlink[i].blinkEnabled = 0;
 8007882:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8007886:	4980      	ldr	r1, [pc, #512]	@ (8007a88 <Process_Command+0x354>)
 8007888:	4613      	mov	r3, r2
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	4413      	add	r3, r2
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	440b      	add	r3, r1
 8007892:	3314      	adds	r3, #20
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
          ledBlink[i].blinkPeriod = 0;
 8007898:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 800789c:	497a      	ldr	r1, [pc, #488]	@ (8007a88 <Process_Command+0x354>)
 800789e:	4613      	mov	r3, r2
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	4413      	add	r3, r2
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	440b      	add	r3, r1
 80078a8:	330c      	adds	r3, #12
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]
          break;
 80078ae:	e008      	b.n	80078c2 <Process_Command+0x18e>
      for (uint8_t i = 0; i < NUM_LEDS; i++) {
 80078b0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80078b4:	3301      	adds	r3, #1
 80078b6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80078ba:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80078be:	2b07      	cmp	r3, #7
 80078c0:	d9d2      	bls.n	8007868 <Process_Command+0x134>
        }
      }
      switch (led_number) {
 80078c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078c4:	3b03      	subs	r3, #3
 80078c6:	2b07      	cmp	r3, #7
 80078c8:	f200 80e9 	bhi.w	8007a9e <Process_Command+0x36a>
 80078cc:	a201      	add	r2, pc, #4	@ (adr r2, 80078d4 <Process_Command+0x1a0>)
 80078ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d2:	bf00      	nop
 80078d4:	080078f5 	.word	0x080078f5
 80078d8:	08007903 	.word	0x08007903
 80078dc:	08007911 	.word	0x08007911
 80078e0:	0800791f 	.word	0x0800791f
 80078e4:	0800792d 	.word	0x0800792d
 80078e8:	0800793b 	.word	0x0800793b
 80078ec:	08007949 	.word	0x08007949
 80078f0:	08007957 	.word	0x08007957
        case 3:
          HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_SET);
 80078f4:	2201      	movs	r2, #1
 80078f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078fa:	4865      	ldr	r0, [pc, #404]	@ (8007a90 <Process_Command+0x35c>)
 80078fc:	f7f9 fa7e 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007900:	e0cd      	b.n	8007a9e <Process_Command+0x36a>
        case 4:
          HAL_GPIO_WritePin(GPIOE, LD4_Pin, GPIO_PIN_SET);
 8007902:	2201      	movs	r2, #1
 8007904:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007908:	4861      	ldr	r0, [pc, #388]	@ (8007a90 <Process_Command+0x35c>)
 800790a:	f7f9 fa77 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 800790e:	e0c6      	b.n	8007a9e <Process_Command+0x36a>
        case 5:
          HAL_GPIO_WritePin(GPIOE, LD5_Pin, GPIO_PIN_SET);
 8007910:	2201      	movs	r2, #1
 8007912:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007916:	485e      	ldr	r0, [pc, #376]	@ (8007a90 <Process_Command+0x35c>)
 8007918:	f7f9 fa70 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 800791c:	e0bf      	b.n	8007a9e <Process_Command+0x36a>
        case 6:
          HAL_GPIO_WritePin(GPIOE, LD6_Pin, GPIO_PIN_SET);
 800791e:	2201      	movs	r2, #1
 8007920:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007924:	485a      	ldr	r0, [pc, #360]	@ (8007a90 <Process_Command+0x35c>)
 8007926:	f7f9 fa69 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 800792a:	e0b8      	b.n	8007a9e <Process_Command+0x36a>
        case 7:
          HAL_GPIO_WritePin(GPIOE, LD7_Pin, GPIO_PIN_SET);
 800792c:	2201      	movs	r2, #1
 800792e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007932:	4857      	ldr	r0, [pc, #348]	@ (8007a90 <Process_Command+0x35c>)
 8007934:	f7f9 fa62 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007938:	e0b1      	b.n	8007a9e <Process_Command+0x36a>
        case 8:
          HAL_GPIO_WritePin(GPIOE, LD8_Pin, GPIO_PIN_SET);
 800793a:	2201      	movs	r2, #1
 800793c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007940:	4853      	ldr	r0, [pc, #332]	@ (8007a90 <Process_Command+0x35c>)
 8007942:	f7f9 fa5b 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007946:	e0aa      	b.n	8007a9e <Process_Command+0x36a>
        case 9:
          HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_SET);
 8007948:	2201      	movs	r2, #1
 800794a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800794e:	4850      	ldr	r0, [pc, #320]	@ (8007a90 <Process_Command+0x35c>)
 8007950:	f7f9 fa54 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007954:	e0a3      	b.n	8007a9e <Process_Command+0x36a>
        case 10:
          HAL_GPIO_WritePin(GPIOE, LD10_Pin, GPIO_PIN_SET);
 8007956:	2201      	movs	r2, #1
 8007958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800795c:	484c      	ldr	r0, [pc, #304]	@ (8007a90 <Process_Command+0x35c>)
 800795e:	f7f9 fa4d 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007962:	e09c      	b.n	8007a9e <Process_Command+0x36a>
      }
    }
  }
  else if (command[0] == 'D') {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b44      	cmp	r3, #68	@ 0x44
 800796a:	f040 8098 	bne.w	8007a9e <Process_Command+0x36a>
    int led_number = command[1] - '0';
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3301      	adds	r3, #1
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	3b30      	subs	r3, #48	@ 0x30
 8007976:	653b      	str	r3, [r7, #80]	@ 0x50
    if (led_number >= 3 && led_number <= 10) {
 8007978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800797a:	2b02      	cmp	r3, #2
 800797c:	f340 808f 	ble.w	8007a9e <Process_Command+0x36a>
 8007980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007982:	2b0a      	cmp	r3, #10
 8007984:	f300 808b 	bgt.w	8007a9e <Process_Command+0x36a>
      for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8007988:	2300      	movs	r3, #0
 800798a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 800798e:	e028      	b.n	80079e2 <Process_Command+0x2ae>
        if (ledBlink[i].number == led_number) {
 8007990:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8007994:	493c      	ldr	r1, [pc, #240]	@ (8007a88 <Process_Command+0x354>)
 8007996:	4613      	mov	r3, r2
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	4413      	add	r3, r2
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	440b      	add	r3, r1
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d116      	bne.n	80079d8 <Process_Command+0x2a4>
          ledBlink[i].blinkEnabled = 0;
 80079aa:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80079ae:	4936      	ldr	r1, [pc, #216]	@ (8007a88 <Process_Command+0x354>)
 80079b0:	4613      	mov	r3, r2
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	4413      	add	r3, r2
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	440b      	add	r3, r1
 80079ba:	3314      	adds	r3, #20
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
          ledBlink[i].blinkPeriod = 0;
 80079c0:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80079c4:	4930      	ldr	r1, [pc, #192]	@ (8007a88 <Process_Command+0x354>)
 80079c6:	4613      	mov	r3, r2
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	4413      	add	r3, r2
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	440b      	add	r3, r1
 80079d0:	330c      	adds	r3, #12
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
          break;
 80079d6:	e008      	b.n	80079ea <Process_Command+0x2b6>
      for (uint8_t i = 0; i < NUM_LEDS; i++) {
 80079d8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80079dc:	3301      	adds	r3, #1
 80079de:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80079e2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80079e6:	2b07      	cmp	r3, #7
 80079e8:	d9d2      	bls.n	8007990 <Process_Command+0x25c>
        }
      }
      switch (led_number) {
 80079ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ec:	3b03      	subs	r3, #3
 80079ee:	2b07      	cmp	r3, #7
 80079f0:	d855      	bhi.n	8007a9e <Process_Command+0x36a>
 80079f2:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <Process_Command+0x2c4>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a19 	.word	0x08007a19
 80079fc:	08007a27 	.word	0x08007a27
 8007a00:	08007a35 	.word	0x08007a35
 8007a04:	08007a43 	.word	0x08007a43
 8007a08:	08007a51 	.word	0x08007a51
 8007a0c:	08007a5f 	.word	0x08007a5f
 8007a10:	08007a6d 	.word	0x08007a6d
 8007a14:	08007a7b 	.word	0x08007a7b
        case 3:
          HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_RESET);
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007a1e:	481c      	ldr	r0, [pc, #112]	@ (8007a90 <Process_Command+0x35c>)
 8007a20:	f7f9 f9ec 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007a24:	e03b      	b.n	8007a9e <Process_Command+0x36a>
        case 4:
          HAL_GPIO_WritePin(GPIOE, LD4_Pin, GPIO_PIN_RESET);
 8007a26:	2200      	movs	r2, #0
 8007a28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007a2c:	4818      	ldr	r0, [pc, #96]	@ (8007a90 <Process_Command+0x35c>)
 8007a2e:	f7f9 f9e5 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007a32:	e034      	b.n	8007a9e <Process_Command+0x36a>
        case 5:
          HAL_GPIO_WritePin(GPIOE, LD5_Pin, GPIO_PIN_RESET);
 8007a34:	2200      	movs	r2, #0
 8007a36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a3a:	4815      	ldr	r0, [pc, #84]	@ (8007a90 <Process_Command+0x35c>)
 8007a3c:	f7f9 f9de 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007a40:	e02d      	b.n	8007a9e <Process_Command+0x36a>
        case 6:
          HAL_GPIO_WritePin(GPIOE, LD6_Pin, GPIO_PIN_RESET);
 8007a42:	2200      	movs	r2, #0
 8007a44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a48:	4811      	ldr	r0, [pc, #68]	@ (8007a90 <Process_Command+0x35c>)
 8007a4a:	f7f9 f9d7 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007a4e:	e026      	b.n	8007a9e <Process_Command+0x36a>
        case 7:
          HAL_GPIO_WritePin(GPIOE, LD7_Pin, GPIO_PIN_RESET);
 8007a50:	2200      	movs	r2, #0
 8007a52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007a56:	480e      	ldr	r0, [pc, #56]	@ (8007a90 <Process_Command+0x35c>)
 8007a58:	f7f9 f9d0 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007a5c:	e01f      	b.n	8007a9e <Process_Command+0x36a>
        case 8:
          HAL_GPIO_WritePin(GPIOE, LD8_Pin, GPIO_PIN_RESET);
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007a64:	480a      	ldr	r0, [pc, #40]	@ (8007a90 <Process_Command+0x35c>)
 8007a66:	f7f9 f9c9 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007a6a:	e018      	b.n	8007a9e <Process_Command+0x36a>
        case 9:
          HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_RESET);
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007a72:	4807      	ldr	r0, [pc, #28]	@ (8007a90 <Process_Command+0x35c>)
 8007a74:	f7f9 f9c2 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007a78:	e011      	b.n	8007a9e <Process_Command+0x36a>
        case 10:
          HAL_GPIO_WritePin(GPIOE, LD10_Pin, GPIO_PIN_RESET);
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007a80:	4803      	ldr	r0, [pc, #12]	@ (8007a90 <Process_Command+0x35c>)
 8007a82:	f7f9 f9bb 	bl	8000dfc <HAL_GPIO_WritePin>
          break;
 8007a86:	e00a      	b.n	8007a9e <Process_Command+0x36a>
 8007a88:	2000011c 	.word	0x2000011c
 8007a8c:	08008f9c 	.word	0x08008f9c
 8007a90:	48001000 	.word	0x48001000
  if (length < 3) return;
 8007a94:	bf00      	nop
 8007a96:	e002      	b.n	8007a9e <Process_Command+0x36a>
      return;
 8007a98:	bf00      	nop
 8007a9a:	e000      	b.n	8007a9e <Process_Command+0x36a>
        break;
 8007a9c:	bf00      	nop
      }
    }
  }
}
 8007a9e:	375c      	adds	r7, #92	@ 0x5c
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd90      	pop	{r4, r7, pc}

08007aa4 <Update_LED_Blink>:

void Update_LED_Blink(void) {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
  uint32_t currentTime = HAL_GetTick();
 8007aaa:	f7f8 ff0f 	bl	80008cc <HAL_GetTick>
 8007aae:	6038      	str	r0, [r7, #0]
  for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	71fb      	strb	r3, [r7, #7]
 8007ab4:	e04d      	b.n	8007b52 <Update_LED_Blink+0xae>
    if (ledBlink[i].blinkEnabled && ledBlink[i].blinkPeriod > 0) {
 8007ab6:	79fa      	ldrb	r2, [r7, #7]
 8007ab8:	492a      	ldr	r1, [pc, #168]	@ (8007b64 <Update_LED_Blink+0xc0>)
 8007aba:	4613      	mov	r3, r2
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	4413      	add	r3, r2
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	440b      	add	r3, r1
 8007ac4:	3314      	adds	r3, #20
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d03f      	beq.n	8007b4c <Update_LED_Blink+0xa8>
 8007acc:	79fa      	ldrb	r2, [r7, #7]
 8007ace:	4925      	ldr	r1, [pc, #148]	@ (8007b64 <Update_LED_Blink+0xc0>)
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	4413      	add	r3, r2
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	440b      	add	r3, r1
 8007ada:	330c      	adds	r3, #12
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d034      	beq.n	8007b4c <Update_LED_Blink+0xa8>
      if ((currentTime - ledBlink[i].lastToggleTime) >= ledBlink[i].blinkPeriod) {
 8007ae2:	79fa      	ldrb	r2, [r7, #7]
 8007ae4:	491f      	ldr	r1, [pc, #124]	@ (8007b64 <Update_LED_Blink+0xc0>)
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	4413      	add	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	440b      	add	r3, r1
 8007af0:	3310      	adds	r3, #16
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	1ad1      	subs	r1, r2, r3
 8007af8:	79fa      	ldrb	r2, [r7, #7]
 8007afa:	481a      	ldr	r0, [pc, #104]	@ (8007b64 <Update_LED_Blink+0xc0>)
 8007afc:	4613      	mov	r3, r2
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	4413      	add	r3, r2
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	4403      	add	r3, r0
 8007b06:	330c      	adds	r3, #12
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4299      	cmp	r1, r3
 8007b0c:	d31e      	bcc.n	8007b4c <Update_LED_Blink+0xa8>
        HAL_GPIO_TogglePin(ledBlink[i].port, ledBlink[i].pin);
 8007b0e:	79fa      	ldrb	r2, [r7, #7]
 8007b10:	4914      	ldr	r1, [pc, #80]	@ (8007b64 <Update_LED_Blink+0xc0>)
 8007b12:	4613      	mov	r3, r2
 8007b14:	005b      	lsls	r3, r3, #1
 8007b16:	4413      	add	r3, r2
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	440b      	add	r3, r1
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	79fa      	ldrb	r2, [r7, #7]
 8007b22:	4910      	ldr	r1, [pc, #64]	@ (8007b64 <Update_LED_Blink+0xc0>)
 8007b24:	4613      	mov	r3, r2
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	4413      	add	r3, r2
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	440b      	add	r3, r1
 8007b2e:	3308      	adds	r3, #8
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	4619      	mov	r1, r3
 8007b34:	f7f9 f97a 	bl	8000e2c <HAL_GPIO_TogglePin>
        ledBlink[i].lastToggleTime = currentTime;
 8007b38:	79fa      	ldrb	r2, [r7, #7]
 8007b3a:	490a      	ldr	r1, [pc, #40]	@ (8007b64 <Update_LED_Blink+0xc0>)
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	4413      	add	r3, r2
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	440b      	add	r3, r1
 8007b46:	3310      	adds	r3, #16
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	71fb      	strb	r3, [r7, #7]
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	2b07      	cmp	r3, #7
 8007b56:	d9ae      	bls.n	8007ab6 <Update_LED_Blink+0x12>
      }
    }
  }
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	2000011c 	.word	0x2000011c

08007b68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4905      	ldr	r1, [pc, #20]	@ (8007b84 <CDC_Init_FS+0x1c>)
 8007b70:	4805      	ldr	r0, [pc, #20]	@ (8007b88 <CDC_Init_FS+0x20>)
 8007b72:	f7fe fc8a 	bl	800648a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b76:	4905      	ldr	r1, [pc, #20]	@ (8007b8c <CDC_Init_FS+0x24>)
 8007b78:	4803      	ldr	r0, [pc, #12]	@ (8007b88 <CDC_Init_FS+0x20>)
 8007b7a:	f7fe fca0 	bl	80064be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20000a40 	.word	0x20000a40
 8007b88:	2000036c 	.word	0x2000036c
 8007b8c:	20000640 	.word	0x20000640

08007b90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	6039      	str	r1, [r7, #0]
 8007baa:	71fb      	strb	r3, [r7, #7]
 8007bac:	4613      	mov	r3, r2
 8007bae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	2b23      	cmp	r3, #35	@ 0x23
 8007bb4:	d84a      	bhi.n	8007c4c <CDC_Control_FS+0xac>
 8007bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bbc <CDC_Control_FS+0x1c>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007c4d 	.word	0x08007c4d
 8007bc0:	08007c4d 	.word	0x08007c4d
 8007bc4:	08007c4d 	.word	0x08007c4d
 8007bc8:	08007c4d 	.word	0x08007c4d
 8007bcc:	08007c4d 	.word	0x08007c4d
 8007bd0:	08007c4d 	.word	0x08007c4d
 8007bd4:	08007c4d 	.word	0x08007c4d
 8007bd8:	08007c4d 	.word	0x08007c4d
 8007bdc:	08007c4d 	.word	0x08007c4d
 8007be0:	08007c4d 	.word	0x08007c4d
 8007be4:	08007c4d 	.word	0x08007c4d
 8007be8:	08007c4d 	.word	0x08007c4d
 8007bec:	08007c4d 	.word	0x08007c4d
 8007bf0:	08007c4d 	.word	0x08007c4d
 8007bf4:	08007c4d 	.word	0x08007c4d
 8007bf8:	08007c4d 	.word	0x08007c4d
 8007bfc:	08007c4d 	.word	0x08007c4d
 8007c00:	08007c4d 	.word	0x08007c4d
 8007c04:	08007c4d 	.word	0x08007c4d
 8007c08:	08007c4d 	.word	0x08007c4d
 8007c0c:	08007c4d 	.word	0x08007c4d
 8007c10:	08007c4d 	.word	0x08007c4d
 8007c14:	08007c4d 	.word	0x08007c4d
 8007c18:	08007c4d 	.word	0x08007c4d
 8007c1c:	08007c4d 	.word	0x08007c4d
 8007c20:	08007c4d 	.word	0x08007c4d
 8007c24:	08007c4d 	.word	0x08007c4d
 8007c28:	08007c4d 	.word	0x08007c4d
 8007c2c:	08007c4d 	.word	0x08007c4d
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	08007c4d 	.word	0x08007c4d
 8007c38:	08007c4d 	.word	0x08007c4d
 8007c3c:	08007c4d 	.word	0x08007c4d
 8007c40:	08007c4d 	.word	0x08007c4d
 8007c44:	08007c4d 	.word	0x08007c4d
 8007c48:	08007c4d 	.word	0x08007c4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c4c:	bf00      	nop
  }

  return (USBD_OK);
 8007c4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4823      	ldr	r0, [pc, #140]	@ (8007cf8 <CDC_Receive_FS+0x9c>)
 8007c6a:	f7fe fc28 	bl	80064be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c6e:	4822      	ldr	r0, [pc, #136]	@ (8007cf8 <CDC_Receive_FS+0x9c>)
 8007c70:	f7fe fc68 	bl	8006544 <USBD_CDC_ReceivePacket>
  for (uint32_t i = 0; i < *Len; i++) {
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	e018      	b.n	8007cac <CDC_Receive_FS+0x50>
      if (rx_index < MAX_CMD_LENGTH) {
 8007c7a:	4b20      	ldr	r3, [pc, #128]	@ (8007cfc <CDC_Receive_FS+0xa0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b09      	cmp	r3, #9
 8007c80:	d811      	bhi.n	8007ca6 <CDC_Receive_FS+0x4a>
         rx_buffer[rx_index++] = Buf[i];
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	441a      	add	r2, r3
 8007c88:	4b1c      	ldr	r3, [pc, #112]	@ (8007cfc <CDC_Receive_FS+0xa0>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	1c59      	adds	r1, r3, #1
 8007c8e:	481b      	ldr	r0, [pc, #108]	@ (8007cfc <CDC_Receive_FS+0xa0>)
 8007c90:	6001      	str	r1, [r0, #0]
 8007c92:	7811      	ldrb	r1, [r2, #0]
 8007c94:	4a1a      	ldr	r2, [pc, #104]	@ (8007d00 <CDC_Receive_FS+0xa4>)
 8007c96:	54d1      	strb	r1, [r2, r3]
         CDC_Transmit_FS(Buf, *Len);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f82f 	bl	8007d04 <CDC_Transmit_FS>
  for (uint32_t i = 0; i < *Len; i++) {
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d3e1      	bcc.n	8007c7a <CDC_Receive_FS+0x1e>
     }
  }
  if (rx_index > 0 && (rx_buffer[rx_index - 1] == '\n' || rx_buffer[rx_index - 1] == '\r')) {
 8007cb6:	4b11      	ldr	r3, [pc, #68]	@ (8007cfc <CDC_Receive_FS+0xa0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d016      	beq.n	8007cec <CDC_Receive_FS+0x90>
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8007cfc <CDC_Receive_FS+0xa0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8007d00 <CDC_Receive_FS+0xa4>)
 8007cc6:	5cd3      	ldrb	r3, [r2, r3]
 8007cc8:	2b0a      	cmp	r3, #10
 8007cca:	d006      	beq.n	8007cda <CDC_Receive_FS+0x7e>
 8007ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8007cfc <CDC_Receive_FS+0xa0>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	4a0b      	ldr	r2, [pc, #44]	@ (8007d00 <CDC_Receive_FS+0xa4>)
 8007cd4:	5cd3      	ldrb	r3, [r2, r3]
 8007cd6:	2b0d      	cmp	r3, #13
 8007cd8:	d108      	bne.n	8007cec <CDC_Receive_FS+0x90>
      Process_Command(rx_buffer, rx_index);
 8007cda:	4b08      	ldr	r3, [pc, #32]	@ (8007cfc <CDC_Receive_FS+0xa0>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4807      	ldr	r0, [pc, #28]	@ (8007d00 <CDC_Receive_FS+0xa4>)
 8007ce2:	f7ff fd27 	bl	8007734 <Process_Command>
      rx_index = 0;
 8007ce6:	4b05      	ldr	r3, [pc, #20]	@ (8007cfc <CDC_Receive_FS+0xa0>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
  }
  return (USBD_OK);
 8007cec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	2000036c 	.word	0x2000036c
 8007cfc:	2000063c 	.word	0x2000063c
 8007d00:	20000630 	.word	0x20000630

08007d04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007d14:	4b0d      	ldr	r3, [pc, #52]	@ (8007d4c <CDC_Transmit_FS+0x48>)
 8007d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e00b      	b.n	8007d42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007d2a:	887b      	ldrh	r3, [r7, #2]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	4806      	ldr	r0, [pc, #24]	@ (8007d4c <CDC_Transmit_FS+0x48>)
 8007d32:	f7fe fbaa 	bl	800648a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d36:	4805      	ldr	r0, [pc, #20]	@ (8007d4c <CDC_Transmit_FS+0x48>)
 8007d38:	f7fe fbd5 	bl	80064e6 <USBD_CDC_TransmitPacket>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	2000036c 	.word	0x2000036c

08007d50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2212      	movs	r2, #18
 8007d60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d62:	4b03      	ldr	r3, [pc, #12]	@ (8007d70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	20000208 	.word	0x20000208

08007d74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	6039      	str	r1, [r7, #0]
 8007d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2204      	movs	r2, #4
 8007d84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d86:	4b03      	ldr	r3, [pc, #12]	@ (8007d94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	2000021c 	.word	0x2000021c

08007d98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	6039      	str	r1, [r7, #0]
 8007da2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d105      	bne.n	8007db6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	4907      	ldr	r1, [pc, #28]	@ (8007dcc <USBD_FS_ProductStrDescriptor+0x34>)
 8007dae:	4808      	ldr	r0, [pc, #32]	@ (8007dd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007db0:	f7ff fbb2 	bl	8007518 <USBD_GetString>
 8007db4:	e004      	b.n	8007dc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	4904      	ldr	r1, [pc, #16]	@ (8007dcc <USBD_FS_ProductStrDescriptor+0x34>)
 8007dba:	4805      	ldr	r0, [pc, #20]	@ (8007dd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007dbc:	f7ff fbac 	bl	8007518 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dc0:	4b02      	ldr	r3, [pc, #8]	@ (8007dcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000e40 	.word	0x20000e40
 8007dd0:	08008fc0 	.word	0x08008fc0

08007dd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	6039      	str	r1, [r7, #0]
 8007dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	4904      	ldr	r1, [pc, #16]	@ (8007df4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007de4:	4804      	ldr	r0, [pc, #16]	@ (8007df8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007de6:	f7ff fb97 	bl	8007518 <USBD_GetString>
  return USBD_StrDesc;
 8007dea:	4b02      	ldr	r3, [pc, #8]	@ (8007df4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20000e40 	.word	0x20000e40
 8007df8:	08008fd8 	.word	0x08008fd8

08007dfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	221a      	movs	r2, #26
 8007e0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e0e:	f000 f843 	bl	8007e98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e12:	4b02      	ldr	r3, [pc, #8]	@ (8007e1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20000220 	.word	0x20000220

08007e20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d105      	bne.n	8007e3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4907      	ldr	r1, [pc, #28]	@ (8007e54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e36:	4808      	ldr	r0, [pc, #32]	@ (8007e58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e38:	f7ff fb6e 	bl	8007518 <USBD_GetString>
 8007e3c:	e004      	b.n	8007e48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	4904      	ldr	r1, [pc, #16]	@ (8007e54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e42:	4805      	ldr	r0, [pc, #20]	@ (8007e58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e44:	f7ff fb68 	bl	8007518 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e48:	4b02      	ldr	r3, [pc, #8]	@ (8007e54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000e40 	.word	0x20000e40
 8007e58:	08008fec 	.word	0x08008fec

08007e5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d105      	bne.n	8007e7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	4907      	ldr	r1, [pc, #28]	@ (8007e90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e72:	4808      	ldr	r0, [pc, #32]	@ (8007e94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e74:	f7ff fb50 	bl	8007518 <USBD_GetString>
 8007e78:	e004      	b.n	8007e84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	4904      	ldr	r1, [pc, #16]	@ (8007e90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e7e:	4805      	ldr	r0, [pc, #20]	@ (8007e94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e80:	f7ff fb4a 	bl	8007518 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e84:	4b02      	ldr	r3, [pc, #8]	@ (8007e90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000e40 	.word	0x20000e40
 8007e94:	08008ff8 	.word	0x08008ff8

08007e98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007edc <Get_SerialNum+0x44>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee0 <Get_SerialNum+0x48>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee4 <Get_SerialNum+0x4c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d009      	beq.n	8007ed2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	4909      	ldr	r1, [pc, #36]	@ (8007ee8 <Get_SerialNum+0x50>)
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 f814 	bl	8007ef0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ec8:	2204      	movs	r2, #4
 8007eca:	4908      	ldr	r1, [pc, #32]	@ (8007eec <Get_SerialNum+0x54>)
 8007ecc:	68b8      	ldr	r0, [r7, #8]
 8007ece:	f000 f80f 	bl	8007ef0 <IntToUnicode>
  }
}
 8007ed2:	bf00      	nop
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	1ffff7ac 	.word	0x1ffff7ac
 8007ee0:	1ffff7b0 	.word	0x1ffff7b0
 8007ee4:	1ffff7b4 	.word	0x1ffff7b4
 8007ee8:	20000222 	.word	0x20000222
 8007eec:	20000232 	.word	0x20000232

08007ef0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
 8007f06:	e027      	b.n	8007f58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	0f1b      	lsrs	r3, r3, #28
 8007f0c:	2b09      	cmp	r3, #9
 8007f0e:	d80b      	bhi.n	8007f28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	0f1b      	lsrs	r3, r3, #28
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	440b      	add	r3, r1
 8007f20:	3230      	adds	r2, #48	@ 0x30
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	e00a      	b.n	8007f3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	0f1b      	lsrs	r3, r3, #28
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	4619      	mov	r1, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	440b      	add	r3, r1
 8007f38:	3237      	adds	r2, #55	@ 0x37
 8007f3a:	b2d2      	uxtb	r2, r2
 8007f3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	3301      	adds	r3, #1
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	3301      	adds	r3, #1
 8007f56:	75fb      	strb	r3, [r7, #23]
 8007f58:	7dfa      	ldrb	r2, [r7, #23]
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d3d3      	bcc.n	8007f08 <IntToUnicode+0x18>
  }
}
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08a      	sub	sp, #40	@ 0x28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f78:	f107 0314 	add.w	r3, r7, #20
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	605a      	str	r2, [r3, #4]
 8007f82:	609a      	str	r2, [r3, #8]
 8007f84:	60da      	str	r2, [r3, #12]
 8007f86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8008000 <HAL_PCD_MspInit+0x90>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d131      	bne.n	8007ff6 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f92:	4b1c      	ldr	r3, [pc, #112]	@ (8008004 <HAL_PCD_MspInit+0x94>)
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	4a1b      	ldr	r2, [pc, #108]	@ (8008004 <HAL_PCD_MspInit+0x94>)
 8007f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f9c:	6153      	str	r3, [r2, #20]
 8007f9e:	4b19      	ldr	r3, [pc, #100]	@ (8008004 <HAL_PCD_MspInit+0x94>)
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fa6:	613b      	str	r3, [r7, #16]
 8007fa8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8007faa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8007fbc:	230e      	movs	r3, #14
 8007fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007fca:	f7f8 fd9d 	bl	8000b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <HAL_PCD_MspInit+0x94>)
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8008004 <HAL_PCD_MspInit+0x94>)
 8007fd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007fd8:	61d3      	str	r3, [r2, #28]
 8007fda:	4b0a      	ldr	r3, [pc, #40]	@ (8008004 <HAL_PCD_MspInit+0x94>)
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2100      	movs	r1, #0
 8007fea:	2014      	movs	r0, #20
 8007fec:	f7f8 fd55 	bl	8000a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8007ff0:	2014      	movs	r0, #20
 8007ff2:	f7f8 fd6e 	bl	8000ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007ff6:	bf00      	nop
 8007ff8:	3728      	adds	r7, #40	@ 0x28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	40005c00 	.word	0x40005c00
 8008004:	40021000 	.word	0x40021000

08008008 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800801c:	4619      	mov	r1, r3
 800801e:	4610      	mov	r0, r2
 8008020:	f7fe fb48 	bl	80066b4 <USBD_LL_SetupStage>
}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	440b      	add	r3, r1
 800804c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	78fb      	ldrb	r3, [r7, #3]
 8008054:	4619      	mov	r1, r3
 8008056:	f7fe fb7a 	bl	800674e <USBD_LL_DataOutStage>
}
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	440b      	add	r3, r1
 8008082:	3324      	adds	r3, #36	@ 0x24
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	4619      	mov	r1, r3
 800808a:	f7fe fbd1 	bl	8006830 <USBD_LL_DataInStage>
}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe fce4 	bl	8006a72 <USBD_LL_SOF>
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080ba:	2301      	movs	r3, #1
 80080bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	795b      	ldrb	r3, [r3, #5]
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d001      	beq.n	80080ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80080c6:	f7f8 fa4b 	bl	8000560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80080d0:	7bfa      	ldrb	r2, [r7, #15]
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe fc91 	bl	80069fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe fc4a 	bl	800697a <USBD_LL_Reset>
}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fc8c 	bl	8006a1c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	7a5b      	ldrb	r3, [r3, #9]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800810c:	4b04      	ldr	r3, [pc, #16]	@ (8008120 <HAL_PCD_SuspendCallback+0x30>)
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	4a03      	ldr	r2, [pc, #12]	@ (8008120 <HAL_PCD_SuspendCallback+0x30>)
 8008112:	f043 0306 	orr.w	r3, r3, #6
 8008116:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	e000ed00 	.word	0xe000ed00

08008124 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008132:	4618      	mov	r0, r3
 8008134:	f7fe fc87 	bl	8006a46 <USBD_LL_Resume>
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008148:	4a28      	ldr	r2, [pc, #160]	@ (80081ec <USBD_LL_Init+0xac>)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a26      	ldr	r2, [pc, #152]	@ (80081ec <USBD_LL_Init+0xac>)
 8008154:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008158:	4b24      	ldr	r3, [pc, #144]	@ (80081ec <USBD_LL_Init+0xac>)
 800815a:	4a25      	ldr	r2, [pc, #148]	@ (80081f0 <USBD_LL_Init+0xb0>)
 800815c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800815e:	4b23      	ldr	r3, [pc, #140]	@ (80081ec <USBD_LL_Init+0xac>)
 8008160:	2208      	movs	r2, #8
 8008162:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008164:	4b21      	ldr	r3, [pc, #132]	@ (80081ec <USBD_LL_Init+0xac>)
 8008166:	2202      	movs	r2, #2
 8008168:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800816a:	4b20      	ldr	r3, [pc, #128]	@ (80081ec <USBD_LL_Init+0xac>)
 800816c:	2202      	movs	r2, #2
 800816e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008170:	4b1e      	ldr	r3, [pc, #120]	@ (80081ec <USBD_LL_Init+0xac>)
 8008172:	2200      	movs	r2, #0
 8008174:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008176:	4b1d      	ldr	r3, [pc, #116]	@ (80081ec <USBD_LL_Init+0xac>)
 8008178:	2200      	movs	r2, #0
 800817a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800817c:	481b      	ldr	r0, [pc, #108]	@ (80081ec <USBD_LL_Init+0xac>)
 800817e:	f7f8 ffa1 	bl	80010c4 <HAL_PCD_Init>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008188:	f7f8 f9ea 	bl	8000560 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008192:	2318      	movs	r3, #24
 8008194:	2200      	movs	r2, #0
 8008196:	2100      	movs	r1, #0
 8008198:	f7fa fbe6 	bl	8002968 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081a2:	2358      	movs	r3, #88	@ 0x58
 80081a4:	2200      	movs	r2, #0
 80081a6:	2180      	movs	r1, #128	@ 0x80
 80081a8:	f7fa fbde 	bl	8002968 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081b2:	23c0      	movs	r3, #192	@ 0xc0
 80081b4:	2200      	movs	r2, #0
 80081b6:	2181      	movs	r1, #129	@ 0x81
 80081b8:	f7fa fbd6 	bl	8002968 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80081c6:	2200      	movs	r2, #0
 80081c8:	2101      	movs	r1, #1
 80081ca:	f7fa fbcd 	bl	8002968 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80081d8:	2200      	movs	r2, #0
 80081da:	2182      	movs	r1, #130	@ 0x82
 80081dc:	f7fa fbc4 	bl	8002968 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20001040 	.word	0x20001040
 80081f0:	40005c00 	.word	0x40005c00

080081f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800820a:	4618      	mov	r0, r3
 800820c:	f7f9 f821 	bl	8001252 <HAL_PCD_Start>
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	4618      	mov	r0, r3
 8008218:	f000 f952 	bl	80084c0 <USBD_Get_USB_Status>
 800821c:	4603      	mov	r3, r0
 800821e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008220:	7bbb      	ldrb	r3, [r7, #14]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	4608      	mov	r0, r1
 8008234:	4611      	mov	r1, r2
 8008236:	461a      	mov	r2, r3
 8008238:	4603      	mov	r3, r0
 800823a:	70fb      	strb	r3, [r7, #3]
 800823c:	460b      	mov	r3, r1
 800823e:	70bb      	strb	r3, [r7, #2]
 8008240:	4613      	mov	r3, r2
 8008242:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008252:	78bb      	ldrb	r3, [r7, #2]
 8008254:	883a      	ldrh	r2, [r7, #0]
 8008256:	78f9      	ldrb	r1, [r7, #3]
 8008258:	f7f9 f919 	bl	800148e <HAL_PCD_EP_Open>
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f92c 	bl	80084c0 <USBD_Get_USB_Status>
 8008268:	4603      	mov	r3, r0
 800826a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800826c:	7bbb      	ldrb	r3, [r7, #14]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008290:	78fa      	ldrb	r2, [r7, #3]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f7f9 f957 	bl	8001548 <HAL_PCD_EP_Close>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f90d 	bl	80084c0 <USBD_Get_USB_Status>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082ce:	78fa      	ldrb	r2, [r7, #3]
 80082d0:	4611      	mov	r1, r2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7f9 fa00 	bl	80016d8 <HAL_PCD_EP_SetStall>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 f8ee 	bl	80084c0 <USBD_Get_USB_Status>
 80082e4:	4603      	mov	r3, r0
 80082e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b084      	sub	sp, #16
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800830c:	78fa      	ldrb	r2, [r7, #3]
 800830e:	4611      	mov	r1, r2
 8008310:	4618      	mov	r0, r3
 8008312:	f7f9 fa33 	bl	800177c <HAL_PCD_EP_ClrStall>
 8008316:	4603      	mov	r3, r0
 8008318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	4618      	mov	r0, r3
 800831e:	f000 f8cf 	bl	80084c0 <USBD_Get_USB_Status>
 8008322:	4603      	mov	r3, r0
 8008324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008326:	7bbb      	ldrb	r3, [r7, #14]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008342:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008348:	2b00      	cmp	r3, #0
 800834a:	da0b      	bge.n	8008364 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008352:	68f9      	ldr	r1, [r7, #12]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	440b      	add	r3, r1
 800835e:	3312      	adds	r3, #18
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	e00b      	b.n	800837c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800836a:	68f9      	ldr	r1, [r7, #12]
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	440b      	add	r3, r1
 8008376:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800837a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7f9 f84d 	bl	8001446 <HAL_PCD_SetAddress>
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 f884 	bl	80084c0 <USBD_Get_USB_Status>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b086      	sub	sp, #24
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	461a      	mov	r2, r3
 80083d2:	460b      	mov	r3, r1
 80083d4:	72fb      	strb	r3, [r7, #11]
 80083d6:	4613      	mov	r3, r2
 80083d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083e8:	893b      	ldrh	r3, [r7, #8]
 80083ea:	7af9      	ldrb	r1, [r7, #11]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	f7f9 f93c 	bl	800166a <HAL_PCD_EP_Transmit>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 f861 	bl	80084c0 <USBD_Get_USB_Status>
 80083fe:	4603      	mov	r3, r0
 8008400:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008402:	7dbb      	ldrb	r3, [r7, #22]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	607a      	str	r2, [r7, #4]
 8008416:	461a      	mov	r2, r3
 8008418:	460b      	mov	r3, r1
 800841a:	72fb      	strb	r3, [r7, #11]
 800841c:	4613      	mov	r3, r2
 800841e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800842e:	893b      	ldrh	r3, [r7, #8]
 8008430:	7af9      	ldrb	r1, [r7, #11]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	f7f9 f8d0 	bl	80015d8 <HAL_PCD_EP_Receive>
 8008438:	4603      	mov	r3, r0
 800843a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f83e 	bl	80084c0 <USBD_Get_USB_Status>
 8008444:	4603      	mov	r3, r0
 8008446:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008448:	7dbb      	ldrb	r3, [r7, #22]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	460b      	mov	r3, r1
 800845c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008464:	78fa      	ldrb	r2, [r7, #3]
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f7f9 f8e6 	bl	800163a <HAL_PCD_EP_GetRxCount>
 800846e:	4603      	mov	r3, r0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008480:	4b03      	ldr	r3, [pc, #12]	@ (8008490 <USBD_static_malloc+0x18>)
}
 8008482:	4618      	mov	r0, r3
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	20001314 	.word	0x20001314

08008494 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084ce:	79fb      	ldrb	r3, [r7, #7]
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d817      	bhi.n	8008504 <USBD_Get_USB_Status+0x44>
 80084d4:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <USBD_Get_USB_Status+0x1c>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	080084ed 	.word	0x080084ed
 80084e0:	080084f3 	.word	0x080084f3
 80084e4:	080084f9 	.word	0x080084f9
 80084e8:	080084ff 	.word	0x080084ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73fb      	strb	r3, [r7, #15]
    break;
 80084f0:	e00b      	b.n	800850a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084f2:	2302      	movs	r3, #2
 80084f4:	73fb      	strb	r3, [r7, #15]
    break;
 80084f6:	e008      	b.n	800850a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084f8:	2301      	movs	r3, #1
 80084fa:	73fb      	strb	r3, [r7, #15]
    break;
 80084fc:	e005      	b.n	800850a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084fe:	2302      	movs	r3, #2
 8008500:	73fb      	strb	r3, [r7, #15]
    break;
 8008502:	e002      	b.n	800850a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008504:	2302      	movs	r3, #2
 8008506:	73fb      	strb	r3, [r7, #15]
    break;
 8008508:	bf00      	nop
  }
  return usb_status;
 800850a:	7bfb      	ldrb	r3, [r7, #15]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <atoi>:
 8008518:	220a      	movs	r2, #10
 800851a:	2100      	movs	r1, #0
 800851c:	f000 b87a 	b.w	8008614 <strtol>

08008520 <_strtol_l.constprop.0>:
 8008520:	2b24      	cmp	r3, #36	@ 0x24
 8008522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008526:	4686      	mov	lr, r0
 8008528:	4690      	mov	r8, r2
 800852a:	d801      	bhi.n	8008530 <_strtol_l.constprop.0+0x10>
 800852c:	2b01      	cmp	r3, #1
 800852e:	d106      	bne.n	800853e <_strtol_l.constprop.0+0x1e>
 8008530:	f000 f8b0 	bl	8008694 <__errno>
 8008534:	2316      	movs	r3, #22
 8008536:	6003      	str	r3, [r0, #0]
 8008538:	2000      	movs	r0, #0
 800853a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853e:	4834      	ldr	r0, [pc, #208]	@ (8008610 <_strtol_l.constprop.0+0xf0>)
 8008540:	460d      	mov	r5, r1
 8008542:	462a      	mov	r2, r5
 8008544:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008548:	5d06      	ldrb	r6, [r0, r4]
 800854a:	f016 0608 	ands.w	r6, r6, #8
 800854e:	d1f8      	bne.n	8008542 <_strtol_l.constprop.0+0x22>
 8008550:	2c2d      	cmp	r4, #45	@ 0x2d
 8008552:	d12d      	bne.n	80085b0 <_strtol_l.constprop.0+0x90>
 8008554:	782c      	ldrb	r4, [r5, #0]
 8008556:	2601      	movs	r6, #1
 8008558:	1c95      	adds	r5, r2, #2
 800855a:	f033 0210 	bics.w	r2, r3, #16
 800855e:	d109      	bne.n	8008574 <_strtol_l.constprop.0+0x54>
 8008560:	2c30      	cmp	r4, #48	@ 0x30
 8008562:	d12a      	bne.n	80085ba <_strtol_l.constprop.0+0x9a>
 8008564:	782a      	ldrb	r2, [r5, #0]
 8008566:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800856a:	2a58      	cmp	r2, #88	@ 0x58
 800856c:	d125      	bne.n	80085ba <_strtol_l.constprop.0+0x9a>
 800856e:	786c      	ldrb	r4, [r5, #1]
 8008570:	2310      	movs	r3, #16
 8008572:	3502      	adds	r5, #2
 8008574:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008578:	f10c 3cff 	add.w	ip, ip, #4294967295
 800857c:	2200      	movs	r2, #0
 800857e:	fbbc f9f3 	udiv	r9, ip, r3
 8008582:	4610      	mov	r0, r2
 8008584:	fb03 ca19 	mls	sl, r3, r9, ip
 8008588:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800858c:	2f09      	cmp	r7, #9
 800858e:	d81b      	bhi.n	80085c8 <_strtol_l.constprop.0+0xa8>
 8008590:	463c      	mov	r4, r7
 8008592:	42a3      	cmp	r3, r4
 8008594:	dd27      	ble.n	80085e6 <_strtol_l.constprop.0+0xc6>
 8008596:	1c57      	adds	r7, r2, #1
 8008598:	d007      	beq.n	80085aa <_strtol_l.constprop.0+0x8a>
 800859a:	4581      	cmp	r9, r0
 800859c:	d320      	bcc.n	80085e0 <_strtol_l.constprop.0+0xc0>
 800859e:	d101      	bne.n	80085a4 <_strtol_l.constprop.0+0x84>
 80085a0:	45a2      	cmp	sl, r4
 80085a2:	db1d      	blt.n	80085e0 <_strtol_l.constprop.0+0xc0>
 80085a4:	fb00 4003 	mla	r0, r0, r3, r4
 80085a8:	2201      	movs	r2, #1
 80085aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085ae:	e7eb      	b.n	8008588 <_strtol_l.constprop.0+0x68>
 80085b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80085b2:	bf04      	itt	eq
 80085b4:	782c      	ldrbeq	r4, [r5, #0]
 80085b6:	1c95      	addeq	r5, r2, #2
 80085b8:	e7cf      	b.n	800855a <_strtol_l.constprop.0+0x3a>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1da      	bne.n	8008574 <_strtol_l.constprop.0+0x54>
 80085be:	2c30      	cmp	r4, #48	@ 0x30
 80085c0:	bf0c      	ite	eq
 80085c2:	2308      	moveq	r3, #8
 80085c4:	230a      	movne	r3, #10
 80085c6:	e7d5      	b.n	8008574 <_strtol_l.constprop.0+0x54>
 80085c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80085cc:	2f19      	cmp	r7, #25
 80085ce:	d801      	bhi.n	80085d4 <_strtol_l.constprop.0+0xb4>
 80085d0:	3c37      	subs	r4, #55	@ 0x37
 80085d2:	e7de      	b.n	8008592 <_strtol_l.constprop.0+0x72>
 80085d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80085d8:	2f19      	cmp	r7, #25
 80085da:	d804      	bhi.n	80085e6 <_strtol_l.constprop.0+0xc6>
 80085dc:	3c57      	subs	r4, #87	@ 0x57
 80085de:	e7d8      	b.n	8008592 <_strtol_l.constprop.0+0x72>
 80085e0:	f04f 32ff 	mov.w	r2, #4294967295
 80085e4:	e7e1      	b.n	80085aa <_strtol_l.constprop.0+0x8a>
 80085e6:	1c53      	adds	r3, r2, #1
 80085e8:	d108      	bne.n	80085fc <_strtol_l.constprop.0+0xdc>
 80085ea:	2322      	movs	r3, #34	@ 0x22
 80085ec:	f8ce 3000 	str.w	r3, [lr]
 80085f0:	4660      	mov	r0, ip
 80085f2:	f1b8 0f00 	cmp.w	r8, #0
 80085f6:	d0a0      	beq.n	800853a <_strtol_l.constprop.0+0x1a>
 80085f8:	1e69      	subs	r1, r5, #1
 80085fa:	e006      	b.n	800860a <_strtol_l.constprop.0+0xea>
 80085fc:	b106      	cbz	r6, 8008600 <_strtol_l.constprop.0+0xe0>
 80085fe:	4240      	negs	r0, r0
 8008600:	f1b8 0f00 	cmp.w	r8, #0
 8008604:	d099      	beq.n	800853a <_strtol_l.constprop.0+0x1a>
 8008606:	2a00      	cmp	r2, #0
 8008608:	d1f6      	bne.n	80085f8 <_strtol_l.constprop.0+0xd8>
 800860a:	f8c8 1000 	str.w	r1, [r8]
 800860e:	e794      	b.n	800853a <_strtol_l.constprop.0+0x1a>
 8008610:	08009039 	.word	0x08009039

08008614 <strtol>:
 8008614:	4613      	mov	r3, r2
 8008616:	460a      	mov	r2, r1
 8008618:	4601      	mov	r1, r0
 800861a:	4802      	ldr	r0, [pc, #8]	@ (8008624 <strtol+0x10>)
 800861c:	6800      	ldr	r0, [r0, #0]
 800861e:	f7ff bf7f 	b.w	8008520 <_strtol_l.constprop.0>
 8008622:	bf00      	nop
 8008624:	2000023c 	.word	0x2000023c

08008628 <siprintf>:
 8008628:	b40e      	push	{r1, r2, r3}
 800862a:	b500      	push	{lr}
 800862c:	b09c      	sub	sp, #112	@ 0x70
 800862e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008630:	9002      	str	r0, [sp, #8]
 8008632:	9006      	str	r0, [sp, #24]
 8008634:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008638:	4809      	ldr	r0, [pc, #36]	@ (8008660 <siprintf+0x38>)
 800863a:	9107      	str	r1, [sp, #28]
 800863c:	9104      	str	r1, [sp, #16]
 800863e:	4909      	ldr	r1, [pc, #36]	@ (8008664 <siprintf+0x3c>)
 8008640:	f853 2b04 	ldr.w	r2, [r3], #4
 8008644:	9105      	str	r1, [sp, #20]
 8008646:	6800      	ldr	r0, [r0, #0]
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	a902      	add	r1, sp, #8
 800864c:	f000 f9a2 	bl	8008994 <_svfiprintf_r>
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	2200      	movs	r2, #0
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	b01c      	add	sp, #112	@ 0x70
 8008658:	f85d eb04 	ldr.w	lr, [sp], #4
 800865c:	b003      	add	sp, #12
 800865e:	4770      	bx	lr
 8008660:	2000023c 	.word	0x2000023c
 8008664:	ffff0208 	.word	0xffff0208

08008668 <memset>:
 8008668:	4402      	add	r2, r0
 800866a:	4603      	mov	r3, r0
 800866c:	4293      	cmp	r3, r2
 800866e:	d100      	bne.n	8008672 <memset+0xa>
 8008670:	4770      	bx	lr
 8008672:	f803 1b01 	strb.w	r1, [r3], #1
 8008676:	e7f9      	b.n	800866c <memset+0x4>

08008678 <strchr>:
 8008678:	b2c9      	uxtb	r1, r1
 800867a:	4603      	mov	r3, r0
 800867c:	4618      	mov	r0, r3
 800867e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008682:	b112      	cbz	r2, 800868a <strchr+0x12>
 8008684:	428a      	cmp	r2, r1
 8008686:	d1f9      	bne.n	800867c <strchr+0x4>
 8008688:	4770      	bx	lr
 800868a:	2900      	cmp	r1, #0
 800868c:	bf18      	it	ne
 800868e:	2000      	movne	r0, #0
 8008690:	4770      	bx	lr
	...

08008694 <__errno>:
 8008694:	4b01      	ldr	r3, [pc, #4]	@ (800869c <__errno+0x8>)
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	2000023c 	.word	0x2000023c

080086a0 <__libc_init_array>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	4d0d      	ldr	r5, [pc, #52]	@ (80086d8 <__libc_init_array+0x38>)
 80086a4:	4c0d      	ldr	r4, [pc, #52]	@ (80086dc <__libc_init_array+0x3c>)
 80086a6:	1b64      	subs	r4, r4, r5
 80086a8:	10a4      	asrs	r4, r4, #2
 80086aa:	2600      	movs	r6, #0
 80086ac:	42a6      	cmp	r6, r4
 80086ae:	d109      	bne.n	80086c4 <__libc_init_array+0x24>
 80086b0:	4d0b      	ldr	r5, [pc, #44]	@ (80086e0 <__libc_init_array+0x40>)
 80086b2:	4c0c      	ldr	r4, [pc, #48]	@ (80086e4 <__libc_init_array+0x44>)
 80086b4:	f000 fc66 	bl	8008f84 <_init>
 80086b8:	1b64      	subs	r4, r4, r5
 80086ba:	10a4      	asrs	r4, r4, #2
 80086bc:	2600      	movs	r6, #0
 80086be:	42a6      	cmp	r6, r4
 80086c0:	d105      	bne.n	80086ce <__libc_init_array+0x2e>
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c8:	4798      	blx	r3
 80086ca:	3601      	adds	r6, #1
 80086cc:	e7ee      	b.n	80086ac <__libc_init_array+0xc>
 80086ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d2:	4798      	blx	r3
 80086d4:	3601      	adds	r6, #1
 80086d6:	e7f2      	b.n	80086be <__libc_init_array+0x1e>
 80086d8:	08009174 	.word	0x08009174
 80086dc:	08009174 	.word	0x08009174
 80086e0:	08009174 	.word	0x08009174
 80086e4:	08009178 	.word	0x08009178

080086e8 <__retarget_lock_acquire_recursive>:
 80086e8:	4770      	bx	lr

080086ea <__retarget_lock_release_recursive>:
 80086ea:	4770      	bx	lr

080086ec <_free_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4605      	mov	r5, r0
 80086f0:	2900      	cmp	r1, #0
 80086f2:	d041      	beq.n	8008778 <_free_r+0x8c>
 80086f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f8:	1f0c      	subs	r4, r1, #4
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bfb8      	it	lt
 80086fe:	18e4      	addlt	r4, r4, r3
 8008700:	f000 f8e0 	bl	80088c4 <__malloc_lock>
 8008704:	4a1d      	ldr	r2, [pc, #116]	@ (800877c <_free_r+0x90>)
 8008706:	6813      	ldr	r3, [r2, #0]
 8008708:	b933      	cbnz	r3, 8008718 <_free_r+0x2c>
 800870a:	6063      	str	r3, [r4, #4]
 800870c:	6014      	str	r4, [r2, #0]
 800870e:	4628      	mov	r0, r5
 8008710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008714:	f000 b8dc 	b.w	80088d0 <__malloc_unlock>
 8008718:	42a3      	cmp	r3, r4
 800871a:	d908      	bls.n	800872e <_free_r+0x42>
 800871c:	6820      	ldr	r0, [r4, #0]
 800871e:	1821      	adds	r1, r4, r0
 8008720:	428b      	cmp	r3, r1
 8008722:	bf01      	itttt	eq
 8008724:	6819      	ldreq	r1, [r3, #0]
 8008726:	685b      	ldreq	r3, [r3, #4]
 8008728:	1809      	addeq	r1, r1, r0
 800872a:	6021      	streq	r1, [r4, #0]
 800872c:	e7ed      	b.n	800870a <_free_r+0x1e>
 800872e:	461a      	mov	r2, r3
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	b10b      	cbz	r3, 8008738 <_free_r+0x4c>
 8008734:	42a3      	cmp	r3, r4
 8008736:	d9fa      	bls.n	800872e <_free_r+0x42>
 8008738:	6811      	ldr	r1, [r2, #0]
 800873a:	1850      	adds	r0, r2, r1
 800873c:	42a0      	cmp	r0, r4
 800873e:	d10b      	bne.n	8008758 <_free_r+0x6c>
 8008740:	6820      	ldr	r0, [r4, #0]
 8008742:	4401      	add	r1, r0
 8008744:	1850      	adds	r0, r2, r1
 8008746:	4283      	cmp	r3, r0
 8008748:	6011      	str	r1, [r2, #0]
 800874a:	d1e0      	bne.n	800870e <_free_r+0x22>
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	6053      	str	r3, [r2, #4]
 8008752:	4408      	add	r0, r1
 8008754:	6010      	str	r0, [r2, #0]
 8008756:	e7da      	b.n	800870e <_free_r+0x22>
 8008758:	d902      	bls.n	8008760 <_free_r+0x74>
 800875a:	230c      	movs	r3, #12
 800875c:	602b      	str	r3, [r5, #0]
 800875e:	e7d6      	b.n	800870e <_free_r+0x22>
 8008760:	6820      	ldr	r0, [r4, #0]
 8008762:	1821      	adds	r1, r4, r0
 8008764:	428b      	cmp	r3, r1
 8008766:	bf04      	itt	eq
 8008768:	6819      	ldreq	r1, [r3, #0]
 800876a:	685b      	ldreq	r3, [r3, #4]
 800876c:	6063      	str	r3, [r4, #4]
 800876e:	bf04      	itt	eq
 8008770:	1809      	addeq	r1, r1, r0
 8008772:	6021      	streq	r1, [r4, #0]
 8008774:	6054      	str	r4, [r2, #4]
 8008776:	e7ca      	b.n	800870e <_free_r+0x22>
 8008778:	bd38      	pop	{r3, r4, r5, pc}
 800877a:	bf00      	nop
 800877c:	20001678 	.word	0x20001678

08008780 <sbrk_aligned>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	4e0f      	ldr	r6, [pc, #60]	@ (80087c0 <sbrk_aligned+0x40>)
 8008784:	460c      	mov	r4, r1
 8008786:	6831      	ldr	r1, [r6, #0]
 8008788:	4605      	mov	r5, r0
 800878a:	b911      	cbnz	r1, 8008792 <sbrk_aligned+0x12>
 800878c:	f000 fba6 	bl	8008edc <_sbrk_r>
 8008790:	6030      	str	r0, [r6, #0]
 8008792:	4621      	mov	r1, r4
 8008794:	4628      	mov	r0, r5
 8008796:	f000 fba1 	bl	8008edc <_sbrk_r>
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	d103      	bne.n	80087a6 <sbrk_aligned+0x26>
 800879e:	f04f 34ff 	mov.w	r4, #4294967295
 80087a2:	4620      	mov	r0, r4
 80087a4:	bd70      	pop	{r4, r5, r6, pc}
 80087a6:	1cc4      	adds	r4, r0, #3
 80087a8:	f024 0403 	bic.w	r4, r4, #3
 80087ac:	42a0      	cmp	r0, r4
 80087ae:	d0f8      	beq.n	80087a2 <sbrk_aligned+0x22>
 80087b0:	1a21      	subs	r1, r4, r0
 80087b2:	4628      	mov	r0, r5
 80087b4:	f000 fb92 	bl	8008edc <_sbrk_r>
 80087b8:	3001      	adds	r0, #1
 80087ba:	d1f2      	bne.n	80087a2 <sbrk_aligned+0x22>
 80087bc:	e7ef      	b.n	800879e <sbrk_aligned+0x1e>
 80087be:	bf00      	nop
 80087c0:	20001674 	.word	0x20001674

080087c4 <_malloc_r>:
 80087c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087c8:	1ccd      	adds	r5, r1, #3
 80087ca:	f025 0503 	bic.w	r5, r5, #3
 80087ce:	3508      	adds	r5, #8
 80087d0:	2d0c      	cmp	r5, #12
 80087d2:	bf38      	it	cc
 80087d4:	250c      	movcc	r5, #12
 80087d6:	2d00      	cmp	r5, #0
 80087d8:	4606      	mov	r6, r0
 80087da:	db01      	blt.n	80087e0 <_malloc_r+0x1c>
 80087dc:	42a9      	cmp	r1, r5
 80087de:	d904      	bls.n	80087ea <_malloc_r+0x26>
 80087e0:	230c      	movs	r3, #12
 80087e2:	6033      	str	r3, [r6, #0]
 80087e4:	2000      	movs	r0, #0
 80087e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088c0 <_malloc_r+0xfc>
 80087ee:	f000 f869 	bl	80088c4 <__malloc_lock>
 80087f2:	f8d8 3000 	ldr.w	r3, [r8]
 80087f6:	461c      	mov	r4, r3
 80087f8:	bb44      	cbnz	r4, 800884c <_malloc_r+0x88>
 80087fa:	4629      	mov	r1, r5
 80087fc:	4630      	mov	r0, r6
 80087fe:	f7ff ffbf 	bl	8008780 <sbrk_aligned>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	4604      	mov	r4, r0
 8008806:	d158      	bne.n	80088ba <_malloc_r+0xf6>
 8008808:	f8d8 4000 	ldr.w	r4, [r8]
 800880c:	4627      	mov	r7, r4
 800880e:	2f00      	cmp	r7, #0
 8008810:	d143      	bne.n	800889a <_malloc_r+0xd6>
 8008812:	2c00      	cmp	r4, #0
 8008814:	d04b      	beq.n	80088ae <_malloc_r+0xea>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	4639      	mov	r1, r7
 800881a:	4630      	mov	r0, r6
 800881c:	eb04 0903 	add.w	r9, r4, r3
 8008820:	f000 fb5c 	bl	8008edc <_sbrk_r>
 8008824:	4581      	cmp	r9, r0
 8008826:	d142      	bne.n	80088ae <_malloc_r+0xea>
 8008828:	6821      	ldr	r1, [r4, #0]
 800882a:	1a6d      	subs	r5, r5, r1
 800882c:	4629      	mov	r1, r5
 800882e:	4630      	mov	r0, r6
 8008830:	f7ff ffa6 	bl	8008780 <sbrk_aligned>
 8008834:	3001      	adds	r0, #1
 8008836:	d03a      	beq.n	80088ae <_malloc_r+0xea>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	442b      	add	r3, r5
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	f8d8 3000 	ldr.w	r3, [r8]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	bb62      	cbnz	r2, 80088a0 <_malloc_r+0xdc>
 8008846:	f8c8 7000 	str.w	r7, [r8]
 800884a:	e00f      	b.n	800886c <_malloc_r+0xa8>
 800884c:	6822      	ldr	r2, [r4, #0]
 800884e:	1b52      	subs	r2, r2, r5
 8008850:	d420      	bmi.n	8008894 <_malloc_r+0xd0>
 8008852:	2a0b      	cmp	r2, #11
 8008854:	d917      	bls.n	8008886 <_malloc_r+0xc2>
 8008856:	1961      	adds	r1, r4, r5
 8008858:	42a3      	cmp	r3, r4
 800885a:	6025      	str	r5, [r4, #0]
 800885c:	bf18      	it	ne
 800885e:	6059      	strne	r1, [r3, #4]
 8008860:	6863      	ldr	r3, [r4, #4]
 8008862:	bf08      	it	eq
 8008864:	f8c8 1000 	streq.w	r1, [r8]
 8008868:	5162      	str	r2, [r4, r5]
 800886a:	604b      	str	r3, [r1, #4]
 800886c:	4630      	mov	r0, r6
 800886e:	f000 f82f 	bl	80088d0 <__malloc_unlock>
 8008872:	f104 000b 	add.w	r0, r4, #11
 8008876:	1d23      	adds	r3, r4, #4
 8008878:	f020 0007 	bic.w	r0, r0, #7
 800887c:	1ac2      	subs	r2, r0, r3
 800887e:	bf1c      	itt	ne
 8008880:	1a1b      	subne	r3, r3, r0
 8008882:	50a3      	strne	r3, [r4, r2]
 8008884:	e7af      	b.n	80087e6 <_malloc_r+0x22>
 8008886:	6862      	ldr	r2, [r4, #4]
 8008888:	42a3      	cmp	r3, r4
 800888a:	bf0c      	ite	eq
 800888c:	f8c8 2000 	streq.w	r2, [r8]
 8008890:	605a      	strne	r2, [r3, #4]
 8008892:	e7eb      	b.n	800886c <_malloc_r+0xa8>
 8008894:	4623      	mov	r3, r4
 8008896:	6864      	ldr	r4, [r4, #4]
 8008898:	e7ae      	b.n	80087f8 <_malloc_r+0x34>
 800889a:	463c      	mov	r4, r7
 800889c:	687f      	ldr	r7, [r7, #4]
 800889e:	e7b6      	b.n	800880e <_malloc_r+0x4a>
 80088a0:	461a      	mov	r2, r3
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	d1fb      	bne.n	80088a0 <_malloc_r+0xdc>
 80088a8:	2300      	movs	r3, #0
 80088aa:	6053      	str	r3, [r2, #4]
 80088ac:	e7de      	b.n	800886c <_malloc_r+0xa8>
 80088ae:	230c      	movs	r3, #12
 80088b0:	6033      	str	r3, [r6, #0]
 80088b2:	4630      	mov	r0, r6
 80088b4:	f000 f80c 	bl	80088d0 <__malloc_unlock>
 80088b8:	e794      	b.n	80087e4 <_malloc_r+0x20>
 80088ba:	6005      	str	r5, [r0, #0]
 80088bc:	e7d6      	b.n	800886c <_malloc_r+0xa8>
 80088be:	bf00      	nop
 80088c0:	20001678 	.word	0x20001678

080088c4 <__malloc_lock>:
 80088c4:	4801      	ldr	r0, [pc, #4]	@ (80088cc <__malloc_lock+0x8>)
 80088c6:	f7ff bf0f 	b.w	80086e8 <__retarget_lock_acquire_recursive>
 80088ca:	bf00      	nop
 80088cc:	20001670 	.word	0x20001670

080088d0 <__malloc_unlock>:
 80088d0:	4801      	ldr	r0, [pc, #4]	@ (80088d8 <__malloc_unlock+0x8>)
 80088d2:	f7ff bf0a 	b.w	80086ea <__retarget_lock_release_recursive>
 80088d6:	bf00      	nop
 80088d8:	20001670 	.word	0x20001670

080088dc <__ssputs_r>:
 80088dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e0:	688e      	ldr	r6, [r1, #8]
 80088e2:	461f      	mov	r7, r3
 80088e4:	42be      	cmp	r6, r7
 80088e6:	680b      	ldr	r3, [r1, #0]
 80088e8:	4682      	mov	sl, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	4690      	mov	r8, r2
 80088ee:	d82d      	bhi.n	800894c <__ssputs_r+0x70>
 80088f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088f8:	d026      	beq.n	8008948 <__ssputs_r+0x6c>
 80088fa:	6965      	ldr	r5, [r4, #20]
 80088fc:	6909      	ldr	r1, [r1, #16]
 80088fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008902:	eba3 0901 	sub.w	r9, r3, r1
 8008906:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800890a:	1c7b      	adds	r3, r7, #1
 800890c:	444b      	add	r3, r9
 800890e:	106d      	asrs	r5, r5, #1
 8008910:	429d      	cmp	r5, r3
 8008912:	bf38      	it	cc
 8008914:	461d      	movcc	r5, r3
 8008916:	0553      	lsls	r3, r2, #21
 8008918:	d527      	bpl.n	800896a <__ssputs_r+0x8e>
 800891a:	4629      	mov	r1, r5
 800891c:	f7ff ff52 	bl	80087c4 <_malloc_r>
 8008920:	4606      	mov	r6, r0
 8008922:	b360      	cbz	r0, 800897e <__ssputs_r+0xa2>
 8008924:	6921      	ldr	r1, [r4, #16]
 8008926:	464a      	mov	r2, r9
 8008928:	f000 fae8 	bl	8008efc <memcpy>
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008936:	81a3      	strh	r3, [r4, #12]
 8008938:	6126      	str	r6, [r4, #16]
 800893a:	6165      	str	r5, [r4, #20]
 800893c:	444e      	add	r6, r9
 800893e:	eba5 0509 	sub.w	r5, r5, r9
 8008942:	6026      	str	r6, [r4, #0]
 8008944:	60a5      	str	r5, [r4, #8]
 8008946:	463e      	mov	r6, r7
 8008948:	42be      	cmp	r6, r7
 800894a:	d900      	bls.n	800894e <__ssputs_r+0x72>
 800894c:	463e      	mov	r6, r7
 800894e:	6820      	ldr	r0, [r4, #0]
 8008950:	4632      	mov	r2, r6
 8008952:	4641      	mov	r1, r8
 8008954:	f000 faa8 	bl	8008ea8 <memmove>
 8008958:	68a3      	ldr	r3, [r4, #8]
 800895a:	1b9b      	subs	r3, r3, r6
 800895c:	60a3      	str	r3, [r4, #8]
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	4433      	add	r3, r6
 8008962:	6023      	str	r3, [r4, #0]
 8008964:	2000      	movs	r0, #0
 8008966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896a:	462a      	mov	r2, r5
 800896c:	f000 fad4 	bl	8008f18 <_realloc_r>
 8008970:	4606      	mov	r6, r0
 8008972:	2800      	cmp	r0, #0
 8008974:	d1e0      	bne.n	8008938 <__ssputs_r+0x5c>
 8008976:	6921      	ldr	r1, [r4, #16]
 8008978:	4650      	mov	r0, sl
 800897a:	f7ff feb7 	bl	80086ec <_free_r>
 800897e:	230c      	movs	r3, #12
 8008980:	f8ca 3000 	str.w	r3, [sl]
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	e7e9      	b.n	8008966 <__ssputs_r+0x8a>
	...

08008994 <_svfiprintf_r>:
 8008994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008998:	4698      	mov	r8, r3
 800899a:	898b      	ldrh	r3, [r1, #12]
 800899c:	061b      	lsls	r3, r3, #24
 800899e:	b09d      	sub	sp, #116	@ 0x74
 80089a0:	4607      	mov	r7, r0
 80089a2:	460d      	mov	r5, r1
 80089a4:	4614      	mov	r4, r2
 80089a6:	d510      	bpl.n	80089ca <_svfiprintf_r+0x36>
 80089a8:	690b      	ldr	r3, [r1, #16]
 80089aa:	b973      	cbnz	r3, 80089ca <_svfiprintf_r+0x36>
 80089ac:	2140      	movs	r1, #64	@ 0x40
 80089ae:	f7ff ff09 	bl	80087c4 <_malloc_r>
 80089b2:	6028      	str	r0, [r5, #0]
 80089b4:	6128      	str	r0, [r5, #16]
 80089b6:	b930      	cbnz	r0, 80089c6 <_svfiprintf_r+0x32>
 80089b8:	230c      	movs	r3, #12
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	b01d      	add	sp, #116	@ 0x74
 80089c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c6:	2340      	movs	r3, #64	@ 0x40
 80089c8:	616b      	str	r3, [r5, #20]
 80089ca:	2300      	movs	r3, #0
 80089cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089ce:	2320      	movs	r3, #32
 80089d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80089d8:	2330      	movs	r3, #48	@ 0x30
 80089da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b78 <_svfiprintf_r+0x1e4>
 80089de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089e2:	f04f 0901 	mov.w	r9, #1
 80089e6:	4623      	mov	r3, r4
 80089e8:	469a      	mov	sl, r3
 80089ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ee:	b10a      	cbz	r2, 80089f4 <_svfiprintf_r+0x60>
 80089f0:	2a25      	cmp	r2, #37	@ 0x25
 80089f2:	d1f9      	bne.n	80089e8 <_svfiprintf_r+0x54>
 80089f4:	ebba 0b04 	subs.w	fp, sl, r4
 80089f8:	d00b      	beq.n	8008a12 <_svfiprintf_r+0x7e>
 80089fa:	465b      	mov	r3, fp
 80089fc:	4622      	mov	r2, r4
 80089fe:	4629      	mov	r1, r5
 8008a00:	4638      	mov	r0, r7
 8008a02:	f7ff ff6b 	bl	80088dc <__ssputs_r>
 8008a06:	3001      	adds	r0, #1
 8008a08:	f000 80a7 	beq.w	8008b5a <_svfiprintf_r+0x1c6>
 8008a0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a0e:	445a      	add	r2, fp
 8008a10:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a12:	f89a 3000 	ldrb.w	r3, [sl]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 809f 	beq.w	8008b5a <_svfiprintf_r+0x1c6>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a26:	f10a 0a01 	add.w	sl, sl, #1
 8008a2a:	9304      	str	r3, [sp, #16]
 8008a2c:	9307      	str	r3, [sp, #28]
 8008a2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a32:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a34:	4654      	mov	r4, sl
 8008a36:	2205      	movs	r2, #5
 8008a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3c:	484e      	ldr	r0, [pc, #312]	@ (8008b78 <_svfiprintf_r+0x1e4>)
 8008a3e:	f7f7 fbcf 	bl	80001e0 <memchr>
 8008a42:	9a04      	ldr	r2, [sp, #16]
 8008a44:	b9d8      	cbnz	r0, 8008a7e <_svfiprintf_r+0xea>
 8008a46:	06d0      	lsls	r0, r2, #27
 8008a48:	bf44      	itt	mi
 8008a4a:	2320      	movmi	r3, #32
 8008a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a50:	0711      	lsls	r1, r2, #28
 8008a52:	bf44      	itt	mi
 8008a54:	232b      	movmi	r3, #43	@ 0x2b
 8008a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a60:	d015      	beq.n	8008a8e <_svfiprintf_r+0xfa>
 8008a62:	9a07      	ldr	r2, [sp, #28]
 8008a64:	4654      	mov	r4, sl
 8008a66:	2000      	movs	r0, #0
 8008a68:	f04f 0c0a 	mov.w	ip, #10
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a72:	3b30      	subs	r3, #48	@ 0x30
 8008a74:	2b09      	cmp	r3, #9
 8008a76:	d94b      	bls.n	8008b10 <_svfiprintf_r+0x17c>
 8008a78:	b1b0      	cbz	r0, 8008aa8 <_svfiprintf_r+0x114>
 8008a7a:	9207      	str	r2, [sp, #28]
 8008a7c:	e014      	b.n	8008aa8 <_svfiprintf_r+0x114>
 8008a7e:	eba0 0308 	sub.w	r3, r0, r8
 8008a82:	fa09 f303 	lsl.w	r3, r9, r3
 8008a86:	4313      	orrs	r3, r2
 8008a88:	9304      	str	r3, [sp, #16]
 8008a8a:	46a2      	mov	sl, r4
 8008a8c:	e7d2      	b.n	8008a34 <_svfiprintf_r+0xa0>
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	1d19      	adds	r1, r3, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	9103      	str	r1, [sp, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bfbb      	ittet	lt
 8008a9a:	425b      	neglt	r3, r3
 8008a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa0:	9307      	strge	r3, [sp, #28]
 8008aa2:	9307      	strlt	r3, [sp, #28]
 8008aa4:	bfb8      	it	lt
 8008aa6:	9204      	strlt	r2, [sp, #16]
 8008aa8:	7823      	ldrb	r3, [r4, #0]
 8008aaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aac:	d10a      	bne.n	8008ac4 <_svfiprintf_r+0x130>
 8008aae:	7863      	ldrb	r3, [r4, #1]
 8008ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ab2:	d132      	bne.n	8008b1a <_svfiprintf_r+0x186>
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	1d1a      	adds	r2, r3, #4
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	9203      	str	r2, [sp, #12]
 8008abc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ac0:	3402      	adds	r4, #2
 8008ac2:	9305      	str	r3, [sp, #20]
 8008ac4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b88 <_svfiprintf_r+0x1f4>
 8008ac8:	7821      	ldrb	r1, [r4, #0]
 8008aca:	2203      	movs	r2, #3
 8008acc:	4650      	mov	r0, sl
 8008ace:	f7f7 fb87 	bl	80001e0 <memchr>
 8008ad2:	b138      	cbz	r0, 8008ae4 <_svfiprintf_r+0x150>
 8008ad4:	9b04      	ldr	r3, [sp, #16]
 8008ad6:	eba0 000a 	sub.w	r0, r0, sl
 8008ada:	2240      	movs	r2, #64	@ 0x40
 8008adc:	4082      	lsls	r2, r0
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	3401      	adds	r4, #1
 8008ae2:	9304      	str	r3, [sp, #16]
 8008ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae8:	4824      	ldr	r0, [pc, #144]	@ (8008b7c <_svfiprintf_r+0x1e8>)
 8008aea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008aee:	2206      	movs	r2, #6
 8008af0:	f7f7 fb76 	bl	80001e0 <memchr>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d036      	beq.n	8008b66 <_svfiprintf_r+0x1d2>
 8008af8:	4b21      	ldr	r3, [pc, #132]	@ (8008b80 <_svfiprintf_r+0x1ec>)
 8008afa:	bb1b      	cbnz	r3, 8008b44 <_svfiprintf_r+0x1b0>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	3307      	adds	r3, #7
 8008b00:	f023 0307 	bic.w	r3, r3, #7
 8008b04:	3308      	adds	r3, #8
 8008b06:	9303      	str	r3, [sp, #12]
 8008b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0a:	4433      	add	r3, r6
 8008b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b0e:	e76a      	b.n	80089e6 <_svfiprintf_r+0x52>
 8008b10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b14:	460c      	mov	r4, r1
 8008b16:	2001      	movs	r0, #1
 8008b18:	e7a8      	b.n	8008a6c <_svfiprintf_r+0xd8>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	3401      	adds	r4, #1
 8008b1e:	9305      	str	r3, [sp, #20]
 8008b20:	4619      	mov	r1, r3
 8008b22:	f04f 0c0a 	mov.w	ip, #10
 8008b26:	4620      	mov	r0, r4
 8008b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b2c:	3a30      	subs	r2, #48	@ 0x30
 8008b2e:	2a09      	cmp	r2, #9
 8008b30:	d903      	bls.n	8008b3a <_svfiprintf_r+0x1a6>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0c6      	beq.n	8008ac4 <_svfiprintf_r+0x130>
 8008b36:	9105      	str	r1, [sp, #20]
 8008b38:	e7c4      	b.n	8008ac4 <_svfiprintf_r+0x130>
 8008b3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b3e:	4604      	mov	r4, r0
 8008b40:	2301      	movs	r3, #1
 8008b42:	e7f0      	b.n	8008b26 <_svfiprintf_r+0x192>
 8008b44:	ab03      	add	r3, sp, #12
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	462a      	mov	r2, r5
 8008b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b84 <_svfiprintf_r+0x1f0>)
 8008b4c:	a904      	add	r1, sp, #16
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f3af 8000 	nop.w
 8008b54:	1c42      	adds	r2, r0, #1
 8008b56:	4606      	mov	r6, r0
 8008b58:	d1d6      	bne.n	8008b08 <_svfiprintf_r+0x174>
 8008b5a:	89ab      	ldrh	r3, [r5, #12]
 8008b5c:	065b      	lsls	r3, r3, #25
 8008b5e:	f53f af2d 	bmi.w	80089bc <_svfiprintf_r+0x28>
 8008b62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b64:	e72c      	b.n	80089c0 <_svfiprintf_r+0x2c>
 8008b66:	ab03      	add	r3, sp, #12
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	462a      	mov	r2, r5
 8008b6c:	4b05      	ldr	r3, [pc, #20]	@ (8008b84 <_svfiprintf_r+0x1f0>)
 8008b6e:	a904      	add	r1, sp, #16
 8008b70:	4638      	mov	r0, r7
 8008b72:	f000 f879 	bl	8008c68 <_printf_i>
 8008b76:	e7ed      	b.n	8008b54 <_svfiprintf_r+0x1c0>
 8008b78:	08009139 	.word	0x08009139
 8008b7c:	08009143 	.word	0x08009143
 8008b80:	00000000 	.word	0x00000000
 8008b84:	080088dd 	.word	0x080088dd
 8008b88:	0800913f 	.word	0x0800913f

08008b8c <_printf_common>:
 8008b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b90:	4616      	mov	r6, r2
 8008b92:	4698      	mov	r8, r3
 8008b94:	688a      	ldr	r2, [r1, #8]
 8008b96:	690b      	ldr	r3, [r1, #16]
 8008b98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	bfb8      	it	lt
 8008ba0:	4613      	movlt	r3, r2
 8008ba2:	6033      	str	r3, [r6, #0]
 8008ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ba8:	4607      	mov	r7, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	b10a      	cbz	r2, 8008bb2 <_printf_common+0x26>
 8008bae:	3301      	adds	r3, #1
 8008bb0:	6033      	str	r3, [r6, #0]
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	0699      	lsls	r1, r3, #26
 8008bb6:	bf42      	ittt	mi
 8008bb8:	6833      	ldrmi	r3, [r6, #0]
 8008bba:	3302      	addmi	r3, #2
 8008bbc:	6033      	strmi	r3, [r6, #0]
 8008bbe:	6825      	ldr	r5, [r4, #0]
 8008bc0:	f015 0506 	ands.w	r5, r5, #6
 8008bc4:	d106      	bne.n	8008bd4 <_printf_common+0x48>
 8008bc6:	f104 0a19 	add.w	sl, r4, #25
 8008bca:	68e3      	ldr	r3, [r4, #12]
 8008bcc:	6832      	ldr	r2, [r6, #0]
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	42ab      	cmp	r3, r5
 8008bd2:	dc26      	bgt.n	8008c22 <_printf_common+0x96>
 8008bd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bd8:	6822      	ldr	r2, [r4, #0]
 8008bda:	3b00      	subs	r3, #0
 8008bdc:	bf18      	it	ne
 8008bde:	2301      	movne	r3, #1
 8008be0:	0692      	lsls	r2, r2, #26
 8008be2:	d42b      	bmi.n	8008c3c <_printf_common+0xb0>
 8008be4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008be8:	4641      	mov	r1, r8
 8008bea:	4638      	mov	r0, r7
 8008bec:	47c8      	blx	r9
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d01e      	beq.n	8008c30 <_printf_common+0xa4>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	6922      	ldr	r2, [r4, #16]
 8008bf6:	f003 0306 	and.w	r3, r3, #6
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	bf02      	ittt	eq
 8008bfe:	68e5      	ldreq	r5, [r4, #12]
 8008c00:	6833      	ldreq	r3, [r6, #0]
 8008c02:	1aed      	subeq	r5, r5, r3
 8008c04:	68a3      	ldr	r3, [r4, #8]
 8008c06:	bf0c      	ite	eq
 8008c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c0c:	2500      	movne	r5, #0
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	bfc4      	itt	gt
 8008c12:	1a9b      	subgt	r3, r3, r2
 8008c14:	18ed      	addgt	r5, r5, r3
 8008c16:	2600      	movs	r6, #0
 8008c18:	341a      	adds	r4, #26
 8008c1a:	42b5      	cmp	r5, r6
 8008c1c:	d11a      	bne.n	8008c54 <_printf_common+0xc8>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	e008      	b.n	8008c34 <_printf_common+0xa8>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4652      	mov	r2, sl
 8008c26:	4641      	mov	r1, r8
 8008c28:	4638      	mov	r0, r7
 8008c2a:	47c8      	blx	r9
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d103      	bne.n	8008c38 <_printf_common+0xac>
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c38:	3501      	adds	r5, #1
 8008c3a:	e7c6      	b.n	8008bca <_printf_common+0x3e>
 8008c3c:	18e1      	adds	r1, r4, r3
 8008c3e:	1c5a      	adds	r2, r3, #1
 8008c40:	2030      	movs	r0, #48	@ 0x30
 8008c42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c46:	4422      	add	r2, r4
 8008c48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c50:	3302      	adds	r3, #2
 8008c52:	e7c7      	b.n	8008be4 <_printf_common+0x58>
 8008c54:	2301      	movs	r3, #1
 8008c56:	4622      	mov	r2, r4
 8008c58:	4641      	mov	r1, r8
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	47c8      	blx	r9
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d0e6      	beq.n	8008c30 <_printf_common+0xa4>
 8008c62:	3601      	adds	r6, #1
 8008c64:	e7d9      	b.n	8008c1a <_printf_common+0x8e>
	...

08008c68 <_printf_i>:
 8008c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	7e0f      	ldrb	r7, [r1, #24]
 8008c6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c70:	2f78      	cmp	r7, #120	@ 0x78
 8008c72:	4691      	mov	r9, r2
 8008c74:	4680      	mov	r8, r0
 8008c76:	460c      	mov	r4, r1
 8008c78:	469a      	mov	sl, r3
 8008c7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c7e:	d807      	bhi.n	8008c90 <_printf_i+0x28>
 8008c80:	2f62      	cmp	r7, #98	@ 0x62
 8008c82:	d80a      	bhi.n	8008c9a <_printf_i+0x32>
 8008c84:	2f00      	cmp	r7, #0
 8008c86:	f000 80d2 	beq.w	8008e2e <_printf_i+0x1c6>
 8008c8a:	2f58      	cmp	r7, #88	@ 0x58
 8008c8c:	f000 80b9 	beq.w	8008e02 <_printf_i+0x19a>
 8008c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c98:	e03a      	b.n	8008d10 <_printf_i+0xa8>
 8008c9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c9e:	2b15      	cmp	r3, #21
 8008ca0:	d8f6      	bhi.n	8008c90 <_printf_i+0x28>
 8008ca2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ca8 <_printf_i+0x40>)
 8008ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008d15 	.word	0x08008d15
 8008cb0:	08008c91 	.word	0x08008c91
 8008cb4:	08008c91 	.word	0x08008c91
 8008cb8:	08008c91 	.word	0x08008c91
 8008cbc:	08008c91 	.word	0x08008c91
 8008cc0:	08008d15 	.word	0x08008d15
 8008cc4:	08008c91 	.word	0x08008c91
 8008cc8:	08008c91 	.word	0x08008c91
 8008ccc:	08008c91 	.word	0x08008c91
 8008cd0:	08008c91 	.word	0x08008c91
 8008cd4:	08008e15 	.word	0x08008e15
 8008cd8:	08008d3f 	.word	0x08008d3f
 8008cdc:	08008dcf 	.word	0x08008dcf
 8008ce0:	08008c91 	.word	0x08008c91
 8008ce4:	08008c91 	.word	0x08008c91
 8008ce8:	08008e37 	.word	0x08008e37
 8008cec:	08008c91 	.word	0x08008c91
 8008cf0:	08008d3f 	.word	0x08008d3f
 8008cf4:	08008c91 	.word	0x08008c91
 8008cf8:	08008c91 	.word	0x08008c91
 8008cfc:	08008dd7 	.word	0x08008dd7
 8008d00:	6833      	ldr	r3, [r6, #0]
 8008d02:	1d1a      	adds	r2, r3, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6032      	str	r2, [r6, #0]
 8008d08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d10:	2301      	movs	r3, #1
 8008d12:	e09d      	b.n	8008e50 <_printf_i+0x1e8>
 8008d14:	6833      	ldr	r3, [r6, #0]
 8008d16:	6820      	ldr	r0, [r4, #0]
 8008d18:	1d19      	adds	r1, r3, #4
 8008d1a:	6031      	str	r1, [r6, #0]
 8008d1c:	0606      	lsls	r6, r0, #24
 8008d1e:	d501      	bpl.n	8008d24 <_printf_i+0xbc>
 8008d20:	681d      	ldr	r5, [r3, #0]
 8008d22:	e003      	b.n	8008d2c <_printf_i+0xc4>
 8008d24:	0645      	lsls	r5, r0, #25
 8008d26:	d5fb      	bpl.n	8008d20 <_printf_i+0xb8>
 8008d28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d2c:	2d00      	cmp	r5, #0
 8008d2e:	da03      	bge.n	8008d38 <_printf_i+0xd0>
 8008d30:	232d      	movs	r3, #45	@ 0x2d
 8008d32:	426d      	negs	r5, r5
 8008d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d38:	4859      	ldr	r0, [pc, #356]	@ (8008ea0 <_printf_i+0x238>)
 8008d3a:	230a      	movs	r3, #10
 8008d3c:	e011      	b.n	8008d62 <_printf_i+0xfa>
 8008d3e:	6821      	ldr	r1, [r4, #0]
 8008d40:	6833      	ldr	r3, [r6, #0]
 8008d42:	0608      	lsls	r0, r1, #24
 8008d44:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d48:	d402      	bmi.n	8008d50 <_printf_i+0xe8>
 8008d4a:	0649      	lsls	r1, r1, #25
 8008d4c:	bf48      	it	mi
 8008d4e:	b2ad      	uxthmi	r5, r5
 8008d50:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d52:	4853      	ldr	r0, [pc, #332]	@ (8008ea0 <_printf_i+0x238>)
 8008d54:	6033      	str	r3, [r6, #0]
 8008d56:	bf14      	ite	ne
 8008d58:	230a      	movne	r3, #10
 8008d5a:	2308      	moveq	r3, #8
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d62:	6866      	ldr	r6, [r4, #4]
 8008d64:	60a6      	str	r6, [r4, #8]
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	bfa2      	ittt	ge
 8008d6a:	6821      	ldrge	r1, [r4, #0]
 8008d6c:	f021 0104 	bicge.w	r1, r1, #4
 8008d70:	6021      	strge	r1, [r4, #0]
 8008d72:	b90d      	cbnz	r5, 8008d78 <_printf_i+0x110>
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	d04b      	beq.n	8008e10 <_printf_i+0x1a8>
 8008d78:	4616      	mov	r6, r2
 8008d7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d7e:	fb03 5711 	mls	r7, r3, r1, r5
 8008d82:	5dc7      	ldrb	r7, [r0, r7]
 8008d84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d88:	462f      	mov	r7, r5
 8008d8a:	42bb      	cmp	r3, r7
 8008d8c:	460d      	mov	r5, r1
 8008d8e:	d9f4      	bls.n	8008d7a <_printf_i+0x112>
 8008d90:	2b08      	cmp	r3, #8
 8008d92:	d10b      	bne.n	8008dac <_printf_i+0x144>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	07df      	lsls	r7, r3, #31
 8008d98:	d508      	bpl.n	8008dac <_printf_i+0x144>
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	6861      	ldr	r1, [r4, #4]
 8008d9e:	4299      	cmp	r1, r3
 8008da0:	bfde      	ittt	le
 8008da2:	2330      	movle	r3, #48	@ 0x30
 8008da4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008da8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008dac:	1b92      	subs	r2, r2, r6
 8008dae:	6122      	str	r2, [r4, #16]
 8008db0:	f8cd a000 	str.w	sl, [sp]
 8008db4:	464b      	mov	r3, r9
 8008db6:	aa03      	add	r2, sp, #12
 8008db8:	4621      	mov	r1, r4
 8008dba:	4640      	mov	r0, r8
 8008dbc:	f7ff fee6 	bl	8008b8c <_printf_common>
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d14a      	bne.n	8008e5a <_printf_i+0x1f2>
 8008dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc8:	b004      	add	sp, #16
 8008dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	f043 0320 	orr.w	r3, r3, #32
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	4833      	ldr	r0, [pc, #204]	@ (8008ea4 <_printf_i+0x23c>)
 8008dd8:	2778      	movs	r7, #120	@ 0x78
 8008dda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	6831      	ldr	r1, [r6, #0]
 8008de2:	061f      	lsls	r7, r3, #24
 8008de4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008de8:	d402      	bmi.n	8008df0 <_printf_i+0x188>
 8008dea:	065f      	lsls	r7, r3, #25
 8008dec:	bf48      	it	mi
 8008dee:	b2ad      	uxthmi	r5, r5
 8008df0:	6031      	str	r1, [r6, #0]
 8008df2:	07d9      	lsls	r1, r3, #31
 8008df4:	bf44      	itt	mi
 8008df6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dfa:	6023      	strmi	r3, [r4, #0]
 8008dfc:	b11d      	cbz	r5, 8008e06 <_printf_i+0x19e>
 8008dfe:	2310      	movs	r3, #16
 8008e00:	e7ac      	b.n	8008d5c <_printf_i+0xf4>
 8008e02:	4827      	ldr	r0, [pc, #156]	@ (8008ea0 <_printf_i+0x238>)
 8008e04:	e7e9      	b.n	8008dda <_printf_i+0x172>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	f023 0320 	bic.w	r3, r3, #32
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	e7f6      	b.n	8008dfe <_printf_i+0x196>
 8008e10:	4616      	mov	r6, r2
 8008e12:	e7bd      	b.n	8008d90 <_printf_i+0x128>
 8008e14:	6833      	ldr	r3, [r6, #0]
 8008e16:	6825      	ldr	r5, [r4, #0]
 8008e18:	6961      	ldr	r1, [r4, #20]
 8008e1a:	1d18      	adds	r0, r3, #4
 8008e1c:	6030      	str	r0, [r6, #0]
 8008e1e:	062e      	lsls	r6, r5, #24
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	d501      	bpl.n	8008e28 <_printf_i+0x1c0>
 8008e24:	6019      	str	r1, [r3, #0]
 8008e26:	e002      	b.n	8008e2e <_printf_i+0x1c6>
 8008e28:	0668      	lsls	r0, r5, #25
 8008e2a:	d5fb      	bpl.n	8008e24 <_printf_i+0x1bc>
 8008e2c:	8019      	strh	r1, [r3, #0]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	4616      	mov	r6, r2
 8008e34:	e7bc      	b.n	8008db0 <_printf_i+0x148>
 8008e36:	6833      	ldr	r3, [r6, #0]
 8008e38:	1d1a      	adds	r2, r3, #4
 8008e3a:	6032      	str	r2, [r6, #0]
 8008e3c:	681e      	ldr	r6, [r3, #0]
 8008e3e:	6862      	ldr	r2, [r4, #4]
 8008e40:	2100      	movs	r1, #0
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7f7 f9cc 	bl	80001e0 <memchr>
 8008e48:	b108      	cbz	r0, 8008e4e <_printf_i+0x1e6>
 8008e4a:	1b80      	subs	r0, r0, r6
 8008e4c:	6060      	str	r0, [r4, #4]
 8008e4e:	6863      	ldr	r3, [r4, #4]
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	2300      	movs	r3, #0
 8008e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e58:	e7aa      	b.n	8008db0 <_printf_i+0x148>
 8008e5a:	6923      	ldr	r3, [r4, #16]
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	4649      	mov	r1, r9
 8008e60:	4640      	mov	r0, r8
 8008e62:	47d0      	blx	sl
 8008e64:	3001      	adds	r0, #1
 8008e66:	d0ad      	beq.n	8008dc4 <_printf_i+0x15c>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	079b      	lsls	r3, r3, #30
 8008e6c:	d413      	bmi.n	8008e96 <_printf_i+0x22e>
 8008e6e:	68e0      	ldr	r0, [r4, #12]
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	4298      	cmp	r0, r3
 8008e74:	bfb8      	it	lt
 8008e76:	4618      	movlt	r0, r3
 8008e78:	e7a6      	b.n	8008dc8 <_printf_i+0x160>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4640      	mov	r0, r8
 8008e82:	47d0      	blx	sl
 8008e84:	3001      	adds	r0, #1
 8008e86:	d09d      	beq.n	8008dc4 <_printf_i+0x15c>
 8008e88:	3501      	adds	r5, #1
 8008e8a:	68e3      	ldr	r3, [r4, #12]
 8008e8c:	9903      	ldr	r1, [sp, #12]
 8008e8e:	1a5b      	subs	r3, r3, r1
 8008e90:	42ab      	cmp	r3, r5
 8008e92:	dcf2      	bgt.n	8008e7a <_printf_i+0x212>
 8008e94:	e7eb      	b.n	8008e6e <_printf_i+0x206>
 8008e96:	2500      	movs	r5, #0
 8008e98:	f104 0619 	add.w	r6, r4, #25
 8008e9c:	e7f5      	b.n	8008e8a <_printf_i+0x222>
 8008e9e:	bf00      	nop
 8008ea0:	0800914a 	.word	0x0800914a
 8008ea4:	0800915b 	.word	0x0800915b

08008ea8 <memmove>:
 8008ea8:	4288      	cmp	r0, r1
 8008eaa:	b510      	push	{r4, lr}
 8008eac:	eb01 0402 	add.w	r4, r1, r2
 8008eb0:	d902      	bls.n	8008eb8 <memmove+0x10>
 8008eb2:	4284      	cmp	r4, r0
 8008eb4:	4623      	mov	r3, r4
 8008eb6:	d807      	bhi.n	8008ec8 <memmove+0x20>
 8008eb8:	1e43      	subs	r3, r0, #1
 8008eba:	42a1      	cmp	r1, r4
 8008ebc:	d008      	beq.n	8008ed0 <memmove+0x28>
 8008ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ec6:	e7f8      	b.n	8008eba <memmove+0x12>
 8008ec8:	4402      	add	r2, r0
 8008eca:	4601      	mov	r1, r0
 8008ecc:	428a      	cmp	r2, r1
 8008ece:	d100      	bne.n	8008ed2 <memmove+0x2a>
 8008ed0:	bd10      	pop	{r4, pc}
 8008ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eda:	e7f7      	b.n	8008ecc <memmove+0x24>

08008edc <_sbrk_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d06      	ldr	r5, [pc, #24]	@ (8008ef8 <_sbrk_r+0x1c>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	602b      	str	r3, [r5, #0]
 8008ee8:	f7f7 fc24 	bl	8000734 <_sbrk>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_sbrk_r+0x1a>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_sbrk_r+0x1a>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	2000166c 	.word	0x2000166c

08008efc <memcpy>:
 8008efc:	440a      	add	r2, r1
 8008efe:	4291      	cmp	r1, r2
 8008f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f04:	d100      	bne.n	8008f08 <memcpy+0xc>
 8008f06:	4770      	bx	lr
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f12:	4291      	cmp	r1, r2
 8008f14:	d1f9      	bne.n	8008f0a <memcpy+0xe>
 8008f16:	bd10      	pop	{r4, pc}

08008f18 <_realloc_r>:
 8008f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	4615      	mov	r5, r2
 8008f20:	460c      	mov	r4, r1
 8008f22:	b921      	cbnz	r1, 8008f2e <_realloc_r+0x16>
 8008f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f28:	4611      	mov	r1, r2
 8008f2a:	f7ff bc4b 	b.w	80087c4 <_malloc_r>
 8008f2e:	b92a      	cbnz	r2, 8008f3c <_realloc_r+0x24>
 8008f30:	f7ff fbdc 	bl	80086ec <_free_r>
 8008f34:	2400      	movs	r4, #0
 8008f36:	4620      	mov	r0, r4
 8008f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3c:	f000 f81a 	bl	8008f74 <_malloc_usable_size_r>
 8008f40:	4285      	cmp	r5, r0
 8008f42:	4606      	mov	r6, r0
 8008f44:	d802      	bhi.n	8008f4c <_realloc_r+0x34>
 8008f46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f4a:	d8f4      	bhi.n	8008f36 <_realloc_r+0x1e>
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	4640      	mov	r0, r8
 8008f50:	f7ff fc38 	bl	80087c4 <_malloc_r>
 8008f54:	4607      	mov	r7, r0
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d0ec      	beq.n	8008f34 <_realloc_r+0x1c>
 8008f5a:	42b5      	cmp	r5, r6
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4621      	mov	r1, r4
 8008f60:	bf28      	it	cs
 8008f62:	4632      	movcs	r2, r6
 8008f64:	f7ff ffca 	bl	8008efc <memcpy>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7ff fbbe 	bl	80086ec <_free_r>
 8008f70:	463c      	mov	r4, r7
 8008f72:	e7e0      	b.n	8008f36 <_realloc_r+0x1e>

08008f74 <_malloc_usable_size_r>:
 8008f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f78:	1f18      	subs	r0, r3, #4
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bfbc      	itt	lt
 8008f7e:	580b      	ldrlt	r3, [r1, r0]
 8008f80:	18c0      	addlt	r0, r0, r3
 8008f82:	4770      	bx	lr

08008f84 <_init>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr

08008f90 <_fini>:
 8008f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f92:	bf00      	nop
 8008f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f96:	bc08      	pop	{r3}
 8008f98:	469e      	mov	lr, r3
 8008f9a:	4770      	bx	lr
